Commit ID,Date,Author,Commit Message,File Changed
5a545dde7dccee9c3067585ecd237e742deed698,2024-06-12 18:49:14,Lawrence Mitchell,"Pre-clean docstrings when running EmbedSignature transform (#6241)

PEP257 documents rules for stripping inline docstrings such that they
may be formatted at the REPL using help.

Broadly, this is ""strip whitespace from the first line, and dedent all
subsequent lines by the minimum common whitespace prefix"".

This allows writing a docstring as:

```python
def function(*args) -> result:
    """"""This is the first line.

    Here is a long description.
    """"""
```

and having it rendered as:

```
This is the first line.

Here is a long description.
```

Similarly to if the docstring were:

```python
def function(*args) -> result:
    """"""
    This is the first line.

    Here is a long description.
    """"""
```

When compiling Cython files with embedsignature=True, the insertion of
the function signature breaks the normal cleaning rules, since the
raw docstring becomes:

```python
def function(*args) -> result:
    """"""function(*args) -> result
This is the first line.

    Here is a long description.
    """"""
```

Which is then rendered in the REPL as:

```
function(*args) -> result
This is the first line.

    Here is a long description.
```

Note the over-indented long description.

To fix this, change signature embedding to pre-clean the input
docstring (via inspect.cleandoc) before prepending the signature. The
above example is then embedded as:

```python
def function(*args) -> result:
    """"""function(*args) -> result
This is the first line.

Here is a long description.
""""""
```
which is then rendered correctly.","['Cython/Compiler/AutoDocTransforms.py', 'tests/run/embedsignatures.pyx']"
50fb5cf1c220c0ecf9440d56612ffc8948e8e22e,2024-06-09 08:53:09,da-woods,Remove some more unused Py2 code (GH-6233),"['Cython/Compiler/ModuleNode.py', 'Cython/Utility/TypeConversion.c']"
bcef509b6af6eea6c21f84abfbcdc1e61f455e4b,2024-06-07 18:35:47,Lysandros Nikolaou,Set up uploading non-compiled nightly wheels twice weekly (#6229),['.github/workflows/nightly-wheels.yml']
52528da1a7899a459252041a694bcf0a78f7f5cd,2024-06-06 19:42:17,Michael Man,"Fix segfault on zero-length slice assignment on memoryview (GH-6230)

Zero length memoryview assignment was incorrectly using index assignment instead of slice assignment.

Closes https://github.com/cython/cython/issues/6227","['Cython/Utility/MemoryView.pyx', 'tests/memoryview/memoryview.pyx']"
965d7aa3485b8ba0497803c5b54cacf3f4acdbb0,2024-06-04 06:19:01,da-woods,"Get basic generators running in Limited API (#5843)

This just seems to require removing the bits handling the f_back
of the current traceback.

It largely just brings it to the situation PyPy is in, so I imagine
some of the more complicated things based on this won't work.","['Cython/Utility/Coroutine.c', 'Cython/Utility/ObjectHandling.c', 'tests/run/isolated_limited_api_tests.srctree']"
4f91ac3b5d9b75c460c68f6e2c6bb515bcc4eb4c,2024-06-03 17:48:41,da-woods,"Support weakref in limited api cdef classes (#5840)

Fixes #5793.

Note that this won't work on Python versions <3.9. (The code will
compile fine, but the classes won't be weak referenceable).","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/isolated_limited_api_tests.srctree']"
cf10ea12e3fc3637cf14e1bf962b295f53cc1a50,2024-05-28 09:26:06,Stefan Behnel,Merge branch '3.0.x',[]
eae4f108521428e6edabc9976ecb1549801d881f,2024-05-28 09:06:59,Stefan Behnel,Fix codespell issues.,"['.codespellrc', 'Cython/Compiler/PyrexTypes.py', 'Cython/Debugger/libpython.py']"
101d2a2b640250b48cde88073621d2587f3373b8,2024-05-28 09:06:59,Stefan Behnel,Fix codespell issues.,"['.codespellrc', 'Cython/Compiler/PyrexTypes.py', 'Cython/Debugger/libpython.py']"
67be4609e040c56c973d50eca7038486fcb384e0,2024-05-28 07:47:22,Stefan Behnel,Make the refnanny only (try to) acquire the GIL if we don't have it already.,['Cython/Compiler/Nodes.py']
4904e152dbfe4c9d0a07e9ffa0e4d52c857fa48e,2024-05-27 16:06:25,Lysandros Nikolaou,Set up CI for the free threaded build (#6217),"['.github/workflows/ci.yml', 'Tools/ci-run.sh']"
39b1e572e2c6db0772950c0266877aa44f74e057,2024-05-25 20:55:47,Matus Valo,"Fix crash when function contains fused extension type (#6209)

Backport of #6204","['Cython/Compiler/PyrexTypes.py', 'tests/errors/fused_types.pyx']"
19f67cb1f4ab66b87b1bdfc881bb875faed8c1a3,2024-05-23 16:44:49,da-woods,"Rename to ""CYTHON_COMPILING_IN_CPYTHON_FREETHREADING"" (#6213)

Because we're finding in other contexts that ""nogil"" seems
ambiguous with the ""with nogil"" feature, consistency is good,
and it's an early enough stage that we can change this.","['Cython/Compiler/Code.py', 'Cython/Compiler/Nodes.py', 'Cython/Runtime/refnanny.pyx', 'Cython/Utility/ModuleSetupCode.c', 'tests/compile/buildenv.pyx']"
108fdcc0b75c6a6d6a4ba7d024b12fb2fa2148c6,2024-05-22 19:31:31,Stefan Behnel,Improve comment.,['Cython/Compiler/PyrexTypes.py']
6d946f76c1c9a2505a63ef82ec10968176561fc1,2024-05-22 07:45:01,Stefan Behnel,Change a useless no-op check to what was probly intended: avoid showing an arbitrary (and potentially misleading) error message when there's more than one mismatch and instead show a generic message.,"['Cython/Compiler/PyrexTypes.py', 'tests/errors/cpp_no_constructor.pyx']"
0ef13a455b9b6ec408844593ade44bd23ee28633,2024-05-22 07:26:32,Stefan Behnel,Assure deterministic ordering in error message.,['Cython/Compiler/PyrexTypes.py']
a2342fd60b82b0734b001d52de4ee703719ed267,2024-05-22 07:24:34,Stefan Behnel,Simplify the merge_template_deductions() reduction function.,['Cython/Compiler/PyrexTypes.py']
81563412fdc187bf91f4da6aa9d46f4bd2c60882,2024-05-22 18:52:26,da-woods,"Try to improve parallel in free-threading (#6199)

Add locking to refnanny.

Add mutex to guard the three exception state variables in
a parallel block.","['Cython/Compiler/Code.py', 'Cython/Compiler/Naming.py', 'Cython/Compiler/Nodes.py', 'Cython/Runtime/refnanny.pyx', 'Cython/Utility/ModuleSetupCode.c']"
9e81f994aee2a391db8c2bc9c9b9e79fff74e1ea,2024-05-21 17:36:42,Matus Valo,Fix crash when function contains fused extension type (#6204),"['Cython/Compiler/PyrexTypes.py', 'tests/errors/fused_types.pyx']"
701e751aa379c719f0fcc3f43af01dae5d806de6,2024-05-21 16:27:21,da-woods,"Fix write unraisable followed by interpretter shutdown (#6089)

I'm not 100% sure what causes the error, but I think it's
that _PyErr_PrintEx stashes away some illicit references to
invalid objects on sys.last_exc.

There's no reason to do this, so just do the print without the
stash.

Fixes #6022","['Cython/Utility/Exceptions.c', 'tests/run/dealloc_raise.srctree']"
cd5a967a4d75c8d5925309c1983a59ab2e4e1783,2024-05-21 16:27:21,da-woods,"Fix write unraisable followed by interpretter shutdown (#6089)

I'm not 100% sure what causes the error, but I think it's
that _PyErr_PrintEx stashes away some illicit references to
invalid objects on sys.last_exc.

There's no reason to do this, so just do the print without the
stash.

Fixes #6022","['Cython/Utility/Exceptions.c', 'tests/run/dealloc_raise.srctree']"
7fec2f966caf94fe778043b842a50766b48f2a7d,2024-05-17 09:25:09,Clément Robert,docs: Recommend not distributing generated code (GH-6201),['docs/src/userguide/source_files_and_compilation.rst']
c13510671680ed135ab4634eb48484539702643e,2024-05-16 19:52:08,da-woods,"Categorise memoryview tests (#6167)

These are a big chunk of tests that need to be run/not run
in Limited API mode depending on the Python version.

This categorization isn't hugely useful right now, but should
become more useful as we're able to test more with the limited
API.","['runtests.py', 'tests/limited_api_bugs.txt', 'tests/memoryview_tests.txt']"
d9dde8bbefc7fa439368f10b924dcb76c6e462bd,2024-05-16 07:51:29,da-woods,"Make classmethod work in limited-api (#5800)

Except for the class where binding=False, which I don't think
we can easily do. I don't care that much given that binding=True
works correctly.

Fixes #5797","['Cython/Utility/CythonFunction.c', 'tests/run/isolated_limited_api_tests.srctree']"
562fbbfdc32365a1f10c4a94a65a5d915cf9ded8,2024-05-13 12:32:46,scoder,"Add Py3.13 support in cpython/time.pxd (GH-6187)

* Use new PyTime_*Raw() functions in cpython/time.pxd for Py3.13.

* Allow PyPy (and others) to define ""PyTime_t"" etc. and use them if available, otherwise fall back to the older functions separately.","['Cython/Includes/cpython/time.pxd', 'tests/run/time_pxd.pyx']"
563f24fe7a5a9b02445fb377a581b7f1ea820ce8,2024-05-13 12:28:12,Stefan Behnel,Avoid C compiler warning about unused argument in PyPy.,['Cython/Utility/ObjectHandling.c']
bc590426ced4c7d5ba0c8476e18204812e0f354a,2024-05-11 13:51:29,da-woods,"Update documentation refcounting example (#6180)

I think this makes some of the different behaviour clearer. The
initial example was somewhat complicated by things like
""is sys.getrefcount creating an extra reference?"", and reading
global variables inside the functions which isn't
hugely relevant to much.

This tries to show the effect of creating new references inside
a function, which is more direct and probably shows what
we actually want.","['docs/examples/userguide/language_basics/parameter_refcount.py', 'docs/examples/userguide/language_basics/parameter_refcount.pyx', 'docs/src/userguide/language_basics.rst']"
72221faa1362c4c5b2fa1d8b4ba1a195e97a5c5f,2024-05-11 10:26:49,da-woods,"Documentation of old buffer syntax options (#6181)

Partial fix for #4641
Partial fix for #6160",['docs/src/tutorial/numpy.rst']
c877b612d81da75345aeca02ec3543045f0f8e9f,2024-04-09 19:01:32,Stefan Behnel,Fix a C compiler warning about implicit sign conversion.,['Cython/Compiler/ExprNodes.py']
6eb4d9b8ed17efe44abf45e8a1519a86bd9ad0f1,2024-04-12 07:40:46,Stefan Behnel,"CI: Stop using deprecated macos-11 job images, but still target 11.0 (instead of 10.5, which is also legacy).",['.github/workflows/ci.yml']
0cb942ef5516afe4612a270f28125cfe58c41e2b,2024-05-04 18:58:11,Stefan Behnel,Adapt CPython compatibility test to new error message in Py3.13.,['tests/run/test_unicode_string_tests.pxi']
15375c6e0fdc790605fb7d87c4b3cd02fef66eff,2024-05-09 17:33:56,Inada Naoki,Remove unused include (#6188),['Cython/Utility/ObjectHandling.c']
dbb4e6a0e36a6c190d67d6e829db9164503be5d4,2024-05-09 07:24:30,Alexander Condello,"Mark libcpp.optional.value as except + (#6190)

std::optional::value() raises a std::bad_optional_access
if it does not contain a value.","['Cython/Includes/libcpp/optional.pxd', 'tests/run/cpp_stl_optional.pyx']"
5640a0ec814c8ef5ba52791f40af14e37676239c,2024-05-05 16:27:07,Jelle van der Waa,"Test runner: Python 3.13 removes unittest.findTestCase (#6182)

According to the Python 3.12 documentation findTestCase is deprecated and removed in 3.13 in favor of
loadTestsFromModule.",['runtests.py']
45db483cbe128c29a1e9ffe9f5a4db12cf77cddd,2024-05-05 16:27:07,Jelle van der Waa,"Test runner: Python 3.13 removes unittest.findTestCase (#6182)

According to the Python 3.12 documentation findTestCase is deprecated and removed in 3.13 in favor of
loadTestsFromModule.",['runtests.py']
eb677a5a88243f9869a85d33fb53224ce192468b,2024-05-05 09:57:39,Matus Valo,"[Docs] Create links to Python/C API (#4881)

Using `:c:func:` to automatically find them.","['docs/src/tutorial/embedding.rst', 'docs/src/tutorial/pure.rst', 'docs/src/userguide/buffer.rst', 'docs/src/userguide/extension_types.rst', 'docs/src/userguide/external_C_code.rst', 'docs/src/userguide/language_basics.rst', 'docs/src/userguide/source_files_and_compilation.rst', 'docs/src/userguide/special_methods.rst']"
0a7185a54d3fb362386a2c049cd0ba2b51e932f1,2024-05-05 08:20:33,Matus Valo,"Call `__set_name__` during setting type attribute. (#6179)

Based on https://docs.python.org/3/reference/datamodel.html#object.__set_name__

Co-authored-by: da-woods <dw-git@d-woods.co.uk>
Co-authored-by: scoder <stefan_ml@behnel.de>","['Cython/Utility/ExtensionTypes.c', 'docs/src/userguide/special_methods.rst', 'tests/run/module_init_error.srctree', 'tests/run/special_methods_T561.pyx']"
34b485d6ce36606afb581016cc899eff85461652,2024-05-05 08:15:41,YoSTEALTH,[dpcs] Improve `@dataclass` example (#4866),['docs/examples/userguide/extension_types/dataclass.pyx']
a60d86273d87d866692a811d026b158377bc8c79,2024-05-05 08:01:56,Tong He,Accelerate divmod() for C int type integers (#6073),"['Cython/Compiler/Builtin.py', 'Cython/Utility/Builtins.c', 'tests/run/builtin_divmod.py']"
cff39ef10458e4cfee0fb905063b4d395df83eeb,2024-05-04 20:21:22,scoder,"Use the new large PyLong conversion functions in Py3.13. (GH-5997)

See https://github.com/python/cpython/issues/111140

Also clean up and simplify the fallback implementation, fixing some reference leaks along the way.",['Cython/Utility/TypeConversion.c']
dc63743e162a6f89d982399e5e5d1bf67a364f01,2024-05-04 20:21:22,scoder,"Use the new large PyLong conversion functions in Py3.13. (GH-5997)

See https://github.com/python/cpython/issues/111140

Also clean up and simplify the fallback implementation, fixing some reference leaks along the way.",['Cython/Utility/TypeConversion.c']
0ec9f4594d9874fc72291004df893072bc4254eb,2024-05-04 18:58:11,Stefan Behnel,Adapt CPython compatibility test to new error message in Py3.13.,['tests/run/test_unicode_string_tests.pxi']
d17f7460c6558bf2790acfacddd99c9d52c25a8d,2024-05-04 09:07:28,Alexandra Pereira,"[Docs] Update examples to language lvl 3 (#6143)



Signed-off-by: Alexandra Pereira <alesilva241@gmail.com>","['docs/examples/userguide/extension_types/dataclass.pyx', 'docs/examples/userguide/language_basics/casting_python.pyx', 'docs/examples/userguide/parallelism/parallel.pyx', 'docs/src/userguide/language_basics.rst', 'runtests.py']"
bcfce77eff7193062c8a0eaeb5b8a220f75c2d53,2024-05-03 18:29:53,Matus Valo,Document examples of arrays of pointers and pointer to array (#6177),['docs/src/userguide/language_basics.rst']
c2d9ab2ebc9ef61ecb7adffe311c930aecb99b7b,2024-05-02 17:58:41,da-woods,Merge branch '3.0.x',[]
837433ac52d64cef10e000a1c07a77a56c04babd,2024-05-02 17:57:42,da-woods,Drop debugging prints from test,['tests/run/legacy_implicit_noexcept_build.srctree']
55868ba529eba1e1c245a9065f46569e9d725a40,2024-05-02 17:50:04,da-woods,Fix bytes startswith/endswith with nonbytes argument (#6168),"['Cython/Utility/StringTools.c', 'tests/run/bytesmethods.pyx']"
c20230196fcc48f95f100ccd9612f1ba274bb249,2024-05-02 17:50:04,da-woods,Fix bytes startswith/endswith with nonbytes argument (#6168),"['Cython/Utility/StringTools.c', 'tests/run/bytesmethods.pyx']"
dcd7b189cf839b6f29fe925aeb5953f2c98bc3f6,2024-05-02 17:45:12,Matus Valo,"[3.0] Do not set exception_check if already set during analyzing pxd file (#6150)

Co-authored-by: da-woods <dw-git@d-woods.co.uk>","['Cython/Compiler/Nodes.py', 'tests/pypy2_bugs.txt', 'tests/run/legacy_implicit_noexcept_build.srctree']"
4d8a3c9701ec78d08cd7923e3936d191d036f0e9,2024-05-02 17:37:35,da-woods,"Warn on use of the old Py2 buffer protocol (#6175)

Instead of complaining about conversion of arguments.

Update the docs.

Fixes #6174","['Cython/Compiler/Code.py', 'Cython/Compiler/ParseTreeTransforms.py', 'docs/src/userguide/special_methods.rst']"
a6d810b970c21948c7fcdeec2cf28769e716e4a9,2024-05-01 06:19:35,da-woods,[docs] Fix link in embedding docs,['docs/src/tutorial/embedding.rst']
8d5eb48473db9fda485c215683a6f22d1bb91c08,2024-04-27 09:23:01,da-woods,"Make limited API object==float work (#6098)

Fixes #6093","['Cython/Utility/Optimize.c', 'tests/run/isolated_limited_api_tests.srctree']"
884ce74ae2229ee4191e96751635243f333fa143,2024-04-26 05:25:08,Somin An,Add c++11 emplace functions to deque.pxd (#6159),"['Cython/Includes/libcpp/deque.pxd', 'tests/run/cpp_stl_cpp11.pyx']"
b684235561fbf1049927a6fda9ad3cd9f7e096f6,2024-04-25 17:01:51,Nathan Goldbaum,"Add bindings for Py_REFCNT and use it in tests and docs (#6152)

rather than directly accessing ob_refcnt (which doesn't exist in the nogil build of Python)","['Cython/Includes/cpython/ref.pxd', 'docs/examples/userguide/language_basics/parameter_refcount.py', 'docs/examples/userguide/language_basics/parameter_refcount.pyx', 'tests/buffers/bufaccess.pyx', 'tests/memoryview/memoryview.pyx', 'tests/memoryview/memslice.pyx', 'tests/run/exceptionrefcount.pyx', 'tests/run/refcount_in_meth.pyx', 'tests/run/test_coroutines_pep492.pyx']"
c3824017773af45779baa3f0f261b92fba782cdb,2024-04-25 16:26:32,Matus Valo,Remove forgotten debug prints (#6157),['tests/run/legacy_implicit_noexcept_build.srctree']
9884a5aa8bb8188335d509355f416f752d3d1ef3,2024-04-23 18:43:21,Nathan Goldbaum,Re-enable CYTHON_USE_PYLONG_INTERNALS and CYTHON_USE_PYLONG_INTERNALS for the nogil build (#6155),['Cython/Utility/ModuleSetupCode.c']
023d4af351042a3b6241dbe06cbb003b3ce1fb58,2024-04-21 18:22:01,Matus Valo,"Do not set exception_check if already set during analyzing pxd file (#6124)

Co-authored-by: da-woods <dw-git@d-woods.co.uk>","['Cython/Compiler/Nodes.py', 'tests/run/legacy_implicit_noexcept_build.srctree']"
ff628e47df1626e4bfacb77c21073fe795f18f25,2024-04-21 06:15:55,Matus Valo,Use FileNotFoundError instead of OSError (#6149),['Cython/Compiler/Main.py']
a4881df99ce71b3ffc4659b2a43afe8f84d19256,2024-04-18 21:02:34,Nathan Goldbaum,Enable vectorcall on nogil build (#6147),['Cython/Utility/ModuleSetupCode.c']
3ce5c8db31deb670f0ae39a1d7a9cb334703bbba,2024-04-18 08:50:35,Lysandros Nikolaou,Simplify module setup code for nogil/free-threaded CPython (GH-6137),"['Cython/Utility/ModuleSetupCode.c', 'tests/compile/buildenv.pyx']"
b2965bd476752da410ad5a62447185841da5aa8a,2024-04-15 08:46:29,Stefan Behnel,Remove outdated comment.,['Cython/Utility/Exceptions.c']
010a2c12d3c2aebcb8cd80d8d8df4b7e2ee167d3,2024-04-12 11:45:32,Stefan Behnel,Fix a comment.,['Cython/Includes/posix/types.pxd']
368bbde62565f8798e061754caf60c94107f2d8c,2024-04-12 07:40:46,Stefan Behnel,"CI: Stop using deprecated macos-11 job images, but still target 11.0 (instead of 10.5, which is also legacy).",['.github/workflows/ci.yml']
ec9cac9e5bb9fe5d5e23b49acc1e1759d2c04bcd,2024-04-11 07:29:44,Stefan Behnel,Avoid 'unreachable code' warnings in clang.,"['Cython/Compiler/ExprNodes.py', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/StringTools.c']"
16994b9df3461b1a6f4e5971ab8a7b72f2a4b006,2024-04-11 06:31:18,Alexandra Pereira,"Docs: Adapt string examples to language_level=3 (#6140)

Signed-off-by: Alexandra Pereira <alesilva241@gmail.com>
Co-authored-by: Francisco Valério <kjango@gmail.com>","['docs/examples/tutorial/string/cpp_string.pyx', 'docs/examples/tutorial/string/for_bytes.pyx', 'docs/examples/tutorial/string/for_char.pyx']"
9b33024a2efe7b275ba49492822c274492b09fbb,2024-04-11 06:27:52,Alexandra Pereira,"Docs: Fix example manual work in parallelization (#6139)

Signed-off-by: Alexandra Pereira <alesilva241@gmail.com>",['docs/examples/tutorial/parallelization/manual_work.pyx']
0a582a981c3746c5ced52a0ad896585b176589fc,2024-04-09 19:01:32,Stefan Behnel,Fix a C compiler warning about implicit sign conversion.,['Cython/Compiler/ExprNodes.py']
c6b4ce3e70326563ed411ec450ca22e4123854b6,2024-04-09 08:09:29,Stefan Behnel,Test runner: Avoid rebuilding the refnanny if it can already be imported.,['runtests.py']
5318788ed7916bce30fefadabb62ba32470c4346,2024-04-08 07:34:06,Stefan Behnel,Merge branch '3.0.x',[]
5346cae423bfb259f21501067db06dc355b54a76,2024-04-08 07:19:48,Stefan Behnel,"Add type slot ""tp_versions_used"" that was added in Py3.13a4.","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
2bc34d7b4ed9adca41c9eee4b60e80c0069d1318,2024-04-08 07:19:48,Stefan Behnel,"Add type slot ""tp_versions_used"" that was added in Py3.13a4.","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
0028bcc72d64b73bbee0fd3cfe6dc3f0c22a2741,2024-04-08 06:39:47,Stefan Behnel,Remove some Py2-isms.,['Cython/Compiler/ParseTreeTransforms.py']
6294f7a3eaadbd55f16daf2b86aa45d359e3d8a4,2024-04-08 06:33:07,Stefan Behnel,Remove Py2 legacy test code.,['tests/run/pep3135_class_cell.py']
d21ccfdc619d30a68d2f4735925dae2ba3555dd8,2024-04-07 12:12:44,da-woods,"Fix behaviour of __class__ special variable (#4094)

Finishes up #2916 and closes #2912

Uses ClassClassNode for regular classes to get the attribute reliably at runtime (for cdef class it can be resolved at compile-time).

It essentially adds the line:

__class__ = <ClassCellNode>

at the start of the top-level function. This seems slightly clunky, but the advantage is that __class__ is automatically picked up by locals() and is also automatically captured into the scope of any inner functions. No other approach looked like it would handle inner functions particularly easily.


Co-authored-by: Tom Keefe <tom.keefe@eigentech.com>
Co-authored-by: Tom Keefe <8655118+MisterKeefe@users.noreply.github.com>","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ParseTreeTransforms.pxd', 'Cython/Compiler/ParseTreeTransforms.py', 'tests/run/pep3135_class_cell.py', 'tests/run/py3k_super.py', 'tests/run/py3k_super.pyx']"
085ffdfc6a978bec3bbf240d66c8e855626cad09,2024-04-07 12:00:37,da-woods,"Always add binops to methoddef (#5868)

This means that the user-provided version can be looked up
by e.g. self.__add__ skipping the Cython-generated dispatch
wrapper and matching python semantics.

Fixes #5863","['Cython/Compiler/Code.py', 'Cython/Compiler/TypeSlots.py', 'tests/run/binop_reverse_methods_GH2056.pyx']"
3e36d9b3c480571033dfe559df4896cbd8031cd9,2024-04-07 07:58:02,Vyas Ramasubramani,"Add some more limited API support (#6061)

* cython.array
* C++ type conversion
* Fused functions
* Import dotted","['Cython/Compiler/ExprNodes.py', 'Cython/Utility/CppConvert.pyx', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/MemoryView_C.c', 'Cython/Utility/ModuleSetupCode.c']"
ebb1ada6529edf95806e5ffa4b1f6ec60995b100,2024-04-07 07:54:24,da-woods,"Fix typo in defaults as class (#6133)

Fix a typo introduced in https://github.com/cython/cython/pull/4673.

Shouldn't make a difference but avoids accidentally generating
__dict__ and __weakref__ getters",['Cython/Compiler/Symtab.py']
8f27a266ccca5d6a3d9d27d0ae74ba494de0bca8,2024-04-06 13:43:34,da-woods,"Change CyFunction defaults to a PyObject (#4673)

* Change CyFunction defaults to a PyObject

... instead of a struct.

A variety of advantages are listed in #4374 (alongside the
disadvantage that notably more code is generated for a cdef class
than a struct).","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Symtab.py', 'Cython/Utility/CythonFunction.c']"
cdb1ed4505049880628d2308c08604bbea316654,2024-04-06 13:10:25,da-woods,"Remove unused function from Parsing.py (#6131)

The unused @cfunc was creating a compiler warning",['Cython/Compiler/Parsing.py']
b0577eca218cb428689cc91e5bbd37cbd7c04f32,2024-04-06 12:43:23,Stefan Behnel,Cleanup: Remove trivial constructor.,['Cython/Compiler/Main.py']
cbc9b9478db3aff86f041b03739e16e54e48d2f3,2024-04-06 12:29:11,Stefan Behnel,Remove an unused import.,['Cython/Compiler/Parsing.py']
713e978f8773cba86d6dd09fd93d60982c666f25,2024-04-06 12:39:18,Matus Valo,"Refactor Cache.py (GH-6117)

Improves https://github.com/cython/cython/pull/6090

* transitive_fingerprint() now accepts set of dependencies instead of DependencyTree instance

* Use FingerprintFlags dataclass to pass the arguments

* Add CompilationResult.get_generated_source_files() method.","['Cython/Build/Cache.py', 'Cython/Build/Dependencies.py', 'Cython/Compiler/Main.py']"
6e8585b3def3a5b8a6ab9a3291015a8806024b6a,2024-04-04 18:48:31,Matus Valo,"[docs] Document Cython cache (#6095)

Co-authored-by: da-woods <dw-git@d-woods.co.uk>","['Cython/Build/Dependencies.py', 'docs/src/userguide/source_files_and_compilation.rst']"
b197288e92f58278bd614d0e88b6a4330eb1bbe2,2024-04-02 06:39:13,Alexandra Pereira,"Add tests for lookup_module_cpdef option (#6115)

Including a .srctree file with modules A and B to
validate the overriding behaviour of analyse_expressions
method.

Signed-off-by: Alexandra Pereira <alesilva241@gmail.com>
Co-authored-by: Francisco Valério <kjango@gmail.com>",['tests/run/analyse_expressions.srctree']
9ba08c73193fd850ea4465e1928bdc40c60dae0e,2024-04-01 14:41:10,Stefan Behnel,Remove trailing whitespace.,['Cython/Utility/Builtins.c']
45dc1bd56e894e595e66031cf8313ba8fb5d7cd5,2024-04-01 14:30:19,da-woods,"Make C++ conversion lengthhint limited-api friendly (GH-6108)

Follow up to https://github.com/cython/cython/pull/6077.

Also allows Cython utility code to require C utility code.

I've picked the easy route and not implemented a limited API
version of length hint. It'd be perfectly possible to do
this, but it doesn't really seem like a priority.","['Cython/Compiler/UtilityCode.py', 'Cython/Utility/CppConvert.pyx', 'Cython/Utility/ObjectHandling.c']"
7ad534376c4d562046a3ae58aa0edd1fa68925c0,2024-03-31 16:08:07,Bluenix,"Help type checkers find Shadow typings (#4335)

Before this commit there was certain issues where static type checkers
had issues finding the typings in Shadow.pyi and it was also not always
included in installations.

This commit additionally poses as a necessary renovation of the typings
themselves by adding some missing members and switching to newer syntax
because .pyi files are not constrained to a specific Python version.","['Cython/Shadow.pyi', 'Cython/__init__.pyi', 'Cython/py.typed', 'cython.py', 'runtests.py', 'setup.py', 'tests/run/pure_py3.py']"
e8115ac92e1d80dc42017c0db2bdcfd9444fabcb,2024-03-30 19:12:23,Stefan Behnel,Merge branch '3.0.x',"['.github/workflows/wheels.yml', 'CHANGES.rst', 'Cython/Compiler/Symtab.py']"
3bad4ed636b8f66d87d33a4812f6c538f26271fa,2024-03-30 19:07:49,Stefan Behnel,Build: Upgrade qemu action.,['.github/workflows/wheels.yml']
7ae85318297ed306b84ecc72d0279e27090b25f3,2024-03-30 17:43:23,Stefan Behnel,Build: Upgrade action version.,['.github/workflows/wheels.yml']
71c5775d250ea2ed874ab1ecdd5a2f769fe1d6e7,2024-03-30 15:49:28,Stefan Behnel,Fix Py3-ism in Py2/3 code.,['Cython/Compiler/Symtab.py']
6cab0d609272e33b9c999e4cd3c6ecbf564b026f,2024-03-30 15:44:16,Stefan Behnel,Prepare release of 3.0.10.,"['CHANGES.rst', 'Cython/Shadow.py']"
4e842a9d8d4c0e9cdd9ac4ad4128f073ea4bca00,2024-03-30 15:17:40,Stefan Behnel,Remove a useless 'f' string prefix.,['Cython/Compiler/Symtab.py']
8aba690f708739cda8732f71ff4269a0b973c1a9,2024-03-29 08:55:22,da-woods,"Improve performance hints for nogil + pxd (#6088)

In order to be called efficiently, these functions must
have the exception specification set in the pxd file since
Cython is unable to assume an implicit exception specification.

This improves the quality of the messages to draw attention to
this detail.

Closes #6001","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'tests/compile/nogil_perf_hints.pyx', 'tests/compile/nogil_perf_hints_pxd.pxd', 'tests/run/nogil.pxd', 'tests/run/nogil.pyx']"
d0a6a1b17ec463516beaa39ce5d76dedde5d53f1,2024-03-29 08:55:22,da-woods,"Improve performance hints for nogil + pxd (#6088)

In order to be called efficiently, these functions must
have the exception specification set in the pxd file since
Cython is unable to assume an implicit exception specification.

This improves the quality of the messages to draw attention to
this detail.

Closes #6001","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'tests/compile/nogil_perf_hints.pyx', 'tests/compile/nogil_perf_hints_pxd.pxd', 'tests/run/nogil.pxd', 'tests/run/nogil.pyx']"
ae120d5ce4f4cf02f6d68990cb5597bec7864218,2024-02-26 10:29:33,Stefan Behnel,Disable pstats tests also in 3.13 as long as they wait for a new C-API in CPython.,['runtests.py']
7efdc81ecd120869f136e1a1a7bbbade44783a02,2024-03-28 12:32:58,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
27364ef96ae542f3486abeecb6902f48e5868ca9,2024-03-28 12:32:42,Stefan Behnel,Update changelog.,['CHANGES.rst']
e178fc20c3af43257a9c87bcc6b3f2be2854b34a,2024-03-28 11:58:35,da-woods,"Reduce cap length of cnames generated from long function argument lists  (GH-6104)

Because max_prefix was much less than max_len, it was actually just making the names longer.

Closes https://github.com/cython/cython/issues/6052","['Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Tests/TestTypes.py']"
dd8b2b2af3fec51ab56f3e24d478323e504b80a5,2024-03-28 11:58:35,da-woods,"Reduce cap length of cnames generated from long function argument lists  (GH-6104)

Because max_prefix was much less than max_len, it was actually just making the names longer.

Closes https://github.com/cython/cython/issues/6052","['Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Tests/TestTypes.py']"
a4197813c684f01b32c7e03948a55b26a88a7d70,2024-03-28 11:45:18,da-woods,"Move some ""early inline"" code behind ""include 'Python.h'"" to make it usable (GH-6017)

Fixes https://github.com/cython/cython/issues/6014

```
cdef extern from ""Python.h"":
    """"""
    code
    """"""
```
causes the code to be included right at the top of the file,
before anything useful is defined - in this case, CYTHON_COMPILING_IN_PYPY.","['Cython/Includes/cpython/contextvars.pxd', 'Cython/Includes/cpython/dict.pxd', 'Cython/Includes/cpython/float.pxd']"
9db153cd9be89d65514963c46cdee59f1f3cdc86,2024-03-28 11:38:47,Stefan Behnel,Merge branch '3.0.x',"['CHANGES.rst', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Symtab.py', 'tests/bugs.txt', 'tests/run/complex_numbers_cpp.pyx', 'tests/run/inherited_final_method.pyx']"
03e839359d841a39966096cf3be8ea8edd1b6f7d,2024-03-28 11:38:29,Stefan Behnel,Update changelog.,['CHANGES.rst']
5fc42b1c3cd8441861bbb778cd2b2868b3759870,2024-03-28 11:29:54,Lisandro Dalcin,"Fix self cast when calling final methods (GH-6085)

Closes https://github.com/cython/cython/issues/2747","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Symtab.py', 'tests/bugs.txt', 'tests/run/inherited_final_method.pyx']"
98ebae056ee89bd0d16d280393ec97dac98af93d,2024-03-27 09:39:10,da-woods,"[3.0.x] Fix c++ complex double_proj test (GH-6111)

I think the issue was partly that the function was defined twice
with slightly different tests and that this was behaving differently
on Py2.7, but not completely sure.

Either way, it's testing the standard library rather than our
code, so we probably don't have to make it too detailed beyond
that it compiles.",['tests/run/complex_numbers_cpp.pyx']
5af9bd82e2e2f14b11000f8eec76692edb69c27b,2024-03-27 09:33:39,Matti Picus,"CI: Pin Numpy<2 in test dependencies. (GH-6110)

Once NumPy releases 2.0.0rc1, these pins should be reverted.
Backport of https://github.com/cython/cython/commit/a799b1b8c6d584f1a8df1853abdad047b69d3aca","['test-requirements-312.txt', 'test-requirements.txt']"
07553a5b7966cf446ddd68e6e06a0bf3eb38517c,2024-03-25 15:38:40,Stefan Behnel,"Fix ""minimal"" compilation: Parsing.py needs ""Scanner.position()"" to be available as Python method when it's not compiled itself.",['Cython/Plex/Scanners.pxd']
39bdd1a2b50a0c58d55fbe2f639193f7084faef5,2024-03-24 10:01:41,scoder,"Cleanup: Use annotations instead of type overrides in pxd files (GH-5907)

* Use inline annotations instead of @cython.locals() decorators for compiled Cython source modules.

* While at it, replace the ""dict as set"" usages in the Plex state transition implementation with real Python sets.

* Move most of Parsing.pxd into Python annotations in Parsing.py.","['Cython/Build/Dependencies.py', 'Cython/Compiler/Code.pxd', 'Cython/Compiler/Code.py', 'Cython/Compiler/FlowControl.pxd', 'Cython/Compiler/FlowControl.py', 'Cython/Compiler/ParseTreeTransforms.pxd', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/Scanning.pxd', 'Cython/Compiler/Scanning.py', 'Cython/Compiler/Tests/TestScanning.py', 'Cython/Compiler/Visitor.py', 'Cython/Plex/DFA.pxd', 'Cython/Plex/DFA.py', 'Cython/Plex/Machines.pxd', 'Cython/Plex/Machines.py', 'Cython/Plex/Scanners.pxd', 'Cython/Plex/Scanners.py', 'Cython/Plex/Transitions.pxd', 'Cython/Plex/Transitions.py', 'Cython/Shadow.py', 'Cython/StringIOTree.pxd', 'Cython/StringIOTree.py']"
3113c7fea15bb38c63dbaa1e58a3c757f5cedf79,2024-03-24 06:53:43,Stefan Behnel,Exclude some internal names from the compiled Cython.Utils module.,['Cython/Utils.py']
67dff0a328dd38da19288ee9320a4b84d56963f1,2024-03-24 06:49:16,Stefan Behnel,"Fix coverage tests by re-adding the 'cached_function.uncached' attribute to access the original, uncached function.",['Cython/Utils.py']
3e7d2a6158a01ccb195d4a55070406a2b6465b86,2024-03-23 17:47:38,Patrick Kunzmann,Fix broken rendering of PEP link (#6109),['docs/src/userguide/source_files_and_compilation.rst']
088165e2ad3828946d4968121ab6b9317c86e144,2024-03-23 13:40:30,Stefan Behnel,Use functools.cache/lru_cache instead of our own cached function implementation.,['Cython/Utils.py']
753b9a198865d1ea11bd73ab33529f1d18bcd19e,2024-03-23 13:34:49,Stefan Behnel,Update changelog.,['CHANGES.rst']
6f8433a560e3241d7f215f6e249e064fc1af0366,2024-03-23 11:24:49,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
dad0042a57f3043bbb6877d28eb193b343017958,2024-03-23 11:18:33,Stefan Behnel,Update changelog.,['CHANGES.rst']
0b36e875fc60a3fd35585174b5a8230d2adf5613,2024-03-23 09:54:05,Stefan Behnel,Revert a part of fef5ebc27f35717dc33d7a2a5490bbd5229d7f8b in 3.0.x since we still need Py2.7 compatibility.,['Cython/Compiler/Code.py']
e79a3778ec97ff1c45aa33d3a58b75cf5b0e7626,2024-03-23 10:07:24,Denis Lukianov,"Reserve vector memory upfront (#6077)

Calling push_back in a loop caused it to perform repeated unnecessary memory allocations.

In this change, the necessary memory is reserved once ahead of the loop. This has a significant performance improvement for large data sets.

For objects which do not have a length, the old behaviour is preserved.","['Cython/Utility/CppConvert.pyx', 'tests/run/cpp_stl_conversion.pyx']"
b82be45723580a5a90868d0bf4cb3dfc32ee6951,2024-03-23 10:03:23,da-woods,Merge branch '3.0.x',[]
124e5a62fb2bc4f0335aafa1d9aa19b4cfb9479f,2023-12-04 11:28:11,Stefan Behnel,"Add missing Cython macro guard definitions to the NOGIL-CPython platform section.
The default values should be reasonable based on what was there and what CPython uses, but were not validated.",['Cython/Utility/ModuleSetupCode.c']
4f3c1ba98afeeb4302385e1f8d80a93f39c8d854,2024-03-23 09:54:16,Matti Picus,more fixes for tests for NumPy2 (#6100),"['tests/run/numpy_pythran.pyx', 'tests/run/numpy_pythran_unit.pyx', 'tests/run/numpy_test.pyx']"
2cc9aea964abd76a0f3e1a6b1ee656e02a752d7c,2024-03-23 09:54:16,Matti Picus,more fixes for tests for NumPy2 (#6100),"['tests/run/numpy_pythran.pyx', 'tests/run/numpy_pythran_unit.pyx', 'tests/run/numpy_test.pyx']"
3d41922a23793fef61eba6b51b779d24bac9a1f1,2024-03-23 09:48:52,samaingw,"Improve method inheritance in cppclass (#3235)

* Rewire calls to constructor and destructor in cppclass

* Give c++ methods entry the cfunction flag

* Fix c++ scope inheritance of func_cname

* Rework the symtab logic for C++ methods in Scope.declare

* Correct CppClassScope to allow method overloading with different signature

* Fix AttributeNode.analyse_as_type_attribute overloaded alternatives

* Allow c++ classes to have multiple constructors

* Amend error test cpp_no_constructor to reflect new logic in symtab for c++

* Fix test case cpp_classes_def: add expected warning

* Test case for cppclass method overloading

* Exclude cmethod entries from the overloadable functions

* Fix is_cfunction flag for inherited entries in cpp classes

* Guard is_cfunction flag setting in CppClassScope.declare_var

* cdef-extern-Docstring-ify the small Base class defined in C++ in cpp method overloading unit test

* When overloading an inherited method, override the entry inplace

* Update warning line for RegularPolygon.area method

* Fix comment wording.

Co-authored-by: da-woods <dw-git@d-woods.co.uk>

* Remove commented code

* Get rid of the void for default constructors of cppclass.

When generating the C++ code of a given cppclass, default constructor
can be generated. In these cases, it will be generated with and
explicit void argument. This commit gets rid of that void argument,
to look like what's generaly done by human.

* Move generate_cpp_constructor_code to class level.

generate_cpp_constructor_code is a helper function used in cppclass code generation.
Before this it captured some of its variables, and was nested inside the cppclass
code generation function. Now its separated, a proper method of ModuleNode,
being a function and not a closure.

* Comment the cppclass function alternatives overriding.

* Fix comment typo: c++ -> C++

* Commenting what's done when overriding a C++ method

* Update comment in Scope.declare() to match the code

The updated comment refers to what was `if type == alt_entry.type`
which is now `if type.compatible_signature_with(alt_entry.type)`.

* Fix transition from function to method of generate_cpp_constructor_code.

This is a fix about self argument and self.<function> call
instead of just <function>.

* Try to be clearer when overriding a method with a compatible signature.

* Clean C++ method overloading tests

* Harmonize numeric types for C++ method overloading tests

* Fix C++ method overloading test when inheriting from an external class.

When overloading an inherited method, two cases arise: we either
inherit it from a class defined inside a cython code, or we inherit it
from a class wrapped in cython code but defined somewhere else
(an external C++ class).
In the latter case, the default exception behaviour is noexcept.
However, when overloading a c++ method in cython code, the default
exception behaviour is except?, which results in incompatible
signature types. This commit fixes that for the unit test
cpp_method_overloading.pyx by overloading inherited methods
from external classes by explicitely setting the exception behaviour
of the new methods to noexcept.

* Fix typo in cpp_method_overloading.pyx comments

* Move logic for cppclass redeclarations outside declare

It's quite complex, and is complicating the base Scope declare
method. Instead put it in an overrideable method, so most of
the logic can be implemented by CppClassScope

* Other review suggestions

* Account of overriding C++ global names

Co-authored-by: gsamain <gwenael.samain@nexedi.com>","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Symtab.py', 'tests/errors/cpp_no_constructor.pyx', 'tests/run/cpp_classes_def.pyx', 'tests/run/cpp_method_overloading.pyx']"
a7b111f8e950c2a6798a9767334e30797989e823,2024-03-22 18:42:23,da-woods,Merge branch '3.0.x',[]
d42e8776e50a2cf63ecaad8ee86eb5417cf2d7e2,2024-03-22 18:40:31,da-woods,"Disable all freelist code outside CPython and add a new guard ""CYTHON_USE_FREELISTS"" for it (GH-5885)i (#6102)

Partial cherry-pick of https://github.com/cython/cython/pull/5885
(I've omitted the docs changes)","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ModuleSetupCode.c']"
3fd35225e0af6c606fd04a66b2f6dd19e565b6cb,2024-03-22 17:15:40,da-woods,"3.0.x fix legacy_implicit_noexcept tests (#6105)

By keeping the ""print_stderr"" changes, but not using
contextlib",['tests/run/legacy_implicit_noexcept.pyx']
e4b1e5ea653962dcf56327e075c0cc1befe16504,2024-03-18 18:15:13,Matti Picus,"make tests run on numpy1.x and numpy2.x (#6076)

* make tests run on numpy1.x and numpy2.x

* more casting to fix NumPy1/NumPy2 compatibility

* On NumPy2, int_t is now int64_t

* remove test for np.int_","['tests/memoryview/contig_check.pyx', 'tests/memoryview/memoryview_annotation_typing.py', 'tests/memoryview/numpy_memoryview.pyx', 'tests/memoryview/numpy_memoryview_readonly.pyx', 'tests/memoryview/relaxed_strides.pyx', 'tests/run/numpy_parallel.pyx', 'tests/run/numpy_test.pyx', 'tests/run/ufunc.pyx']"
55591769fc29b24273ad78777a53713afb378cba,2024-03-21 19:59:28,da-woods,"Change a ""char *"" to ""const char*"" in import code (#6101)","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ImportExport.c']"
4e9f7307312881111b6f56279a83812a2309cd16,2024-03-21 17:25:04,Gonzalo Tornaría,"Fix warnings for ""implicit noexcept"" when using `legacy_implicit_noexcept=True` (#6087)","['Cython/Compiler/Nodes.py', 'Cython/Compiler/Parsing.py', 'Cython/Includes/cpython/array.pxd', 'Cython/Includes/cpython/complex.pxd', 'Cython/Includes/cpython/datetime.pxd', 'Cython/Includes/cpython/time.pxd', 'tests/run/legacy_implicit_noexcept.pyx']"
ad4bf02d10d48f1284fb8fc93231f1e9acf8d33f,2024-03-21 17:25:04,Gonzalo Tornaría,"Fix warnings for ""implicit noexcept"" when using `legacy_implicit_noexcept=True` (#6087)","['Cython/Compiler/Nodes.py', 'Cython/Compiler/Parsing.py', 'Cython/Includes/cpython/array.pxd', 'Cython/Includes/cpython/complex.pxd', 'Cython/Includes/cpython/datetime.pxd', 'Cython/Includes/cpython/time.pxd', 'tests/run/legacy_implicit_noexcept.pyx']"
c73eb9ee0998c14ee8fede4fca34d9da26ff58c4,2024-03-21 07:03:46,Raffi Enficiaud,"C++ complex class fixes and tests (#6040)

* C++ complex class fixes and tests

* removing overload operator+ that seems to create a compilation issue
* adding unary operators + and -
* fixing typo (polar)
* adding unit tests

* Doc example on C++ complex","['Cython/Includes/libcpp/complex.pxd', 'docs/examples/userguide/wrapping_CPlusPlus/python_to_cpp.pyx', 'docs/src/userguide/troubleshooting.rst', 'docs/src/userguide/wrapping_CPlusPlus.rst', 'tests/run/complex_numbers_cpp.pyx']"
c09e6e4a800d7bb781bdc821bff49a4c8f446d02,2024-03-21 07:03:46,Raffi Enficiaud,"C++ complex class fixes and tests (#6040)

* C++ complex class fixes and tests

* removing overload operator+ that seems to create a compilation issue
* adding unary operators + and -
* fixing typo (polar)
* adding unit tests

* Doc example on C++ complex","['Cython/Includes/libcpp/complex.pxd', 'docs/examples/userguide/wrapping_CPlusPlus/python_to_cpp.pyx', 'docs/src/userguide/troubleshooting.rst', 'docs/src/userguide/wrapping_CPlusPlus.rst', 'tests/run/complex_numbers_cpp.pyx']"
61b5f3c59872d7fe4021c403a9fc8b443667345d,2024-03-20 17:15:03,Matus Valo,"Move Cython cache to separate module (#6090)


Co-authored-by: da-woods <dw-git@d-woods.co.uk>","['Cython/Build/Cache.py', 'Cython/Build/Cythonize.py', 'Cython/Build/Dependencies.py', 'Cython/Build/Inline.py', 'Cython/Compiler/Options.py', 'Cython/Utils.py']"
4e0eee43210d6b7822859f3001202910888644af,2024-03-18 18:15:13,Matti Picus,"make tests run on numpy1.x and numpy2.x (#6076)

* make tests run on numpy1.x and numpy2.x

* more casting to fix NumPy1/NumPy2 compatibility

* On NumPy2, int_t is now int64_t

* remove test for np.int_","['tests/memoryview/contig_check.pyx', 'tests/memoryview/memoryview_annotation_typing.py', 'tests/memoryview/numpy_memoryview.pyx', 'tests/memoryview/numpy_memoryview_readonly.pyx', 'tests/memoryview/relaxed_strides.pyx', 'tests/run/numpy_parallel.pyx', 'tests/run/numpy_test.pyx', 'tests/run/ufunc.pyx']"
7484c01022c33af0754d991e24af1fdf0487ecb0,2024-03-16 10:42:47,da-woods,"[docs] Avoid warnings for orphan, underline too short

Co-authored-by stefanos82 <sofr.stef@cytanet.com.cy>","['docs/src/reference/interfacing_with_other_code.rst', 'docs/src/reference/limitations.rst', 'docs/src/reference/special_mention.rst', 'docs/src/tutorial/embedding.rst']"
a065a28f7c5fcadc488d6fc4ee7e8e6b41aed988,2024-03-15 18:01:27,Stefan Behnel,Avoid a literal 1/0 in tests since MSVC rejects it.,['tests/run/test_exceptions.pyx']
c076532efbf8cf1b71c385c7ecbd8b6b0d98f7c0,2024-03-15 14:46:07,Stefan Behnel,Update test_exceptions.py from CPython 3.13a5.,['tests/run/test_exceptions.pyx']
034fcfffe7e0cb9aaef0aaf62566a7a5fd928677,2024-03-15 12:59:50,Stefan Behnel,Add new builtins from Python 3.13a5.,['Cython/Compiler/Code.py']
a799b1b8c6d584f1a8df1853abdad047b69d3aca,2024-03-13 10:57:25,Stefan Behnel,CI: Pin Numpy<2 in test dependencies.,"['test-requirements-312.txt', 'test-requirements.txt']"
f3cad15100da00936b3ac31865c28d22eb95c108,2024-03-09 21:35:20,Stefan Behnel,Merge branch '3.0.x',[]
34a68a88fd172b0b33da2b037c6376d2199866b3,2024-03-09 20:47:36,da-woods,"Make UtilityCode.__eq__ account for ""init"" section (GH-6065)

The relevant utility code to set up ufuncs wasn't being included because it compared equal to a different section of utility code that also only contained an ""init"" section

Fixes https://github.com/cython/cython/issues/6064","['Cython/Compiler/Code.py', 'Cython/Compiler/Tests/TestUtilityLoad.py']"
096b98e59cbaca831fa7281e41463c14f9951acb,2024-03-09 20:47:36,da-woods,"Make UtilityCode.__eq__ account for ""init"" section (GH-6065)

The relevant utility code to set up ufuncs wasn't being included because it compared equal to a different section of utility code that also only contained an ""init"" section

Fixes https://github.com/cython/cython/issues/6064","['Cython/Compiler/Code.py', 'Cython/Compiler/Tests/TestUtilityLoad.py']"
bf51c2195af55c2fed72a6a0cd48d60a001cae9f,2024-03-09 14:12:05,Stefan Behnel,Update changelog.,['CHANGES.rst']
70c4e8afb0105b56266a3eced5fb5b8d4e642ef8,2024-03-09 09:37:38,da-woods,"Clean up the different cline traceback options and make them interact more clearly (GH-6036)

* Make the `CYTHON_CLINE_IN_TRACEBACK` macro control the entire feature (on/off), disabling any code overhead when it's unused or disabled.

* Add a new `CYTHON_CLINE_IN_TRACEBACK_RUNTIME` option to control the runtime configuration.

* Let the legacy `c_line_in_traceback` option control the default runtime behaviour, but only when it's used.

* Document the macros clearly.","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Options.py', 'Cython/Distutils/build_ext.py', 'Cython/Utility/Exceptions.c', 'docs/src/userguide/source_files_and_compilation.rst', 'runtests.py', 'tests/run/cline_in_traceback.srctree']"
4bc10b9f41c29cfc8c093b6d7c2505894c6e40ca,2024-03-08 09:14:49,Stefan Behnel,"Move list of builtins from Symtab.py into Code.py, next to the list of version specific builtins.

See https://github.com/cython/cython/pull/6043/","['Cython/Compiler/Code.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/Tests/TestBuiltin.py']"
da405c6c58fd0b35f723c8efea4b76997cf76716,2024-03-08 09:09:18,Alexandra Pereira,"Use a constant set to recognise builtins rather than a Python version specific one (GH-6043)

- Create a set with all attributes available in the most recent python (3.12.2) builtins.
- Use this cache in Symtab.py in `declare_builtin` functions to recognise builtins.

Before, using the Python version specific `builtins` import let Cython generate different code from different Python runtime versions. The Cython output should not depend on the runtime used to execute Cython.","['Cython/Compiler/Symtab.py', 'Cython/Compiler/Tests/TestBuiltin.py']"
6aeecdec5a0aa851e941eb7e0186c9613faaeb12,2024-03-07 18:15:52,da-woods,"Avoid using strings for exception_value of func_type (#5710)

The main advantage is that we don't end up hugely sensitive to
the exact string representation of a particular number.

Fixes #5709","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/run/exceptionpropagation.pyx', 'tests/run/pure_py.py']"
12241b84055b1226223577a7f32a8a2c0bff47ee,2024-03-07 15:06:47,da-woods,"Avoid unpacking method calls at top-level class scope (GH-6054)

More marginal size reductions.

See https://github.com/cython/cython/issues/4425",['Cython/Compiler/Optimize.py']
4bff45f3b433f3c30d15d1842328ea06885133b6,2024-03-07 14:18:07,Stefan Behnel,Remove useless and irritating C block indentation.,['Cython/Utility/ImportExport.c']
198cca50a10c895a946509509bbd4250fe47568f,2024-03-07 10:02:20,Stefan Behnel,Silence a clang compiler warning about unreachable code.,['Cython/Utility/ImportExport.c']
ea09dab36c37171d7343650c5ed66ea0a49bd4fd,2024-03-07 10:00:06,Stefan Behnel,Silence a clang compiler warning about unreachable code.,['Cython/Utility/ModuleSetupCode.c']
6f238e1f5c159206e2907d2769b40008a4058b4b,2024-03-06 13:50:35,Stefan Behnel,Use more f-strings.,['Cython/Compiler/ModuleNode.py']
54d5d036d3ee71de4bb29005b02eaa9a42083461,2024-03-06 11:31:02,Stefan Behnel,Remove a Py2/3 legacy mapping and replace it with a simpler renaming map.,"['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Symtab.py']"
cac369fe54e70afb6de0dc3bf708c465a73d4f87,2024-03-06 09:45:27,Stefan Behnel,Merge branch '3.0.x',['Cython/Compiler/Code.py']
fef5ebc27f35717dc33d7a2a5490bbd5229d7f8b,2024-03-06 09:45:07,Stefan Behnel,Update list of uncachable builtins to Py3.13a4 (because they are not static but Python version specific).,['Cython/Compiler/Code.py']
f5763fa1d69cc550c2e416a387cc84f9c8766beb,2024-03-06 08:03:55,scoder,"Reduce the overhead of creating the function code objects at module init time (GH-6055)

* Use a mix of struct config and PyCode_New() calls to build code objects.
* Minimise the setup code per code object and move expensive operations into a helper function.
* Generate variable name tuples when creating CodeObjects, not independently as module state constants.","['Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Utility/ModuleSetupCode.c']"
76cf967a41f17c4e2ca686fe95dc8958a7c3e817,2024-03-05 19:39:10,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
31d4058ab2bd3c6a6fa25197ef4fc6ac62a2d95b,2024-03-05 10:10:55,Stefan Behnel,Update release date.,['CHANGES.rst']
9d9189b394f13bb202b51bb9d3adcbb39a13540f,2024-03-05 10:06:22,Stefan Behnel,Build: Update cibuildwheel version.,['.github/workflows/wheels.yml']
fad47c0d3f67802a93edf53bd157e1e692e61108,2024-03-04 17:43:53,da-woods,"Avoid ""unused argument"" warning on Py3.7 (#6057)",['Cython/Utility/ObjectHandling.c']
3cb9358d0a2dddbb2810f9a3ea50141c7202cfb1,2024-03-03 19:54:14,Stefan Behnel,Update changelog.,['CHANGES.rst']
5689c9f2aa5c9d0986cc263dca3b9cc81876e9b1,2024-03-03 19:44:06,scoder,"Disable gcc warnings/errors about wrong self casts in final function calls (GH-6039)

See https://github.com/cython/cython/issues/2747",['Cython/Compiler/ExprNodes.py']
8f9dd4e0ffe411eda5eae815a195db8b98f355a1,2024-03-03 19:44:06,scoder,"Disable gcc warnings/errors about wrong self casts in final function calls (GH-6039)

See https://github.com/cython/cython/issues/2747",['Cython/Compiler/ExprNodes.py']
05fd757b1161052291785f80863435a38f8d8674,2024-03-03 15:29:20,da-woods,"Cleanup of SetItemInTypeDict (#6031)

The main change being that PyType_Modified is considered part
of the operation so is moved into utility code instead of being
something that we have to remember to call.","['Cython/Compiler/ExprNodes.py', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/ModuleSetupCode.c']"
537357d0fbf62a846cbec2ec4dce48c09422d7fe,2024-03-03 11:28:43,da-woods,"Typo ""classs""",['docs/src/userguide/faq.rst']
3001dc761c93ed071dc17e57c92a553501563b0b,2024-03-03 08:19:27,da-woods,"Declare tuple/slice/other constants in arrays (#6048)

As opposed to declaring them individually.

Unlikely to make a huge different in compiled size (except to
module-state builds, where it simplifies the cleanup).
However, does mean that things like tuples can be indexed,
which may help with optimizing codeobjecttab","['Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py']"
ac3e29771e99e556d054eb6b2a1cc0809878ef24,2024-03-02 13:06:34,Stefan Behnel,Reword some FAQ entries.,['docs/src/userguide/faq.rst']
4326f1ca560be6579493006d93f3778ddbd5ce1b,2024-03-02 13:02:12,Stefan Behnel,Minor code simplifications.,['Cython/Compiler/Code.py']
4d90a5de9ba606c0ebc6aa1baca8e2d9003b3247,2024-03-02 08:07:55,Matus Valo,Add note about docstring to 'How do I reduce the size of the binary modules' faq (#6050),['docs/src/userguide/faq.rst']
384e97ffed5eb535a877bc5f1b02cc2292b7d35e,2024-03-01 18:13:10,da-woods,"Mention `binding` in the size faq (#6047)

Follow up to 408afdc106d9a332a4152d7a12531955de2d104e",['docs/src/userguide/faq.rst']
408afdc106d9a332a4152d7a12531955de2d104e,2024-02-29 11:01:30,Stefan Behnel,docs: Update FAQ about large module sizes.,['docs/src/userguide/faq.rst']
51d1ad0b7a7b3d6339fd0de1af44c8d0a99a4ede,2024-02-28 21:03:12,Matus Valo,"Add fixing of warning in 3.0.9 to CHANGES.rst (#6041)

Changlog for https://github.com/cython/cython/commit/ead1ac69413e13d57a23a5a336a6896850a5c172",['CHANGES.rst']
fcd37a9e18d50e7228166c58488110d45d75505b,2024-02-28 21:03:12,Matus Valo,"Add fixing of warning in 3.0.9 to CHANGES.rst (#6041)

Changlog for https://github.com/cython/cython/commit/ead1ac69413e13d57a23a5a336a6896850a5c172",['CHANGES.rst']
19474bdb54499b4919b965c6f14ec23f0de37ec5,2024-02-28 11:23:33,Stefan Behnel,Rename a helper function to make it easier to grep.,"['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py']"
06613d929ce10f413813675eb15057e6df116aec,2024-02-28 11:22:54,Stefan Behnel,Minor code cleanup.,['Cython/Compiler/ExprNodes.py']
ec2a67d1475bb413092c0255721176d47ec29c80,2024-02-28 09:31:44,Stefan Behnel,Update changelog.,['CHANGES.rst']
2da931d2e89887e7616379c35e81ba8335e570c5,2024-02-28 09:03:58,Stefan Behnel,"Disable GCC warnings/errors about wrong self casts in final function calls.

See https://github.com/cython/cython/issues/2747",['Cython/Compiler/ExprNodes.py']
6c1eaba02cccea319a5a38582e3a5599be3b66c2,2024-02-28 08:39:16,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
ba479419199e384ed72f538d3e77b0273e061bc6,2024-02-28 08:37:42,Stefan Behnel,Prepare release of 3.0.9.,"['CHANGES.rst', 'Cython/Shadow.py']"
bc683a46b6c2da14b410308d054d1e13b4e5b1e9,2024-02-28 08:32:19,Kieran,Add missing `replace` functions to C++ `std::string` declarations (GH-6037),"['Cython/Includes/libcpp/string.pxd', 'tests/run/cpp_stl_string.pyx']"
84a9f13a47629c89eb3a67b6f7fbc501aa7109c3,2024-02-28 08:32:19,Kieran,Add missing `replace` functions to C++ `std::string` declarations (GH-6037),"['Cython/Includes/libcpp/string.pxd', 'tests/run/cpp_stl_string.pyx']"
03d982be010b7b94a3c3317c462b2b803ce916af,2024-02-27 20:25:34,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
a0a5e8dff5382512a520e68a49d770ad46bf9616,2024-02-27 20:24:47,Stefan Behnel,Update changelog.,['CHANGES.rst']
351b292d8bb3a5b60f600b3f43ad23ad26ca41d4,2024-02-27 20:14:21,Jason Fried,"Don't miss a required PyObject_GC_Track() in dealloc (GH-5972)

Closes https://github.com/cython/cython/issues/5971
See https://github.com/cython/cython/pull/5432","['Cython/Compiler/ModuleNode.py', 'tests/run/exttype_gc.pyx']"
0bed3ee77179ea9dd365d7f40907bc278cc4a4a9,2024-02-27 20:14:21,Jason Fried,"Don't miss a required PyObject_GC_Track() in dealloc (GH-5972)

Closes https://github.com/cython/cython/issues/5971
See https://github.com/cython/cython/pull/5432","['Cython/Compiler/ModuleNode.py', 'tests/run/exttype_gc.pyx']"
fcdbd298b1ff74722359cc9f0482e9da1bb9f2a8,2024-02-27 12:23:50,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
2900c36e6ceda890df5318fe841a17ba76032391,2024-02-27 12:18:57,Stefan Behnel,Update changelog.,['CHANGES.rst']
f2954a065f31463ff01cf93cdb3c3ff0722642e4,2024-02-27 12:14:03,eewanco,"Tolerate literal globs (GH-5942 backport to 3.0.x) (GH-5961)

Closes https://github.com/cython/cython/issues/5942","['Cython/Utils.py', 'tests/run/sys_path_globbed.srctree']"
26deae9071dd3c332b2b67be94258691fe7d13fe,2024-02-27 11:23:15,Stefan Behnel,Update master changelog.,['CHANGES.rst']
904741890210d681102780dbd9f41bdf1ae561d2,2024-02-27 06:50:25,da-woods,"Initialize code objects with loop over table (#6028)

Hopefully helps with https://github.com/cython/cython/issues/4425.

It reduces binary object size by ~0.5% (module-dependent of course).

Code objects can be initialized after all other Python constants
because no other literals can depend on them. Unfortunately I
wasn't able to use a module-level constant global table for them
because I was fighting with the module name defines.
That's an improvement for the future when we've got further with
module-state.","['Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Naming.py', 'Cython/Utility/ModuleSetupCode.c']"
6526ecf4acfa829c1ec50a5d11db4cef18386e60,2024-02-27 06:48:26,da-woods,"Add __Pyx_PyList_pack function (#6030)

Analagous to ""PyTuple_Pack"" designed to be used in ""slow"" (i.e.
module-level) code. The main thing this catches are lists used in
""from something import name"".

Also use `PyTuple_Pack` more thoroughly in module-level code.
The slow attribute of SequenceNode was never being set. This
probably affects tuples used in class construction like the bases
tuple, which isn't a literal.","['Cython/Compiler/ExprNodes.py', 'Cython/Utility/ObjectHandling.c']"
a71a3b6e13f01f83a6fda4e2862824c96c195c13,2024-02-26 10:29:33,Stefan Behnel,Disable pstats tests also in 3.13 as long as they wait for a new C-API in CPython.,['runtests.py']
ead1ac69413e13d57a23a5a336a6896850a5c172,2024-02-25 12:48:05,da-woods,"Fix (most) unused variable warnings about clineno (#6035)

It's still unused even if we don't set it, so take it out of the
bit that sets it conditionally.",['Cython/Compiler/ModuleNode.py']
63cbf939794c206b017c59643feaa2255c11b12d,2024-02-25 12:48:05,da-woods,"Fix (most) unused variable warnings about clineno (#6035)

It's still unused even if we don't set it, so take it out of the
bit that sets it conditionally.",['Cython/Compiler/ModuleNode.py']
f5f83fbf803d1b3ba88f71d12bb48306815efd3c,2024-02-25 11:20:36,Stefan Behnel,"Use standard C int for bitsets, rather than non-standard char.",['Cython/Compiler/Code.py']
0d5af7b68d062b766cb59ee1b76ad342d004f8dc,2024-02-25 07:04:24,da-woods,"Tighten the constness on some string arrays (#6032)

This seems to take about 1.5% off the size of
compiled ""ParseTreeTransforms"".

Essentially the original version is ""an array of pointers to
unmodifiable strings"". The new version is
""an unmodifiable array pointers to unmodifiable strings"".
Presumably the advantage is that the compiler can know the
result at compile-time in a lot of cases.","['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Utility/StringTools.c']"
e6c621a91265d94a6c0dad9975e85b46c493706d,2024-02-24 10:43:53,Stefan Behnel,"Reduce the code size of the module state clear/visit functions by marking them as ""small code"".",['Cython/Compiler/ModuleNode.py']
79e7d0251d7e6eb1b7e067bdbd204dfa7e184abd,2024-02-23 10:52:26,Stefan Behnel,"Fix utility function guard for ""__Pyx_PyModule_GetState"".
It's not only used by the Limited API but whenever the module state is used.",['Cython/Utility/ModuleSetupCode.c']
368a750952f97042f3e8728f18c350f80413c84d,2024-02-23 09:09:25,Stefan Behnel,Shrink the data size of the strings table with better struct packing.,"['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Naming.py', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/StringTools.c']"
c5e250049a1a18cd32cd7b0ab80e8fa58310e672,2024-02-24 07:43:44,da-woods,Merge branch '3.0.x',['Cython/Compiler/Code.py']
8981868141fb119fb0a473392440d435ef5477b7,2024-02-24 07:41:42,da-woods,"Fix PyImport_AddModuleRef on the limited API (#6024)

Fixes #6020",['Cython/Utility/ModuleSetupCode.c']
3106fd6a83495f9081fc460d1f9d97f3cda341a9,2024-02-24 07:41:42,da-woods,"Fix PyImport_AddModuleRef on the limited API (#6024)

Fixes #6020",['Cython/Utility/ModuleSetupCode.c']
694b96c094d65f66a76f25330b277fdb644c9f65,2024-02-24 07:38:38,da-woods,Fix a typo in vectorcall code (#6016),['Cython/Utility/ObjectHandling.c']
04fb2d691d7025c0d7318118f4a8c38d0adad44b,2024-02-24 07:38:05,da-woods,"Move Py_UNICODE out of universal utility code (#6006) (#6025)

It's deprecated in 3.13, so the existence of a function is now
generated C warnings. Therefore move it to its own section to
be included on demand.

Remove a limited API implementation for it - it isn't in the
limited API so just shouldn't be usable there.

Fixes #5982","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c']"
3979d05b8d64f13099af610c97b0f75d4e93603e,2024-02-23 09:32:07,Stefan Behnel,Prevent braces in user strings from changing the C code indentation.,['Cython/Compiler/Code.py']
c72a61ed4a1f123fefbf6748995e72c896f7363c,2024-02-22 09:09:43,Stefan Behnel,Adapt cpython/time.pxd for Py3.13a4.,['Cython/Includes/cpython/time.pxd']
f39526df12fb33db6eed318e37deb8d5dfe2a3ba,2024-02-22 16:01:07,da-woods,"Refactor stringtab generation to reduce code size and compile time (GH-6018)

The stringtab can be a global constant rather than a function local variable that's largely initialized at runtime.

Storage of cached strings in the module state is converted to a big array of PyObjects, which means some code can be replaced with loops.

See https://github.com/cython/cython/issues/4425","['Cython/Compiler/Code.py', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/StringTools.c']"
53ff506512377e70602b617adcc69940d3f7b4b9,2024-02-20 18:32:27,da-woods,"Move Py_UNICODE out of universal utility code (#6006)

It's deprecated in 3.13, so the existence of a function is now
generated C warnings. Therefore move it to its own section to
be included on demand.

Remove a limited API implementation for it - it isn't in the
limited API so just shouldn't be usable there.

Fixes #5982","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c']"
308366979eea6b326756850e28ecfb844d363d16,2024-02-19 10:04:10,Stefan Behnel,Remove dead code from test.,['tests/run/sys_path_globbed.srctree']
d3b9d4ee0525f8a4dbb11f44a819c09353bab57a,2024-02-19 07:30:07,da-woods,Merge branch '3.0.x',[]
983e3f44f0f939265e413c42c452969892989599,2024-02-19 07:24:28,da-woods,"Fix typo in assertion (#6010)

Fixes #5980",['pyximport/pyximport.py']
9dba1b26b1855d982099c2f652e47f7f9279c85f,2024-02-19 07:24:28,da-woods,"Fix typo in assertion (3.0.x) (#6010)

Fixes #5980","['pyximport/_pyximport2.py', 'pyximport/_pyximport3.py']"
88c396d45730c16b05913ae6fb3b98bc88eeb5fb,2024-02-18 20:21:25,Stefan Behnel,Merge branch '3.0.x',[]
e8d42b1b7bf698615adfdefbcdaa17df660e721d,2024-02-16 11:11:16,Victor Stinner,"Use new PyCFunctionFastWithKeywords and PyCFunctionFast in Python 3.13a4 (GH-6003)

Python 3.13a4 adds a public PyCFunctionFastWithKeywords and
PyCFunctionFast types and removes the private
_PyCFunctionFastWithKeywords and _PyCFunctionFast types:

* https://github.com/python/cpython/commit/9e3729bbd77fb9dcaea6a06ac760160136d80b79
* https://github.com/python/cpython/pull/114627
* https://github.com/capi-workgroup/decisions/issues/11","['Cython/Utility/CythonFunction.c', 'Cython/Utility/ModuleSetupCode.c']"
b44db63f0b1e0c3b28b4bc78463d53ed6297c406,2024-02-18 20:13:10,Stefan Behnel,Merge branch '3.0.x' of git+ssh://github.com/cython/cython into 3.0.x,"['.github/workflows/ci.yml', '.github/workflows/wheels.yml', 'Cython/Build/Tests/TestCyCache.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Utility/CpdefEnums.pyx', 'doc-requirements.txt', 'pyximport/_pyximport2.py', 'pyximport/_pyximport3.py', 'tests/errors/cfuncptr.pyx', 'tests/errors/const_decl_errors.pyx', 'tests/errors/e_excvalfunctype.pyx', 'tests/errors/nogil_buffer_acquisition.pyx', 'tests/errors/w_noexcept.pyx', 'tests/run/builtin_memory_view.pyx', 'tests/run/cpdef_enums_import.srctree', 'tests/run/fused_cdef.pyx', 'tests/run/legacy_implicit_noexcept.pyx', 'tests/run/test_unicode.pyx']"
e286742f1a2392894c7dc1df754bbdddc8aa25fb,2024-02-18 11:09:37,eewanco,"Tolerate and escape globbing characters in sys.path (#5956)

If your build environment uses literal globbing characters, Cython 3.0
might fail, because `find_versioned_file` in `Utils.py` was slapping a
`*` in the path and expecting it to properly glob. This fails in
certain large build environments that use, for example, brackets in
system paths. Escape paths from sys.path and other sources before
looking for different versions of collateral files.

Closes GitHub issue [#5942](https://github.com/cython/cython/issues/5942)","['Cython/Utils.py', 'tests/run/sys_path_globbed.srctree']"
7ebbb295d4a22db9f7be5664363b27cc7ae312df,2024-02-18 10:59:17,Matus Valo,Warn when function returning python object is marked as noexcept (#5999) (#6007),"['Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.py', 'tests/errors/w_noexcept.pyx', 'tests/run/legacy_implicit_noexcept.pyx']"
584272bc35f0386ef8acfe412b9f78bf95130b78,2024-02-18 10:57:35,Matus Valo,"Fix call of final fused cdef functions (#6005) (#6008)

Co-authored-by: da-woods <dw-git@d-woods.co.uk>","['Cython/Compiler/PyrexTypes.py', 'tests/run/fused_cdef.pyx']"
a501021b6e4217895207e430cb558f49dcccd352,2024-02-17 18:57:25,da-woods,Fix call of final fused cdef functions (#6005),"['Cython/Compiler/PyrexTypes.py', 'tests/run/fused_cdef.pyx']"
1aec5fe8383a8cc512938f8f0038d6bd4cdae5ff,2024-02-17 18:37:11,Matus Valo,Warn when function returning python object is marked as noexcept (#5999),"['Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.py', 'tests/errors/w_noexcept.pyx', 'tests/run/legacy_implicit_noexcept.pyx']"
e9b08d3f071ebfad7f4886e43173cd0f72df6676,2024-02-16 11:11:16,Victor Stinner,"Use new PyCFunctionFastWithKeywords and PyCFunctionFast in Python 3.13a4 (GH-6003)

Python 3.13a4 adds a public PyCFunctionFastWithKeywords and
PyCFunctionFast types and removes the private
_PyCFunctionFastWithKeywords and _PyCFunctionFast types:

* https://github.com/python/cpython/commit/9e3729bbd77fb9dcaea6a06ac760160136d80b79
* https://github.com/python/cpython/pull/114627
* https://github.com/capi-workgroup/decisions/issues/11","['Cython/Utility/CythonFunction.c', 'Cython/Utility/ModuleSetupCode.c']"
a8b26e9a4b96f84258da43564c42eb0d2d1912a0,2024-02-15 17:36:13,Stefan Behnel,"Make sure we include utility code requirements in the generated ""module_api.h"" files.

Fixes https://github.com/cython/cython/pull/4698","['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py']"
5a787f3dd963ec6dace6dad9c9f65b1bc1991d8d,2024-02-15 16:59:03,Stefan Behnel,CI: Use latest PyPy 3.9/3.10 releases instead of outdated ones.,['.github/workflows/ci.yml']
691d77889bfb8eacb53f75c588c256a81f3271a0,2024-02-15 14:53:59,Stefan Behnel,Build: Upgrade cibuildwheels to fix a build problem on windows.,['.github/workflows/wheels.yml']
dff1e1822142ff551e1a1a6fb670f2e8d8d76778,2024-02-15 14:07:57,scoder,"Use literal exception values instead of strings where possible. (GH-5912)

We sometimes used literal numbers and sometimes strings, so this cleans it up.

Compare exception values both as values and their string representation to make sure we cover cases where one is a string representation and the other is a (numeric) value.","['Cython/Compiler/Builtin.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/PyrexTypes.py']"
12ac748fe70b1e8140ae5d3536223935da27155e,2024-02-14 20:08:53,da-woods,"Parse structural pattern matching (#4897)

Implements the parser for structural pattern matching, testing against the CPython test suite. Note that none of the actual implementation works yet.","['Cython/Compiler/MatchCaseNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.pxd', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py', 'Cython/TestUtils.py', 'Tools/ci-run.sh', 'tests/errors/e_patma_extra.pyx', 'tests/run/extra_patma.pyx', 'tests/run/test_patma.py']"
dd1b87a621e5139fd2cc48e67efbd2a754a202b5,2024-02-13 18:58:26,da-woods,"Handle platforms where sizeof(funcptr) != sizeof(void*) (#4698)

Fixes #4683

It's mostly a theoretical concern I think, but may apply to
some ""not too obscure"" platforms (ia64?).

For the majority of platforms it keeps working as before (copies
the function pointer into the void* of a capsule) although I've
used memcpy rather than a union to do this (because I don't
believe the union trick is 100% guaranteed to work in standard
c++, although practically it does of course).

For any where this doesn't apply it allocates memory instead and
the capsule points to that.

My interest in this is to use when pickling CyFunctions, but this
PR just uses the mechanism for cimporting cdef functions","['Cython/Utility/ImportExport.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/TypeConversion.c', 'tests/run/cimport.srctree']"
a8a2d41d7799b485b829bb95c36b4dacbeba5173,2024-02-13 08:53:11,scoder,"Reimplement ""Dependencies.strip_string_literals()"" (GH-5994)

Reimplement ""Dependencies.strip_string_literals()"" to handle unclosed string literals and recursive f-strings.

Closes https://github.com/cython/cython/issues/5977","['Cython/Build/Dependencies.py', 'Cython/Build/Tests/TestStripLiterals.py']"
a6ff27c9e24ce07837f2077b046f8099d9b362a8,2024-02-12 18:52:33,da-woods,"add tag for numpy in error test, update actions versions (#5985) (#5992)

* add tag for numpy in error test

* fix the test for the extra line

* upgrade github actions to versions using node20

* update ccache action, add python version to wheel upload name

Co-authored-by: Matti Picus <matti.picus@gmail.com>","['.github/workflows/ci.yml', '.github/workflows/wheels.yml', 'tests/errors/nogil_buffer_acquisition.pyx']"
0ca3e526eb7c1a8ec3a21d0226f6e87c48ebbdd3,2024-02-12 07:14:56,da-woods,"Force closing gzip file in TestCyCache (#5945) (#5993)

Backport of 2f1a9bafec62a63cabf1268e82cdca7b86395a32
and 2f314fb1b1fd0a93eca08d842a7616e5c804105d",['Cython/Build/Tests/TestCyCache.py']
5f388af43efc551f48e6589ee04a1cadecb7b51a,2024-02-12 07:14:03,da-woods,"Skip builtin memoryview test on Python 2 (3.0.x) (#5996)

There's differences in what it prints that are pretty unrelated
to the point of the test, so just skip the test.",['tests/run/builtin_memory_view.pyx']
7c2788875a6a4811b66936e8c295654ae7ba8616,2024-02-11 15:33:15,da-woods,Merge branch '3.0.x',['tests/run/builtin_memory_view.pyx']
8475f03af3e0e38917c7626f87c449cc024670ef,2024-02-11 15:32:40,da-woods,Restore sys import,['tests/run/builtin_memory_view.pyx']
4c87330a54c8f95b008c960f149f6728977057de,2024-02-11 10:38:06,Matti Picus,"add tag for numpy in error test, update actions versions (#5985)

* add tag for numpy in error test

* fix the test for the extra line

* upgrade github actions to versions using node20

* update ccache action, add python version to wheel upload name","['.github/workflows/ci.yml', '.github/workflows/wheels.yml', 'tests/errors/nogil_buffer_acquisition.pyx']"
51c0a0aed773137149673f6a57402d159c4ee5a4,2024-02-11 10:35:40,da-woods,"Explicitly set exception cause in __Pyx_Generator_Replace_StopIteration (#5963)

Fixes #5953","['Cython/Utility/Coroutine.c', 'tests/run/generators_pep479.pyx']"
a4c0c1a9fecce0797196da73788cb7dc5d2eaa7f,2024-02-11 10:32:01,da-woods,Merge branch '3.0.x',[]
29cf53e9e24ee273071ffdff6bc4649de96796fa,2024-02-11 10:30:15,Xenia Lu,"Fix memoryview type check calling non-existant function (#5988)

Exact check doesn't exist","['Cython/Compiler/PyrexTypes.py', 'tests/run/builtin_memory_view.pyx']"
80004cb6455861f1c1c67c10a9c32089f3b81f86,2024-02-11 10:30:15,Xenia Lu,"Fix memoryview type check calling non-existant function (#5988)

Exact check doesn't exist","['Cython/Compiler/PyrexTypes.py', 'tests/run/builtin_memory_view.pyx']"
924cd37c48608a63fc6b2ffe0acf7efa87d49159,2024-02-11 10:29:13,Matus Valo,Warn about discarting const qualifier (#5987) (#5991),"['Cython/Compiler/Nodes.py', 'tests/errors/const_decl_errors.pyx']"
24d97fa183f04aa9c93b879e8bcb4d5619d70b84,2024-02-11 07:10:05,Matus Valo,Warn about discarting const qualifier (#5987),"['Cython/Compiler/Nodes.py', 'tests/errors/const_decl_errors.pyx']"
a3942c82fe010d17622ceb69ed2b447d7b922cd5,2024-02-10 13:17:19,da-woods,"Modified ""pretend_to_initialize"" for c++ (#5920)

In this case we actually have to initialize rather than just
do nothing. Fixes #5278.

* Move code to utility code file","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ModuleSetupCode.c']"
b5bdf9cddd66ca26dbc64f7f7e013def4649c42e,2024-02-10 11:06:34,da-woods,"""failed to import"" warning once per cpdef enum (#5941)

This is just to make the warning a little less noisy. I think it's
worth printing it, but probably not on every conversion.

Also make the function a little more lightweight by not repeating
the import multiple times.",['Cython/Utility/CpdefEnums.pyx']
8d477dee85ee29d8455f9cc00d336bb4770da998,2024-02-10 11:06:34,da-woods,"""failed to import"" warning once per cpdef enum (#5941)

This is just to make the warning a little less noisy. I think it's
worth printing it, but probably not on every conversion.

Also make the function a little more lightweight by not repeating
the import multiple times.",['Cython/Utility/CpdefEnums.pyx']
0185350382c1d2f159b8507073a03179b76c7a7a,2024-02-10 11:02:14,da-woods,"Fix some more duplicate enum to_py utility code names (#5905)

* Fix some more duplicate enum to_py utility code names

It's possible to declare an extern enum multiple times, in a way
that makes the declaration name the same. Therefore, also prefix
declaration names with the module qualified name where possible.

* Use scope mangling","['Cython/Compiler/PyrexTypes.py', 'tests/run/cpdef_enums_import.srctree']"
9b37521279d283e7c5a010797b3c9ccdf3b6aaad,2024-02-10 11:02:14,da-woods,"Fix some more duplicate enum to_py utility code names (#5905)

* Fix some more duplicate enum to_py utility code names

It's possible to declare an extern enum multiple times, in a way
that makes the declaration name the same. Therefore, also prefix
declaration names with the module qualified name where possible.

* Use scope mangling","['Cython/Compiler/PyrexTypes.py', 'tests/run/cpdef_enums_import.srctree']"
55c24376c6173f255f8b063625b466e1c7c169e8,2024-02-08 06:33:15,da-woods,Merge branch '3.0.x',['tests/run/test_unicode.pyx']
537818171d5df4cd4acbcd7750e49411ba2aba8c,2024-02-08 06:30:28,da-woods,"""is_extern"" -> ""is_external"" (#5978)

`is_extern` doesn't look to be something we use, but it's been
mistyped a few places when we meant `is_external`.","['Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py']"
49ac6dc92a38e4dd7ccfa7475928e967fde1cdbd,2024-02-08 06:30:28,da-woods,"""is_extern"" -> ""is_external"" (#5978)

`is_extern` doesn't look to be something we use, but it's been
mistyped a few places when we meant `is_external`.","['Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py']"
51189096301d893ee8b591c34af7c80a544b0d73,2024-02-07 07:58:08,da-woods,"Disable unicode test_raiseMemError (#5968)

Fixes #5927.

I don't think this test is useful for reasons documented in the
comments, thus I propose to get rid of it rather than spend
time debugging it.",['tests/run/test_unicode.pyx']
707c665cf670936906b4378041db3ab6e72ed491,2024-02-03 17:11:09,da-woods,"Update doc requirements and pin them to recent versions (#5946) (#5975)

Cherry-pick of https://github.com/cython/cython/pull/5946
but omitting the rst fixup in CHANGES.rst since that
conflicts and is fairly unimportant.",['doc-requirements.txt']
c271bc7b1f86390447834c4063a6f618b5dca51e,2024-02-01 20:24:15,da-woods,Merge branch '3.0.x',[]
84273d60688468fd76df2381decdc4bac11e614d,2024-02-01 20:16:19,Stefano Rivera,"pyximport: Use relative paths less, and correctly (#5957)

* pyximport: Calculate the relative path correctly

It should be relative to the new current directory, not the old one.

* pyximport: Avoid chdir before build on non-Windows

Using a relative path means we lose path information in the built
module. This can be useful in packages such as stack_data that look up
source code.","['pyximport/_pyximport2.py', 'pyximport/_pyximport3.py']"
09863a74b754a415c802a9868a77ebea060a54a8,2024-02-01 20:16:19,Stefano Rivera,"pyximport: Use relative paths less, and correctly (#5957)

* pyximport: Calculate the relative path correctly

It should be relative to the new current directory, not the old one.

* pyximport: Avoid chdir before build on non-Windows

Using a relative path means we lose path information in the built
module. This can be useful in packages such as stack_data that look up
source code.",['pyximport/pyximport.py']
71d1dc3b681a231d7ab480449e044dde1e576147,2024-01-31 21:39:52,gentlegiantJGC,"Fix distutils sources syntax (#5966)

The example raised the following error while cythonising.
error: unknown file type '.c,'
It looks like the correct syntax is either without the comma or with brackets around.",['docs/src/userguide/source_files_and_compilation.rst']
a6cef7429ceffdad7121b3f625b1c4b653219d4f,2024-01-31 21:31:07,da-woods,"Drop main Numpy include (#5842)

* Drop Numpy includes

In https://github.com/cython/cython/issues/5820#issuecomment-1812491784
@mattip suggests that Cython providing slightly different Numpy
includes is a source of confusing error messages.

They've been in Numpy for a reasonable length of time now, so it's
probably time to drop Cython's copy. It'll hopefully avoid people
raising issues about Cython's copy too.

* Restore numpy math",['Cython/Includes/numpy/__init__.pxd']
dfac1b806273f8c84f7457cb86dd4f6f72906487,2024-01-31 09:19:40,Stefan Behnel,Fix a test for Py2 source semantics.,['tests/compile/builtinfuncs.pyx']
a69540be320db0ab096fd5ad1383050c8a1da08e,2024-01-31 09:07:46,Stefan Behnel,Add test from https://github.com/cython/cython/issues/4829,"['tests/run/cython3.pyx', 'tests/run/py_ucs4_type.pyx']"
10fb34e6b835b4d0a6fa11bf4c078c6d788a15c4,2024-01-31 09:06:12,Stefan Behnel,Refactor: Extract a common variable.,['Cython/Compiler/ExprNodes.py']
6fd204e1d8bb17123ac4cf4946049d34a6d3a2a2,2024-01-31 09:04:56,Stefan Behnel,"Improve some builtin return types to match Python 3.

Closes https://github.com/cython/cython/issues/4829","['Cython/Compiler/Builtin.py', 'Cython/Compiler/Optimize.py']"
a2b1028eaeb968fb63f6180d40be2b2798167058,2024-01-31 09:02:57,Stefan Behnel,gitignore: Exclude more coverage output files.,['.gitignore']
05bbd626af109cf8df719b83775078e694ac0d9c,2024-01-31 04:52:57,Stefan Behnel,Add some .gitignores.,['.gitignore']
30ca5f1ac40ae1b2bd219adc6673bab1382c8900,2024-01-17 09:24:22,Stefan Behnel,Minor code cleanup.,['Cython/Compiler/Nodes.py']
52b19ea2cc9ac35804263b9117dd03b065af490d,2024-01-13 10:33:47,Stefan Behnel,Remove dead code.,['Cython/Compiler/ModuleNode.py']
cff6012a2aa45dc9f4ac7ac403f121f51e68601e,2024-01-27 08:26:07,da-woods,"Improve message when exception values don't match (#5962)

I think the existing message is a little confusing. This hopefully
makes it clearer where to add `noexcept`.

Backport of 0b6cab31738870e60b4ae552dd1c4335529c71a0 and
15675a5e2ff2685b9aa1af7695fe306548361a92 (I'm including 1567a5
in this because I think it ends up too much of a mess if I backport
1 and not the other).","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/errors/cfuncptr.pyx', 'tests/errors/e_excvalfunctype.pyx']"
0b6cab31738870e60b4ae552dd1c4335529c71a0,2024-01-26 20:43:43,da-woods,"Improve message when exception values don't match (#5916)

I think the existing message is a little confusing. This hopefully
makes it clearer where to add `noexcept`.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/errors/cfuncptr.pyx', 'tests/errors/e_excvalfunctype.pyx']"
1de1dfa1ecf200550b0a12187e01df6252e195aa,2024-01-26 14:22:27,Kent Slaney,"cygdb: Test and fix debugger tab completion (GH-5948)

* handle_brkchars support
* correctly filter symbols when word is None and text is not (empirically)
* add cygdb breakpoint completer test
* comment summarizing GDB API calls

Relevant documentation:
https://sourceware.org/gdb/current/onlinedocs/gdb.html/Inferiors-Connections-and-Programs.html
https://sourceware.org/gdb/current/onlinedocs/gdb.html/Progspaces-In-Python.html#index-Progspace_002esymbol_005ffile","['Cython/Debugger/Cygdb.py', 'Cython/Debugger/Tests/test_libcython_in_gdb.py', 'Cython/Debugger/libcython.py']"
16d95e557e1b286e412a29d3a751834006a6a0ac,2024-01-26 13:46:27,Kent Slaney,cygdb: Add a missing line break after backtrace frame source (GH-5955),['Cython/Debugger/libcython.py']
0e1026cb7c767450a88ab822e8eda2b451dee3c6,2024-01-15 18:19:55,da-woods,"Update doc requirements and pin them to recent versions (#5946)

Also fix a few small issues in Changes.rst (the PEP link was a
""duplicate definition"" error - that target is already defined
elsewhere in the file).","['CHANGES.rst', 'doc-requirements.txt']"
2f314fb1b1fd0a93eca08d842a7616e5c804105d,2024-01-14 13:20:08,da-woods,"Don't use contextlib in TestCyCache

just use the gzipfile in the with statement directly.",['Cython/Build/Tests/TestCyCache.py']
1e5329211e471de837b6c6be2da0e1796c6a6a03,2024-01-14 13:02:08,da-woods,"Try disabling gc for line-trace tests (#5947)

This is something of a wild guess, to see if it fixes the tests
on Windows 3.12.",['tests/run/line_trace.pyx']
2f1a9bafec62a63cabf1268e82cdca7b86395a32,2024-01-14 12:28:07,da-woods,"Force closing gzip file in TestCyCache (#5945)

instead of relying on the destructor to do it.

I'm not sure if this'll fix it, but it's maybe worth a try.
If it works, fixes https://github.com/cython/cython/issues/5825",['Cython/Build/Tests/TestCyCache.py']
7b8ad1c65bf27dc558e19a9191f09eac7749f490,2024-01-14 09:34:42,da-woods,"Use vectorcall by default (#5804)

f(a, b) goes to vectorcall (as before)
f(a, b, **kwds) now goes to ""vectorcall_dict
f(a, b, c=c) now goes to vectorcall with kwnames","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/TypeConversion.c', 'tests/run/call_py_cy.pyx']"
f2d564a06b775bd1cedfc36f5fc8996865ad3675,2024-01-12 09:42:01,Stefan Behnel,Extend and clean up test.,['tests/run/cpdef_extern_func.pyx']
fe59ead44dd682d01cb01796afff512a5e76856e,2024-01-12 08:52:30,Stefan Behnel,"Build: Let cibuildwheel decide itself which wheels to build.

Closes https://github.com/cython/cython/issues/5904","['.github/workflows/wheels.yml', 'pyproject.toml']"
6f7a949303b2e067aad9f808a392754758d9967e,2024-01-11 19:01:07,da-woods,"Fix types in cpdef_extern_func (#5940)

I don't think the test is really interested in the exact type
of strchr, so instead wrap a function with a known function type.

Fixes #5939",['tests/run/cpdef_extern_func.pyx']
89e356e37c97b62263ea3d16bdff15127501a5d5,2024-01-10 08:18:59,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
a1b79a6bc5326406ad73af73f5b41e3bb5f8da6e,2024-01-10 08:12:41,Stefan Behnel,Prepare release of 3.0.8.,"['CHANGES.rst', 'Cython/Shadow.py']"
90114a0cc1b786db133c4c3ec9e4412c8c3197bb,2024-01-10 08:11:05,Stefan Behnel,Merge branch '3.0.x',[]
b9bfa7f0492f4f71af1f034822fd90dd4ed3638e,2024-01-09 10:27:20,da-woods,"Fix parsing of ptrdiff_t in PyrexTypes and add another ""all types in Shadow.py?"" test (GH-5938)","['Cython/Compiler/PyrexTypes.py', 'Cython/Shadow.py', 'Cython/Tests/TestShadow.py']"
eec604ba90e68df34bb4fc0ca3516630b97c1f0f,2024-01-09 21:41:21,Stefan Behnel,Update changelog.,['CHANGES.rst']
fab8acc85a2e80d423f61934c893c3e0fe8abb95,2024-01-09 21:28:19,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
f974ec15b643dfb6338c0aef90976424d5a6bd2c,2024-01-09 21:26:45,Stefan Behnel,Update changelog.,['CHANGES.rst']
4037b05860263860bd7ec9b06f38a827edcf68d9,2024-01-09 20:03:45,Stefan Behnel,Merge branch '3.0.x',"['Cython/Utility/Dataclasses.c', 'Cython/Utility/FunctionArguments.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/UFuncs_C.c']"
ffe6fa7fe47e6b5005c0aad7c6ae7144b3402f33,2024-01-09 19:59:03,Stefan Behnel,Avoid C99-isms.,"['Cython/Utility/Dataclasses.c', 'Cython/Utility/FunctionArguments.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/UFuncs_C.c']"
835a0c678a5b203b7d8dc244a551fd5f182b2845,2024-01-09 19:44:11,Stefan Behnel,Merge branch '3.0.x',"['Cython/Utility/CythonFunction.c', 'Cython/Utility/Exceptions.c', 'Cython/Utility/FunctionArguments.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/TypeConversion.c']"
356495be50773262b09e158115aba0afe167cb97,2024-01-09 19:39:23,Stefan Behnel,Avoid C99-ism.,['Cython/Utility/CythonFunction.c']
e39e52c90b3aa14abe012e313ffd4edb6897df61,2024-01-09 14:06:36,Stefan Behnel,"Fix parsing of ""longlong"" etc. after the last change, i.e. Python style type names without spaces.",['Cython/Compiler/PyrexTypes.py']
b85be7e838318d251fc3d3fbfdf1a1ecf5a515fd,2024-01-09 12:38:34,Stefan Behnel,Avoid C99-ism.,['Cython/Utility/Exceptions.c']
dd5e03ef872786f3fd6b660cb8e609e0d20f39ef,2024-01-09 12:36:21,Stefan Behnel,Extract a list of fixed-sign integer types and reuse them where possible.,['Cython/Compiler/PyrexTypes.py']
b893b5733df0f579b5a52a94664a26e3fb4f48e8,2024-01-09 10:36:35,Stefan Behnel,Clean up a few temporary variables in Shadow.py and add a warning when users access 'cython.gs'.,['Cython/Shadow.py']
914d7be4da613d95e55cce604a68a415960612e1,2024-01-09 10:27:20,da-woods,"Fix parsing of ptrdiff_t in PyrexTypes and add another ""all types in Shadow.py?"" test (GH-5938)","['Cython/Compiler/PyrexTypes.py', 'Cython/Shadow.py', 'Cython/Tests/TestShadow.py']"
30a6534a2279eddfd7a8b75de94897357eeaba2b,2024-01-09 09:24:08,Stefan Behnel,Fix some C99-isms in 3.0.x branch.,"['Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/TypeConversion.c']"
9866ce478fa76a07babff8a5d9d53a4030eaf9e7,2024-01-09 09:21:17,Stefan Behnel,Avoid C99-ism.,['Cython/Utility/FunctionArguments.c']
6990d6e24f89949c4cf32d143d8c20e516d93756,2024-01-09 09:19:46,Stefan Behnel,"Use Py3.6 instead of Py3.7/8/9 for the C89 build since CPython switched to C99 at some point (e.g. ""inline"").",['.github/workflows/ci.yml']
d3b92b0a4207ee070405d6f1ab8a75e95b53c56a,2024-01-09 09:10:10,Stefan Behnel,"Use Py3.7 instead of Py3.9 for the C89 build since CPython switched to C99 at some point (e.g. ""inline"").",['.github/workflows/ci.yml']
46a768e66724d2bf0dc6a64e9bce43dea6ffadc5,2024-01-09 08:58:55,Stefan Behnel,Fix some C99-isms in 3.0.x branch.,['Cython/Utility/FunctionArguments.c']
8aa863537b155c9162056f03d3f7d3f6dc1fa5b3,2024-01-08 20:21:30,Stefan Behnel,"Cleanups in master branch (which actually uses C99, not C89).",['.github/workflows/ci.yml']
4f8dbd851504eeca305058f51ec64b3059c317be,2024-01-08 20:16:51,Stefan Behnel,Merge branch '3.0.x',"['.github/workflows/ci.yml', 'Cython/Utility/ObjectHandling.c']"
f08dbc3013118b972c0d26b241f0f3bda1559379,2024-01-08 20:14:36,Stefan Behnel,Actually test the 3.0.x branch with C89 since it should continue to support Py2.7 and old MSVC versions that go with it.,['.github/workflows/ci.yml']
7d976cbe9cc8823b0ef2aaeb354647cc8664eb4e,2024-01-08 19:36:27,Stefan Behnel,Avoid C99-ism.,['Cython/Utility/ObjectHandling.c']
71baefae2479b82c6d2d364b8c551921a461f4f7,2024-01-08 19:36:27,Stefan Behnel,Avoid C99-ism.,['Cython/Utility/ObjectHandling.c']
390f3e1d12eee1f1320f5671aafe5b5109f8ba26,2024-01-08 08:58:22,Stefan Behnel,Merge branch '3.0.x',['Cython/Utility/ObjectHandling.c']
513ecb645df8dfd9675a1f0ac2956a129fd45b54,2024-01-08 08:57:18,Stefan Behnel,Avoid C99-ism in 3.0.x branch which still needs to support old Py2.7 MSVC builds.,['Cython/Utility/ObjectHandling.c']
eadd0bb30b3af7e4de5838f30ef18ef15357a101,2024-01-01 16:15:15,Stefan Behnel,Merge branch '3.0.x',"['Cython/Shadow.py', 'Cython/Tests/TestShadow.py']"
7bc98636c684863bb3c6da6cb946810ea4811ed8,2024-01-01 16:13:08,Stefan Behnel,"Add ""p_..."" pointer types of signed/unsigned integer types to Shadow.py.

Closes https://github.com/cython/cython/issues/5934","['Cython/Shadow.py', 'Cython/Tests/TestShadow.py']"
0be3f3139e3776e3c47fd6535d50bb81e02dbde8,2024-01-01 15:34:30,Stefan Behnel,Merge branch '3.0.x',['docs/src/tutorial/pure.rst']
a0b759aab3849eaa97b7a548a6912cd3f3ff4911,2024-01-01 15:34:07,Stefan Behnel,docs: Add a note that global variable annotations are ignored.,['docs/src/tutorial/pure.rst']
c22c4e2d14d8a69b90c5ea1298d3976ae3bdbec1,2023-12-31 18:48:33,da-woods,"Revert ""Fix error in auto-completion in Cygdb (#5924)""

This reverts commit 219c57eef3866daa96d2b7a2f9eb4bb1a8fb75db.",['Cython/Debugger/libcython.py']
30e5861accbf7af23393a646e09a4693b490f2f7,2023-12-30 19:04:11,da-woods,"Revert ""Add extra info on annotation inexact type (#5915)""

This reverts commit 04502f6afff6dca65ad0b0da857b21dcfa8a9b6a.","['Cython/Compiler/Nodes.py', 'Cython/Utility/FunctionArguments.c', 'docs/src/userguide/migrating_to_cy30.rst', 'tests/run/annotation_typing.pyx']"
219c57eef3866daa96d2b7a2f9eb4bb1a8fb75db,2023-12-30 17:21:02,Kent Slaney,Fix error in auto-completion in Cygdb (#5924),['Cython/Debugger/libcython.py']
04502f6afff6dca65ad0b0da857b21dcfa8a9b6a,2023-12-30 17:14:54,da-woods,"Add extra info on annotation inexact type (#5915)

For most builtin types, Cython interprets an annotation to mean
that an exact type is required. This is stricter than PEP-484 and
occassionally causes confusion.

1. Adds a bit more detail to the exception message in these cases
   (or to __notes__ in Python 3.12+) to explain.
2. Add a note in the migration guide.

I've only applied this to function arguments. Applying it to
general assignments would be possible but looks significantly more
complicated so I thought it better to cover the main case.

Related issue: https://github.com/cython/cython/issues/5908","['Cython/Compiler/Nodes.py', 'Cython/Utility/FunctionArguments.c', 'docs/src/userguide/migrating_to_cy30.rst', 'tests/run/annotation_typing.pyx']"
8d56987b7d5829970d2c7cdb4d439155679bc9bc,2023-12-30 17:14:54,da-woods,"Add extra info on annotation inexact type (#5915)

For most builtin types, Cython interprets an annotation to mean
that an exact type is required. This is stricter than PEP-484 and
occassionally causes confusion.

1. Adds a bit more detail to the exception message in these cases
   (or to __notes__ in Python 3.12+) to explain.
2. Add a note in the migration guide.

I've only applied this to function arguments. Applying it to
general assignments would be possible but looks significantly more
complicated so I thought it better to cover the main case.

Related issue: https://github.com/cython/cython/issues/5908","['Cython/Compiler/Nodes.py', 'Cython/Utility/FunctionArguments.c', 'docs/src/userguide/migrating_to_cy30.rst', 'tests/run/annotation_typing.pyx']"
a78d102201a4105dea4d129ab391e7dfb6af2807,2023-12-29 18:28:42,Matus Valo,"Add `use_threads_if` parameter to `parallel()` and `prange()` (#5919)


Co-authored-by: da-woods <dw-git@d-woods.co.uk>
Co-authored-by: scoder <stefan_ml@behnel.de>","['Cython/Compiler/Nodes.py', 'docs/examples/userguide/parallelism/condition_sum.py', 'docs/examples/userguide/parallelism/condition_sum.pyx', 'docs/src/userguide/parallelism.rst', 'tests/errors/e_cython_parallel.pyx', 'tests/run/parallel.pyx']"
80cc6516be04998b01545f9952f60affc139cb1d,2023-12-28 08:16:33,Stefan Behnel,Merge branch '3.0.x',[]
12324a112d3875fdb56ec908edf55b459334529c,2023-12-28 08:15:28,da-woods,"Fixes an address-sanitizer issue in parallel sections (GH-5922)

Address sanitizers consistently give an error on running the ""parallel"" test, saying that it ends up getting freed after releasing and reacquiring the gil, and thus we can't keep using the same threadstate pointer.

Sanitizer finding:

==28037==ERROR: AddressSanitizer: heap-use-after-free on address 0x6130000325b8 at pc 0x7f9cb3123c0d bp 0x7f9cad6ddc10 sp 0x7f9cad6ddc08
READ of size 8 at 0x6130000325b8 thread T41
    #0 0x7f9cb3123c0c in __Pyx__ExceptionReset <path>/TEST_TMP/run/c/parallel/parallel.c:42891
    #1 0x7f9cb3172593 in __pyx_f_8parallel_parallel_exc_nogil_swallow._omp_fn.0 <path>/TEST_TMP/run/c/parallel/parallel.c:30050
    #2 0x7f9cc66cdd2d  (/lib64/libgomp.so.1+0x21d2d) (BuildId: 94e48b16f615cdab2143a0c2b3f15d0b8d81d0e6)
    #3 0x7f9cc688ff43 in start_thread (/lib64/libc.so.6+0x8ff43) (BuildId: 099807798c1de6cbe241dc4e3dd67a7326a2c29f)
    #4 0x7f9cc69184cb in __clone3 (/lib64/libc.so.6+0x1184cb) (BuildId: 099807798c1de6cbe241dc4e3dd67a7326a2c29f)",['Cython/Compiler/Nodes.py']
f32a10d9daf937bcebe4a2a7b3b62d95717ca2ef,2023-12-28 08:15:28,da-woods,"Fixes an address-sanitizer issue in parallel sections (GH-5922)

Address sanitizers consistently give an error on running the ""parallel"" test, saying that it ends up getting freed after releasing and reacquiring the gil, and thus we can't keep using the same threadstate pointer.

Sanitizer finding:

==28037==ERROR: AddressSanitizer: heap-use-after-free on address 0x6130000325b8 at pc 0x7f9cb3123c0d bp 0x7f9cad6ddc10 sp 0x7f9cad6ddc08
READ of size 8 at 0x6130000325b8 thread T41
    #0 0x7f9cb3123c0c in __Pyx__ExceptionReset <path>/TEST_TMP/run/c/parallel/parallel.c:42891
    #1 0x7f9cb3172593 in __pyx_f_8parallel_parallel_exc_nogil_swallow._omp_fn.0 <path>/TEST_TMP/run/c/parallel/parallel.c:30050
    #2 0x7f9cc66cdd2d  (/lib64/libgomp.so.1+0x21d2d) (BuildId: 94e48b16f615cdab2143a0c2b3f15d0b8d81d0e6)
    #3 0x7f9cc688ff43 in start_thread (/lib64/libc.so.6+0x8ff43) (BuildId: 099807798c1de6cbe241dc4e3dd67a7326a2c29f)
    #4 0x7f9cc69184cb in __clone3 (/lib64/libc.so.6+0x1184cb) (BuildId: 099807798c1de6cbe241dc4e3dd67a7326a2c29f)",['Cython/Compiler/Nodes.py']
15675a5e2ff2685b9aa1af7695fe306548361a92,2023-12-23 13:27:22,Stefan Behnel,Provide better assignment failure diagnostics for typedef target types by printing their resolved type.,"['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/errors/e_excvalfunctype.pyx']"
e57193ccc5337f08b6efd4225d21594906df0cb8,2023-12-20 09:32:31,Matus Valo,"[Docs] Migrate Cython for NumPy users section to pure python (#5913)


Co-authored-by: da-woods <dw-git@d-woods.co.uk>","['docs/examples/userguide/numpy_tutorial/compute_fused_types.py', 'docs/examples/userguide/numpy_tutorial/compute_fused_types.pyx', 'docs/examples/userguide/numpy_tutorial/compute_infer_types.py', 'docs/examples/userguide/numpy_tutorial/compute_infer_types.pyx', 'docs/examples/userguide/numpy_tutorial/compute_memview.py', 'docs/examples/userguide/numpy_tutorial/compute_memview.pyx', 'docs/examples/userguide/numpy_tutorial/compute_prange.py', 'docs/examples/userguide/numpy_tutorial/compute_prange.pyx', 'docs/examples/userguide/numpy_tutorial/compute_typed.py', 'docs/examples/userguide/numpy_tutorial/compute_typed.pyx', 'docs/examples/userguide/numpy_tutorial/numpy_and_cython.ipynb', 'docs/src/userguide/compute_typed_html.jpg', 'docs/src/userguide/compute_typed_py_html.png', 'docs/src/userguide/compute_typed_pyx_html.png', 'docs/src/userguide/numpy_tutorial.rst']"
05cb5db361350f55051af0a321c7575436f38add,2023-12-19 10:35:45,Stefan Behnel,Merge branch '3.0.x',[]
ce4fb1a67a9c65bbf6758fa7fc9e7cdf66565033,2023-12-19 10:31:32,da-woods,"Fix utilitycode generation for const fused typedef (GH-5233)

Closes https://github.com/cython/cython/issues/5230","['Cython/Compiler/FusedNode.py', 'Cython/Compiler/Naming.py', 'tests/run/fused_types.pyx']"
f84c8465031d80c511191b9cf15e3178040d0330,2023-12-19 10:31:32,da-woods,"Fix utilitycode generation for const fused typedef (GH-5233)

Closes https://github.com/cython/cython/issues/5230","['Cython/Compiler/FusedNode.py', 'Cython/Compiler/Naming.py', 'tests/run/fused_types.pyx']"
d955f5e60bd791e87949b1306ddaf19002fcb135,2023-12-19 10:09:57,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
f17009c232d0cb5f68cb279bc16d6764e9576426,2023-12-19 10:02:15,Stefan Behnel,Update changelog.,['CHANGES.rst']
e41e1fbebd8382c41ac0f05fa8600166ee2ed063,2023-12-19 09:51:08,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
38769b6da4962bd9655edb6baf1a944aa7abbc4e,2023-12-19 09:47:52,Stefan Behnel,Prepare release of 3.0.7.,['Cython/Shadow.py']
6d89e6d7f5b744390fc9c7b295677d8841f92328,2023-12-19 09:47:23,Stefan Behnel,Update changelog.,['CHANGES.rst']
3c4acd2c35ffcfd381ddc2521992ea324831d3cb,2023-12-19 09:41:29,da-woods,"Fix await/yield/yield from in genexpression iteration (GH-5898)

Ignore the generator expression iterator when searching for yield/await nodes - the iterator is evaluated in the outer scope instead.

Closes https://github.com/cython/cython/issues/5851","['Cython/Compiler/ParseTreeTransforms.pxd', 'Cython/Compiler/ParseTreeTransforms.py', 'tests/run/async_def.pyx']"
f2e59b97da8dbb0e033264763cf93b19f6368a3e,2023-12-19 09:42:48,Stefan Behnel,Merge branch 'master' of git+ssh://github.com/cython/cython,"['Cython/Compiler/ParseTreeTransforms.pxd', 'Cython/Compiler/ParseTreeTransforms.py', 'tests/run/async_def.pyx']"
9f5219643ab3f610426bbc55fbf033bfd13118bf,2023-12-19 09:41:29,da-woods,"Fix await/yield/yield from in genexpression iteration (GH-5898)

Ignore the generator expression iterator when searching for yield/await nodes - the iterator is evaluated in the outer scope instead.

Closes https://github.com/cython/cython/issues/5851","['Cython/Compiler/ParseTreeTransforms.pxd', 'Cython/Compiler/ParseTreeTransforms.py', 'tests/run/async_def.pyx']"
f4a7644dedfab46fdf5c00596672155c38e1c3c3,2023-12-19 09:37:11,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
e0308468b3227db20f3802a70382061826636000,2023-12-18 11:40:51,Stefan Behnel,Update changelog.,['CHANGES.rst']
0b35f35c833829877a389fb78971847dabedf3aa,2023-12-16 14:11:37,Stefan Behnel,Minor code cleanups.,['Cython/Compiler/Parsing.py']
12b43eb1f9abdbf4ce74ac1723acd033d7474ae5,2023-12-16 13:39:07,scoder,"Improve optimisation of ""dict.pop()"" (GH-5911)

Optimise ""dict.pop()"" in Py3.13 and special-case the common ""discard and ignore"" use case.","['Cython/Compiler/Optimize.py', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Optimize.c', 'tests/run/dict_pop.pyx']"
599710889695c3f613a665cb15aa32637f1fdbe1,2023-12-15 11:19:59,Stefan Behnel,test: work around builtin changes in Py3.13.,['tests/run/hasattr.pyx']
a034c74b25f28badf51422a9c0e5df51887b4d73,2023-12-15 11:13:21,Stefan Behnel,test: work around docstring changes in Py3.13.,['tests/run/r_docstrings.pyx']
08235481da0f5334ccda14828268ad8ca28d5cc0,2023-12-14 21:34:03,da-woods,"Remove unused Entry.pep563_annotation (#5909)

I don't think it was ever used",['Cython/Compiler/Symtab.py']
0b3c45b59626858a9d6717583429496f50b9f441,2023-12-14 18:20:15,Matus Valo,"[Docs] Reorganize and improve documenation of `include_dirs` and `include_path` (#5899)


Co-authored-by: da-woods <dw-git@d-woods.co.uk>","['docs/src/userguide/language_basics.rst', 'docs/src/userguide/numpy_tutorial.rst', 'docs/src/userguide/source_files_and_compilation.rst']"
bef0c37e029fb9a1d951fc67fa32b55765e722ba,2023-12-14 13:47:01,Stefan Behnel,test runner: simplify doctest module importing.,['runtests.py']
a67d1609b7841a6d4034b9d8fd2c5dcd92b8a1e1,2023-12-14 11:17:35,Stefan Behnel,test runner: simplify unittest module importing.,['runtests.py']
2f93a5f92a80352e72f5fa9679fd282cb7a497ad,2023-12-12 08:45:58,Stefan Behnel,Use str.isascii() instead of a slower trial encoding (which was needed in Py<3.7).,"['Cython/Build/Dependencies.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Scanning.py', 'Cython/Compiler/StringEncoding.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/Visitor.py']"
6e47a82ca639b3eaa1fef840b629ef7d57b07fb3,2023-12-12 08:25:56,Stefan Behnel,Add tests for Unicode identifiers in typedefs and fused types.,['tests/run/unicode_identifiers.pyx']
e6490a642ae4663f1972a3868f4346d95b604171,2023-12-11 18:57:12,da-woods,"Fix conflicting enum to_py function with multiple modules (#5887)

Fix conflicting names of cpdef enum to_py functions when the an
enum with the name name exists in multiple modules. Instead use
the cname to name the to_py function since we have already
ensured that it is unique and mangled with the module name.

Possibly fixes #5860 (it definitely fixes a real bug, but that
project has far too many dependencies for me to test, so who knows
if it fixes *that* bug).","['Cython/Compiler/PyrexTypes.py', 'tests/run/cpdef_enums_import.srctree']"
a2d73066fe70ff1ec3d4ac4fd1a1a75bf66b48dc,2023-12-11 18:57:12,da-woods,"Fix conflicting enum to_py function with multiple modules (#5887)

Fix conflicting names of cpdef enum to_py functions when the an
enum with the name name exists in multiple modules. Instead use
the cname to name the to_py function since we have already
ensured that it is unique and mangled with the module name.

Possibly fixes #5860 (it definitely fixes a real bug, but that
project has far too many dependencies for me to test, so who knows
if it fixes *that* bug).","['Cython/Compiler/PyrexTypes.py', 'tests/run/cpdef_enums_import.srctree']"
f76f912a21d6d02a1243b0f5caa7064713ed0206,2023-12-11 16:19:57,Stefan Behnel,Update changelog.,['CHANGES.rst']
9bc8cf8a113f01d34012ae3afe3380a21e393255,2023-12-11 11:25:18,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
bbe62406ec5b3ab8570963dd31b080a3f2b4f1a3,2023-12-11 11:23:30,Stefan Behnel,Update changelog.,['CHANGES.rst']
b8d1b4df82b7124032f5072adb2f47882893e37b,2023-12-11 11:01:48,Stefan Behnel,"Fix ""compile all"" mode.",['Cython/Compiler/ParseTreeTransforms.py']
1ff5f3bd69f66bb5dc56b5e59416d60f62ca61d6,2023-12-11 08:53:06,Stefan Behnel,"Refactor ""FindInvalidUseOfFusedTypes"" from a transform into a simple TreeVisitor since it doesn't actually transform anything.
Also make it report errors inside of functions even if a return type error was already reported, as well as for nested functions inside of fused functions.","['Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Pipeline.py']"
14c154a90c5bf2ba89fe1414f42d9826eabe4f56,2023-12-11 08:45:04,Stefan Behnel,Refactor the pipeline debug code to avoid a useless use of exec().,['Cython/Compiler/Pipeline.py']
7820b09e904192a5d06010f94b2d420c74615c4e,2023-12-11 08:18:09,Stefan Behnel,Remove an unused import.,['Cython/Compiler/ParseTreeTransforms.py']
820a929c9ae3f02757b5249d12c5e5b8bc689211,2023-12-10 16:43:48,da-woods,Document CYTHON_ATOMICS (#5900),['docs/src/userguide/source_files_and_compilation.rst']
44fb246a6a80bc71b3cd0a96d6acd7c2c10a0b25,2023-12-10 16:38:27,da-woods,"Fix some exceptions in the unicode cimports (#5902)

And add a missing function.

Possibly worth backporting to 3.0.x (at least partly)",['Cython/Includes/cpython/unicode.pxd']
c841e13679ef8e8f5575c1e57ef5c89bef4057a2,2023-12-10 16:38:27,da-woods,"Fix some exceptions in the unicode cimports (#5902)

And add a missing function.

Possibly worth backporting to 3.0.x (at least partly)",['Cython/Includes/cpython/unicode.pxd']
7f01021383afe77672519f97c5aff19ff45ccfd2,2023-12-09 14:40:33,da-woods,Fix __repr__ for BuiltinObjectType (#5897),['Cython/Compiler/PyrexTypes.py']
66a6be18edc6074b3d274cbac71750c34237abef,2023-12-08 19:46:50,da-woods,"Fix an issue trying list.index indexing in FusedNode (#5896)

* Fix an issue trying list.index indexing in FusedNode

In some Python versions, generating the error message when .index
fails to find an index leads to a compiler crash.

Fix this by not relying on type being fully set up while generating
__str__.

Fixes #5894 and #5588

* Check ""in"" before indexing","['Cython/Compiler/FusedNode.py', 'Cython/Compiler/PyrexTypes.py', 'tests/run/fused_cpdef.pxd', 'tests/run/fused_cpdef.pyx']"
28b64adade66442bfb02c6ff2bc7c76cff2501bc,2023-12-08 19:46:50,da-woods,"Fix an issue trying list.index indexing in FusedNode (#5896)

* Fix an issue trying list.index indexing in FusedNode

In some Python versions, generating the error message when .index
fails to find an index leads to a compiler crash.

Fix this by not relying on type being fully set up while generating
__str__.

Fixes #5894 and #5588

* Check ""in"" before indexing","['Cython/Compiler/FusedNode.py', 'Cython/Compiler/PyrexTypes.py', 'tests/run/fused_cpdef.pxd', 'tests/run/fused_cpdef.pyx']"
f64f0678a16ee69acbc00a5c5953f8864c90eae6,2023-12-08 14:45:23,Stefan Behnel,"Avoid unused ""enumerate()"" in loop.",['Cython/Compiler/FusedNode.py']
02ddde36567db52ecfb5004039221db8e2bec60c,2023-12-04 20:16:09,da-woods,Make several C-API macro usages robust for the Limited API (GH-5845),"['Cython/Compiler/ExprNodes.py', 'Cython/Utility/Builtins.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c']"
238cb6b719624f19e8a4a35ec1453ebd241139f8,2023-12-04 19:59:45,Stefan Behnel,"Fix an ""#if"" guard indentation to align with its ""#else"" and ""#endif"".",['Cython/Utility/FunctionArguments.c']
e25e647954e06847a50393768b856863bb9d303d,2023-12-04 19:58:53,Stefan Behnel,"Disable ""CYTHON_METH_FASTCALL"" in nogil-CPython because it also requires ""CYTHON_FAST_PYCALL"" to be enabled in order to make use of the vectorcall protocol.
I don't know why ""CYTHON_FAST_PYCALL"" is disabled here, though. Both could probably be enabled in recent CPython versions.",['Cython/Utility/ModuleSetupCode.c']
914cad5112c2042a26fc14489b4a768603f828bc,2023-12-04 19:57:13,Stefan Behnel,"Guard all usages of ""__pyx_vectorcallfunc"" with ""CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL"".","['Cython/Utility/CythonFunction.c', 'Cython/Utility/ObjectHandling.c']"
a4a0f1e1a2c848181e5474e093d96173cc566988,2023-12-04 11:28:11,Stefan Behnel,"Add missing Cython macro guard definitions to the NOGIL-CPython platform section.
The default values should be reasonable based on what was there and what CPython uses, but were not validated.",['Cython/Utility/ModuleSetupCode.c']
f82dc93680020a9578d78f55ccc2b4311dea11c4,2023-12-03 19:57:52,da-woods,Remove old Python 2 cpython pxd files (GH-5870),"['Cython/Includes/cpython/__init__.pxd', 'Cython/Includes/cpython/cobject.pxd', 'Cython/Includes/cpython/int.pxd', 'Cython/Includes/cpython/oldbuffer.pxd', 'tests/run/cython_includes.pyx']"
9a22b49cb8573c5085994d8c9c5da2de6b2b577d,2023-12-03 19:53:28,da-woods,"More Python 2 removals (GH-5869)

Add a warning when an outdated special method is found and ignored.","['Cython/Compiler/TypeSlots.py', 'tests/run/special_methods_T561_py3.pyx']"
8e8197b96eefcd2050b21c8c12aa6588600cc237,2023-12-03 19:47:19,Stefan Behnel,Merge branch '3.0.x',['Cython/Compiler/Errors.py']
d500bdf65ec37a8e66c1264895e31d5474f6996e,2023-12-03 19:46:52,Stefan Behnel,Fix a set usage bug in Errors.warn_once().,['Cython/Compiler/Errors.py']
0f16f08079f9d448e9a15684cc636e06d2502c91,2023-12-03 19:42:02,da-woods,"Disable all freelist code outside CPython and add a new guard ""CYTHON_USE_FREELISTS"" for it (GH-5885)","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ModuleSetupCode.c', 'docs/src/userguide/extension_types.rst', 'docs/src/userguide/source_files_and_compilation.rst', 'docs/src/userguide/special_methods.rst']"
3cf4cf77e766e895b236e6c28c07106ef03abd67,2023-12-03 19:37:48,da-woods,Fix exec() in the Limited API by calling the builtin function instead (GH-5886),"['Cython/Utility/Builtins.c', 'Cython/Utility/ModuleSetupCode.c']"
bcc6799dad4bd496624bd377f2e6e0c4b3fc7a79,2023-12-03 19:33:31,da-woods,Make __Pyx_PyObject_ToDouble() work in the Limited API (GH-5888),"['Cython/Compiler/PyrexTypes.py', 'Cython/Utility/Optimize.c', 'Cython/Utility/TypeConversion.c']"
59268a9696054c357e07015edbaf64341ecff973,2023-12-03 19:20:06,Stefan Behnel,Fix sys.version_info check.,['tests/run/line_trace.pyx']
ca1a0eca47ef42830a2135f3caf5c3309a2c13d4,2023-12-03 19:17:46,da-woods,"Disable flakey line_trace test on Py3.12 windows 3.12 (GH-5891)

I've been unable to reproduce it locally, so don't really have an
idea how to fix it. Therefore, disable it.

I've done so for one minor version only for now in the hope in
magically improves with an update.",['tests/run/line_trace.pyx']
bc16d868bc57b815fed818e67b12042f938f0eda,2023-12-03 19:05:50,scoder,Guard PyUnicode_GET_LENGTH() usages by CYTHON_ASSUME_SAFE_SIZE (GH-5890),"['Cython/Compiler/ExprNodes.py', 'Cython/Utility/FunctionArguments.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c']"
eb92b1582636f6d72dc172795a98469d25b5eda9,2023-11-29 10:23:57,Stefan Behnel,Fix function name.,['Cython/Utility/ObjectHandling.c']
4c778e6a0cc3987e337ae4a1922b0f959d4114a2,2023-11-29 10:17:06,Stefan Behnel,"Replace ""Py*_Size() == -1"" failure checks with ""< 0"" to indicate to the C compiler that a valid size is not negative.","['Cython/Utility/Builtins.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/Dataclasses.c', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/StringTools.c']"
7d0d519b0cd5fd7ecf94a8ce2acde5026f345902,2023-12-02 10:29:00,da-woods,"Get all Plex/*.so modules to build in the Limited API (GH-5846)

This PR (on top of https://github.com/cython/cython/pull/5845 and its dependencies)
is sufficient to compile all the built modules in the Plex folder of Cython.","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/TypeSlots.py', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/ModuleSetupCode.c']"
9b2d0a637fd35413d34a9d98e938bbdaa2bdd725,2023-12-01 11:16:45,da-woods,"Fix dataclasses __init__ from field with default and no-init (#5858)

This should allow a field without a default argument afterwards
(because the field doesn't appear as an argument in `__init__`).

Also add a few notes on non-working tests from CPython.","['Cython/Compiler/Dataclass.py', 'Tools/make_dataclass_tests.py', 'tests/run/pure_cdef_class_dataclass.py']"
6fbcbb5b701aa58fc6a13de7b2f64b0f531420da,2023-12-01 08:50:56,Matus Valo,"Modernise documentation examples (#5878)

* from __future__ import print_function was removed
* % operator replaced with f-string","['docs/examples/quickstart/build/hello.pyx', 'docs/examples/tutorial/clibraries/test_queue.py', 'docs/examples/userguide/extension_types/cheesy.py', 'docs/examples/userguide/extension_types/cheesy.pyx', 'docs/examples/userguide/extension_types/my_module.pyx', 'docs/examples/userguide/extension_types/shrubbery.pyx', 'docs/examples/userguide/language_basics/cdef_block.pyx', 'docs/examples/userguide/language_basics/compile_time.pyx', 'docs/examples/userguide/language_basics/optional_subclassing.py', 'docs/examples/userguide/language_basics/optional_subclassing.pyx', 'docs/examples/userguide/language_basics/override.py', 'docs/examples/userguide/language_basics/override.pyx', 'docs/examples/userguide/language_basics/parameter_refcount.py', 'docs/examples/userguide/language_basics/parameter_refcount.pyx', 'docs/examples/userguide/memoryviews/quickstart.py', 'docs/examples/userguide/memoryviews/quickstart.pyx', 'docs/examples/userguide/numpy_tutorial/numpy_and_cython.ipynb', 'docs/src/userguide/extension_types.rst']"
1db67b93e126d6eb2ccbe09ac372965a07132c70,2023-12-01 07:48:05,da-woods,"Clarify performance hint wording (#5883)

* Clarify performance hint wording

I'm getting the impression that it this performance hint isn't
sufficiently clear about what it wants you to modify.

* Update Cython/Compiler/PyrexTypes.py

Co-authored-by: Matus Valo <matusvalo@users.noreply.github.com>

* Simpify implementation

* Fiddle with escaping of function_name","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/run/nogil.pyx']"
9385121155004b8ecec5583b6b8c5eda603db390,2023-12-01 07:48:05,da-woods,"Clarify performance hint wording (#5883)

* Clarify performance hint wording

I'm getting the impression that it this performance hint isn't
sufficiently clear about what it wants you to modify.

* Update Cython/Compiler/PyrexTypes.py

Co-authored-by: Matus Valo <matusvalo@users.noreply.github.com>

* Simpify implementation

* Fiddle with escaping of function_name","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/run/nogil.pyx']"
b9ae9a7f0801f602ae5e3c3633099e14b70ac1c6,2023-11-29 12:47:55,Matus Valo,Use `performance_hint()` instead of `warning()` for `boundscheck()` (#5879),"['Cython/Compiler/ExprNodes.py', 'tests/memoryview/memoryview.pyx']"
a8063c61120f15935744a806995af23a2890cc03,2023-11-29 09:57:37,scoder,"Add separate macro guard ""CYTHON_ASSUME_SAFE_SIZE"" (GH-5882)

Add a separate macro guard ""CYTHON_ASSUME_SAFE_SIZE"" for calling Py*_GET_SIZE() without expecting failures.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Utility/Builtins.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/FunctionArguments.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c', 'docs/src/userguide/source_files_and_compilation.rst']"
937aa0f2cf2cc25fe0cb275be940cc0fa67ba16b,2023-11-29 09:40:46,Stefan Behnel,Merge branch '3.0.x',[]
6ec1291b779e442cd526085a7daf69ff78dc7641,2023-11-29 09:39:48,Stefan Behnel,"Manually apply the safe fix from https://github.com/cython/cython/pull/5874 but without the test (which fails in the stable 3.0 branch for other reasons).

Closes https://github.com/cython/cython/issues/5873",['Cython/Compiler/ModuleNode.py']
53d1f1cd64c277dd72052da499a7f97c6a603677,2023-11-29 08:00:59,Stefan Behnel,Merge branch '3.0.x',[]
24bee75dd5a847d7e509975aca31092738215e9d,2023-11-29 07:58:46,Stefan Behnel,"Revert ""Set the encoding used in EndToEnd tests to UTF-8 on all platforms since we read it from a pipe anyway and don't want to care about platform specific encoding issues.""

This reverts commit 1b0b49febab8755009a3ecd5f2b23bcf82e20af7.
It produced test failures on old Python versions.",['runtests.py']
a766e98e87a5ffad78e10855884ae7e079479e74,2023-11-28 13:30:11,Stefan Behnel,"Revert ""Avoid writing non-latin1 module names in the file (GH-5874)""

This reverts commit a6fecd064ecedbd0f4525132abd752126471e396.

Reverted due to missing changes that are currently only available in Cython 3.1.","['Cython/Compiler/ModuleNode.py', 'tests/run/unicode_imports.srctree']"
1b0b49febab8755009a3ecd5f2b23bcf82e20af7,2023-11-27 09:29:57,Stefan Behnel,Set the encoding used in EndToEnd tests to UTF-8 on all platforms since we read it from a pipe anyway and don't want to care about platform specific encoding issues.,['runtests.py']
c1896e1680ef66707706a812ba418086f6d769f4,2023-11-28 08:55:16,da-woods,Delete some Python 2 module init function code (GH-5875),['Cython/Compiler/ModuleNode.py']
a6fecd064ecedbd0f4525132abd752126471e396,2023-11-28 08:40:00,da-woods,"Avoid writing non-latin1 module names in the file (GH-5874)

… and avoid potentially failing to do so.

Closes https://github.com/cython/cython/issues/5873","['Cython/Compiler/ModuleNode.py', 'tests/run/unicode_imports.srctree']"
f0bc01d105cdb11440d33536c46feffe803083cc,2023-11-28 08:40:00,da-woods,"Avoid writing non-latin1 module names in the file (GH-5874)

… and avoid potentially failing to do so.

Closes https://github.com/cython/cython/issues/5873","['Cython/Compiler/ModuleNode.py', 'tests/run/unicode_imports.srctree']"
16b87cfacaa4835020166d2f87fee80e943fd61e,2023-11-27 10:12:01,Stefan Behnel,"Make the time reporting in EndToEnd tests correctly map cython/cythonize script calls to the ""etoe-build"" stats bucket instead of the generic ""etoe-run"" category.",['runtests.py']
125e0be329261c67b242cccc817e3161627fd803,2023-11-27 09:29:57,Stefan Behnel,Set the encoding used in EndToEnd tests to UTF-8 on all platforms since we read it from a pipe anyway and don't want to care about platform specific encoding issues.,['runtests.py']
06f155984d80652f2b26997b09aa42a50da7c3a2,2023-11-26 14:02:41,Stefan Behnel,build: Do not generate a universal py2+py3 wheel but only one for Py3.,['Makefile']
8289efd793e2a43f88c548c071c6afb467615e45,2023-11-26 13:57:43,Stefan Behnel,Update the list of authors in the package meta data to reflect the current project status.,['setup.py']
4623f0a307bc6fdb7e46a05aafd117e4808441c3,2023-11-26 13:33:56,Stefan Behnel,Merge branch '3.0.x',['CHANGES.rst']
248655889fe9ae554d12f5bb17cb61eb9878c99f,2023-11-26 11:51:01,Stefan Behnel,Prepare release of 3.0.6.,"['CHANGES.rst', 'Cython/Shadow.py']"
cb1d78b5e2a2d96a41e634c9ac670dc80ec75af4,2023-11-26 11:50:20,Stefan Behnel,Update changelog.,['CHANGES.rst']
b7f4e3de46b42dd984f0d99138299498075d3a13,2023-11-26 11:09:21,da-woods,"Document user-selectable C macros (#5864)

I've shown the 4 that are most user-relevant clearly, and
hidden most of the rest by default (but documented them if
people really want to read them).","['docs/src/userguide/external_C_code.rst', 'docs/src/userguide/source_files_and_compilation.rst']"
fd8fb85bb1f1e8a5b9f8a4b5a2014f2e0765a11a,2023-11-25 20:06:41,Matus Valo,[Docs] Provide tables listing basic cython types (#4980),['docs/src/userguide/language_basics.rst']
48474297d1a6f323bafe24de62d7b659ae26fdd5,2023-11-25 19:51:24,scoder,"Implement return type inference for methods of builtin types (GH-5865)

* Also, infer 'str' in Py3 now, since it's a safe type.

* Builtin types generally don't return None on slicing, and string types also never do it for indexing, so change ""IndexNode.may_be_none()"" accordingly.","['Cython/Compiler/Builtin.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Tests/TestBuiltin.py', 'Cython/Compiler/TypeInference.py', 'tests/run/bytesmethods.pyx', 'tests/run/strmethods.pyx', 'tests/run/strmethods_ll2.pyx', 'tests/run/type_inference.pyx']"
875293e00031ad04e4d4e8539b2a4a0aac60731f,2023-11-25 19:36:43,scoder,Speed up fstrings by avoiding a tuple for joining the unicode string parts. (GH-5866),"['Cython/Compiler/ExprNodes.py', 'Cython/Utility/StringTools.c']"
27095d5222cc77635f0eec3e81c6c461b095002d,2023-11-25 18:12:02,da-woods,"Note on pure-Python mode and Numpy arrays (#5867)

We've had a few questions asking about this so I think it makes
sense to add a note to the documentation.",['docs/src/tutorial/numpy.rst']
8c505605086d3c293bb5746e911fddc5f90db9d6,2023-11-24 11:15:03,Stefan Behnel,Use a type specific len() check function for sequence unpacking.,['Cython/Compiler/ExprNodes.py']
7f6577a36f2ce8c31e8b548e6948f6c1e9fae6d4,2023-11-21 21:04:46,da-woods,"Fix dataclass comparison operators and enable tests (#5857)

They hadn't been following proper tuple comparison semantics
so had been giving the wrong result.","['Cython/Compiler/Dataclass.py', 'Tools/make_dataclass_tests.py', 'tests/run/test_dataclasses.pyx']"
bc1f11e77ea92f123d73fd61c63a4b9971d839d2,2023-11-21 21:04:46,da-woods,"Fix dataclass comparison operators and enable tests (#5857)

They hadn't been following proper tuple comparison semantics
so had been giving the wrong result.","['Cython/Compiler/Dataclass.py', 'Tools/make_dataclass_tests.py', 'tests/run/test_dataclasses.pyx']"
5c4ff00cd8b2d47820b9609c27e0ab2d940fcbfb,2023-11-21 18:15:04,da-woods,Support match_args in cdef dataclasses (#5381),"['Cython/Compiler/Dataclass.py', 'Tools/make_dataclass_tests.py', 'tests/run/test_dataclasses.pyx']"
8af78af561d6bbdefcb36d02ba8af864a22e8bc4,2023-11-20 18:56:38,da-woods,"Further limited API fixes (#5798)

1. A bunch of tests enabled (mostly already working)
2. (some) fstrings work.
3. cython.array works
4. assorted other small fixes","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Optimize.py', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/MemoryView_C.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c', 'tests/test_in_limited_api.txt']"
e56c7382ed4cd4a43d9a7421cf1713a543707bae,2023-11-20 18:54:58,da-woods,"Drop PyFPE macros (#5841)

* Drop PyFPE macros

These macros stopped doing anything in Python 3.7 (and may have
been broken before): https://github.com/python/cpython/issues/73323.

This has the side-effect of fixing basic arthmetic in the limited
API.

* Catch a couple more uses","['Cython/Utility/Optimize.c', 'tests/run/isolated_limited_api_tests.srctree']"
0adbcde2377c2712b833f697a5ee5c64490fdeee,2023-11-20 16:35:49,scoder,"Infer the result type of builtin numeric binary operations (GH-5844)

See https://github.com/cython/cython/issues/4237

* Replace ""coerce_to_integer()"" (which coerced the node to a C long) by a more appropriate ""coerce_to_index()"" that coerces to Py_ssize_t. All usages actually wanted that.

Closes https://github.com/cython/cython/issues/5743

* Make sure that we correctly coerce a sequence multiplier (""[...] * n"") to 'Py_ssize_t' if it's a Python 'int'. Otherwise, we can't call PySequence_Multiply() with it.

* Infer ""C double"" for integer ""/"" and test type inference in for both language_level=2/3.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/PyrexTypes.py', 'tests/errors/reversed_literal_pyobjs.pyx', 'tests/run/type_inference.pyx', 'tests/run/type_inference_ll2.pyx']"
d3dfe44fb5e524206f3a6dd2dae165210f64ae4c,2023-11-20 16:17:18,Ewout ter Hoeven,Remove some Python 2 specific left-over code (GH-5828),"['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Interpreter.py', 'Cython/Compiler/StringEncoding.py', 'Cython/Compiler/TreePath.py']"
f258b674d3117141ceae53226e7fe8530f51385c,2023-11-20 16:02:04,Hugo van Kemenade,"PEP 703: Accept new `Py_GIL_DISABLED` macro in addition to `PY_NOGIL`  (GH-5852)

See https://github.com/python/cpython/issues/111863
See https://github.com/python/cpython/pull/111864",['Cython/Utility/ModuleSetupCode.c']
fcd5a49515fd9f67ae5f748fcef972f27eac9223,2023-11-20 16:02:04,Hugo van Kemenade,"PEP 703: Accept new `Py_GIL_DISABLED` macro in addition to `PY_NOGIL`  (GH-5852)

See https://github.com/python/cpython/issues/111863
See https://github.com/python/cpython/pull/111864",['Cython/Utility/ModuleSetupCode.c']
5e77b987657e034378f914d42320d689ebafdb67,2023-11-20 07:40:38,da-woods,Clean up a few more casts to non-const char* (#5847),['Cython/Utility/CythonFunction.c']
a20b565795272c6ebd91c5c824e902fea96ddb8a,2023-11-19 14:19:56,Matus Valo,Remove patch utility code in Coroutine.c (#5835),"['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Utility/Coroutine.c']"
d5e0f3b0dc067da983669958ddc93a9235ea4625,2023-11-19 11:06:01,Min RK,"cython magic: extract style, body, not full HTML document (#5760)

displaying the full HTML document inline can result in problems
rendering and produces invalid HTML documents after export",['Cython/Build/IpythonMagic.py']
df2bffaa8d30deacbf05b7e4aa2b9ec20b3167da,2023-11-19 10:54:30,da-woods,"Partially disable trashcan test in PyPy (#5832)

The test is requiring a derministic order of destruction which
PyPy doesn't give reliably and thus we're getting occasional CI
failures. Therefore just treat is as compile and don't crash
test.",['tests/run/trashcan.pyx']
30c37a667ae8ced5db7efca00daa4a08340a81b4,2023-11-19 10:54:30,da-woods,"Partially disable trashcan test in PyPy (#5832)

The test is requiring a derministic order of destruction which
PyPy doesn't give reliably and thus we're getting occasional CI
failures. Therefore just treat is as compile and don't crash
test.",['tests/run/trashcan.pyx']
a4bb6dcf1ee6b4ee23ae17cf25cbddf4ae9898a2,2023-11-18 14:11:46,da-woods,"Add missing unicode C API functions and Py_UNICODE warning (#5836)

* Add missing unicode C API functions and Py_UNICODE warning

1. Add missing C API functions for unicode to wchar_t (since
   these are what should be used to replace Py_UNICODE*).
2. Add an explicit warning for users converting to Py_UNICODE*.

* Add extra warnings to test","['Cython/Compiler/ExprNodes.py', 'Cython/Includes/cpython/unicode.pxd', 'tests/errors/charptr_from_temp.pyx']"
e0d2a36096959c53405a9b089adc33c011e27350,2023-11-18 14:11:46,da-woods,"Add missing unicode C API functions and Py_UNICODE warning (#5836)

* Add missing unicode C API functions and Py_UNICODE warning

1. Add missing C API functions for unicode to wchar_t (since
   these are what should be used to replace Py_UNICODE*).
2. Add an explicit warning for users converting to Py_UNICODE*.

* Add extra warnings to test","['Cython/Compiler/ExprNodes.py', 'Cython/Includes/cpython/unicode.pxd', 'tests/errors/charptr_from_temp.pyx']"
ed7e95912b6ed7d20e190fbf1aecb9f2a997d479,2023-11-18 08:40:31,scoder,"Map Python ""int"" type to PyLong. (GH-5830)

* On unary operators (+/-/~), Python builtin types usually return their own type or fail, so infer their type.

* Allow 'long' as type only in Py2 code (language_Level=2) but map it to 'int'.

Closes https://github.com/cython/cython/issues/4237","['Cython/Compiler/Builtin.py', 'Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/Visitor.py', 'Cython/Shadow.py', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/Optimize.c', 'docs/examples/userguide/fusedtypes/char_or_float.py', 'docs/examples/userguide/fusedtypes/char_or_float.pyx', 'tests/compile/pylong.pyx', 'tests/errors/dataclass_e5.pyx', 'tests/run/annotation_typing.pyx', 'tests/run/builtin_py3.pyx', 'tests/run/fused_types.pyx', 'tests/run/isinstance.pyx', 'tests/run/powop.pyx', 'tests/run/type_inference.pyx']"
39cebc08fe4eb3d4f8d699a01d35ffe3689c3ec1,2023-11-17 18:34:15,Stefan Behnel,"docs: Clarify the warning about ""Py_UNICODE"" usage and make it more visible.

See https://github.com/cython/cython/issues/3924",['docs/src/tutorial/strings.rst']
aa0de9c7b8e6c9855bce5f88e97f829693d9fe64,2023-11-17 18:22:10,scoder,"Make language level 3 the default (GH-5827)

* Allow ASCII Unicode strings to coerce to char* and char since they often originate from unprefixed strings in language_level=3.

* Fix accepted type of @cname() decorator since it now receives unicode strings.

* Directly set language_level=3 when passing the ""--3str"" CLI option.

* Directly call PyUnicode_FromOrdinal() for chr().

* Remove now-redundant directives from the Cython source files and, while at it, generally disable the ""auto_pickle"" directive for the Cython build to save module space, unless explicitly requested/needed.

* Allow Unicode strings to coerce also to (encoded) C++ strings and use the ""c_string_encoding"" (if provided) to encode the string if it doesn't have a parsed bytes value.","['Cython/Build/Cythonize.py', 'Cython/Build/Inline.py', 'Cython/Build/Tests/TestCythonizeArgsParser.py', 'Cython/Compiler/Builtin.py', 'Cython/Compiler/CmdLine.py', 'Cython/Compiler/Code.pxd', 'Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FlowControl.pxd', 'Cython/Compiler/FlowControl.py', 'Cython/Compiler/Lexicon.py', 'Cython/Compiler/Main.py', 'Cython/Compiler/ParseTreeTransforms.pxd', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/Pythran.py', 'Cython/Compiler/Scanning.pxd', 'Cython/Compiler/Scanning.py', 'Cython/Compiler/Tests/TestCmdLine.py', 'Cython/Compiler/TreeFragment.py', 'Cython/Compiler/Visitor.pxd', 'Cython/Compiler/Visitor.py', 'Cython/Plex/Actions.pxd', 'Cython/Plex/Actions.py', 'Cython/Plex/DFA.pxd', 'Cython/Plex/Machines.py', 'Cython/Plex/Scanners.py', 'Cython/Plex/Transitions.py', 'Cython/StringIOTree.py', 'Cython/Tempita/_tempita.py', 'Cython/Utility/MemoryView.pyx', 'setup.py', 'tests/errors/string_assignments.pyx', 'tests/run/public_fused_types.srctree']"
f5ff5c9b1895a8aec46137b61754ddbdd1627044,2023-11-17 07:48:56,Stefan Behnel,Fix crash on undefined variable.,['Cython/Compiler/Optimize.py']
348d32a8041a063dc9e265cea47c2d834ac5c28c,2023-11-17 05:58:28,Matus Valo,Remove Py2/Py3.x compatibility code that is not needed in Py3.7+ (GH-5824),"['Cython/Build/Cythonize.py', 'Cython/Build/Dependencies.py', 'Cython/Build/Inline.py', 'Cython/Build/IpythonMagic.py', 'Cython/Build/Tests/TestCythonizeArgsParser.py', 'Cython/Build/Tests/TestDependencies.py', 'Cython/Build/Tests/TestIpythonMagic.py', 'Cython/Build/__init__.py', 'Cython/Compiler/Annotate.py', 'Cython/Compiler/CmdLine.py', 'Cython/Compiler/Code.py', 'Cython/Compiler/Errors.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Interpreter.py', 'Cython/Compiler/Main.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Scanning.py', 'Cython/Compiler/StringEncoding.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/Tests/TestCmdLine.py', 'Cython/Compiler/Tests/TestStringEncoding.py', 'Cython/Compiler/TreeFragment.py', 'Cython/Compiler/TypeInference.py', 'Cython/Compiler/Visitor.py', 'Cython/Debugger/libcython.py', 'Cython/Debugger/libpython.py', 'Cython/Distutils/build_ext.py', 'Cython/Distutils/extension.py', 'Cython/Distutils/old_build_ext.py', 'Cython/Plex/Machines.py', 'Cython/Shadow.py', 'Cython/StringIOTree.py', 'Cython/Tempita/_looper.py', 'Cython/Tempita/_tempita.py', 'Cython/Tempita/compat3.py', 'Cython/Tests/TestCythonUtils.py', 'Cython/Tests/xmlrunner.py', 'Cython/Utility/MemoryView.pyx', 'Cython/Utils.py', 'pyximport/_pyximport2.py', 'tests/compile/fused_redeclare_T3111.pyx', 'tests/errors/pure_warnings.py', 'tests/run/pyintop.pyx']"
5ceefbd501f7329ce93f35b5ae91bcf37fc0a889,2023-11-17 05:55:31,Stefan Behnel,Remove legacy _pyximport2.py,"['pyximport/_pyximport3.py', 'pyximport/pyximport.py']"
bcc22cac0d513a7f48a7adc9734d422fd39dbce7,2023-11-16 21:10:53,Stefan Behnel,"Remove the redundant coverage build (we have separate ""pycoverage"" and ""cycoverage"" jobs).",['.github/workflows/ci.yml']
3b0f93357cd580188c1dd263f21d7b293d9d178e,2023-11-15 09:13:11,Stefan Behnel,Regenerate Lexicon from Python 3.13a1 unicodedata.,['Cython/Compiler/Lexicon.py']
5050d2547c9cad2470be7fcafeb6ae3176935320,2023-11-15 08:15:29,Stefan Behnel,Write Python 3 code in Lexicon generator.,['bin/cython-generate-lexicon.py']
2a989cd60922e5c40f8ac75047e071c457ab9983,2023-11-16 20:05:36,da-woods,"Remove tests for WITH_THREAD (#5829)

It's now always true for all the platforms we care about.

Closes https://github.com/cython/cython/issues/5812","['Cython/Compiler/Code.py', 'Cython/Utility/Buffer.c', 'Cython/Utility/Exceptions.c', 'Cython/Utility/MemoryView_C.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Profile.c']"
f036d9480d901c39b596041da83ff3e31b1e8b04,2023-11-16 08:45:10,Ewout ter Hoeven,"Pyupgrade: Update codebase to Python 3 syntax and features (GH-5810)

This commit updates the Cython code to Python 3 syntax and features, removing old, depreciated and redundant code. pyupgrade 3.15.0 with --keep-percent-format was used.

It only updates the code in the Cython directory, tests, docs and other directories aren't updated.

This includes:
- utf-8 encoding is now the default (PEP 3120, Python 3.0+)
- Replace list comprehensions by Generator Expressions (PEP 289, Python 2.4+)
- Replace yield loop by yield from (PEP 380, Python 3.3+)
- Replace the IOError alias by OSError (PEP 3151, Python 3.3+)
- Remove the default subclass (object) when defining a class
- Use New Super syntax (PEP 3135, Python 3.0+)
- Define sets with curly braces {} instead of set()
- Remove ""r"" parameter from open function, which is default
- Remove forced str(""native"") literals

The --keep-percent-format parameter ensures percent-formatted strings are not replaced with .format() strings. This could be done in another PR.","['Cython/Build/BuildExecutable.py', 'Cython/Build/Cythonize.py', 'Cython/Build/Dependencies.py', 'Cython/Build/Inline.py', 'Cython/Build/IpythonMagic.py', 'Cython/Build/Tests/TestCyCache.py', 'Cython/Build/Tests/TestDependencies.py', 'Cython/Build/Tests/TestInline.py', 'Cython/Build/Tests/TestIpythonMagic.py', 'Cython/CodeWriter.py', 'Cython/Compiler/AnalysedTreeTransforms.py', 'Cython/Compiler/Annotate.py', 'Cython/Compiler/AutoDocTransforms.py', 'Cython/Compiler/Buffer.py', 'Cython/Compiler/Builtin.py', 'Cython/Compiler/CmdLine.py', 'Cython/Compiler/Code.py', 'Cython/Compiler/CodeGeneration.py', 'Cython/Compiler/CythonScope.py', 'Cython/Compiler/Dataclass.py', 'Cython/Compiler/Errors.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FlowControl.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/Interpreter.py', 'Cython/Compiler/Lexicon.py', 'Cython/Compiler/Main.py', 'Cython/Compiler/MemoryView.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Naming.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/Pipeline.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Pythran.py', 'Cython/Compiler/Scanning.py', 'Cython/Compiler/StringEncoding.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/Tests/TestBuffer.py', 'Cython/Compiler/Tests/TestCmdLine.py', 'Cython/Compiler/Tests/TestFlowControl.py', 'Cython/Compiler/Tests/TestGrammar.py', 'Cython/Compiler/Tests/TestMemView.py', 'Cython/Compiler/Tests/TestParseTreeTransforms.py', 'Cython/Compiler/Tests/TestScanning.py', 'Cython/Compiler/Tests/TestStringEncoding.py', 'Cython/Compiler/Tests/TestTreeFragment.py', 'Cython/Compiler/Tests/TestTreePath.py', 'Cython/Compiler/Tests/TestTypes.py', 'Cython/Compiler/Tests/TestVisitor.py', 'Cython/Compiler/TreeFragment.py', 'Cython/Compiler/TreePath.py', 'Cython/Compiler/TypeInference.py', 'Cython/Compiler/TypeSlots.py', 'Cython/Compiler/UFuncs.py', 'Cython/Compiler/UtilNodes.py', 'Cython/Compiler/UtilityCode.py', 'Cython/Compiler/Version.py', 'Cython/Compiler/Visitor.py', 'Cython/Coverage.py', 'Cython/Debugger/DebugWriter.py', 'Cython/Debugger/Tests/TestLibCython.py', 'Cython/Debugger/Tests/test_libcython_in_gdb.py', 'Cython/Debugger/Tests/test_libpython_in_gdb.py', 'Cython/Debugger/libcython.py', 'Cython/Debugger/libpython.py', 'Cython/Distutils/build_ext.py', 'Cython/Distutils/old_build_ext.py', 'Cython/Plex/Actions.py', 'Cython/Plex/DFA.py', 'Cython/Plex/Lexicons.py', 'Cython/Plex/Machines.py', 'Cython/Plex/Regexps.py', 'Cython/Plex/Scanners.py', 'Cython/Plex/Transitions.py', 'Cython/Plex/__init__.py', 'Cython/Shadow.py', 'Cython/StringIOTree.py', 'Cython/Tempita/_looper.py', 'Cython/Tempita/_tempita.py', 'Cython/TestUtils.py', 'Cython/Tests/TestCodeWriter.py', 'Cython/Tests/TestCythonUtils.py', 'Cython/Tests/TestJediTyper.py', 'Cython/Tests/TestTestUtils.py', 'Cython/Tests/xmlrunner.py', 'Cython/Utility/Dataclasses.py', 'Cython/Utility/__init__.py', 'Cython/Utils.py', 'Cython/__init__.py']"
16d31ef77572fcd8e5b754ff702355e56bb8acfe,2023-11-16 08:01:33,da-woods,"Disable failing Windows CyCache test (#5826)

See #5825 for a description of the failure.",['Cython/Build/Tests/TestCyCache.py']
a5645ebd9fc54d1828551b214549b2109a04a5d3,2023-11-16 08:01:33,da-woods,"Disable failing Windows CyCache test (#5826)

See #5825 for a description of the failure.",['Cython/Build/Tests/TestCyCache.py']
5f9f180f1a199472b59783e25d766028fd6f5902,2023-11-15 15:57:31,Matus Valo,"Optimize numerical operations with python integer variable (#5785)


Co-authored-by: scoder <stefan_ml@behnel.de>","['Cython/Compiler/Optimize.py', 'tests/run/pyintop.pyx']"
a57825c6d09b38f7a15b6ffee195e70ce6e18d76,2023-11-14 21:10:20,da-woods,Merge branch '3.0.x',['runtests.py']
4bbefa36cfb0062e83346ce7d90f717943c5df38,2023-11-14 21:07:37,da-woods,Simplify pstats test,['runtests.py']
7fea843f4b7ed0ba2c9d51911edae98207871b2f,2023-11-14 20:21:12,etymology,"update no-compile install from source (#5819)

Removed line using deprecated ``pip --install-options`` (https://github.com/pypa/pip/pull/11858). The second option (setting NO_CYTHON_COMPILE=true) still works. 

closes #5694","['docs/src/quickstart/install.rst', 'setup.py']"
f71205d553977c561123e2949a458973b7570ea1,2023-11-14 18:39:40,da-woods,"Remove allowed_failure from Python 3.12 (#5815)

and disable profiling tests there, since it doesn't look like
we'll be able to fix them.

Knowing about other regressions is probably more important than
testing profiling...","['.github/workflows/ci.yml', 'runtests.py']"
857736ebe27cb9d04e65e7816fb85c569c832c8e,2023-11-14 18:39:40,da-woods,"Remove allowed_failure from Python 3.12 (#5815)

and disable profiling tests there, since it doesn't look like
we'll be able to fix them.

Knowing about other regressions is probably more important than
testing profiling...","['.github/workflows/ci.yml', 'runtests.py']"
8402189f91351e36b3e1c724c972186109402d0a,2023-11-14 10:33:26,Stefan Behnel,"Add tests for optimised ""float(unicode)"" parsing of non-ASCII digits when auto-decoding is enabled for C strings.","['tests/run/cpp_stl_string_utf8_auto_encoding.pyx', 'tests/run/unicode_default_auto_encoding.pyx']"
37b46e576e6abc17ae22d5b31af21cd5487ec8f5,2023-11-14 10:20:52,Stefan Behnel,"Add a test for optimised ""float(unicode)"" parsing of non-ASCII digits.",['tests/run/builtin_float.py']
cae87f5d38283f55cdb0cfdbfabe79531dee863e,2023-11-14 09:34:21,Stefan Behnel,"Avoid conditional branching in the __Pyx__PyBytes_AsDouble_Copy() helper function.
This means that we no longer short-circuit if we fail to parse the string (containing underscores) passed into float(), but that's unlikely to become a problem in practice, given that strings expected to be parsable by float() tend to be less than 100 characters. The copying function is very fast even for long strings.","['Cython/Utility/Optimize.c', 'tests/run/builtin_float.py']"
7683cb154333ff66f51405554ff79af69aa70e94,2023-11-14 09:14:54,Stefan Behnel,"Fix ""float(std::string)"" and other non-PyObject arguments to float().

Closes https://github.com/cython/cython/issues/5818","['Cython/Compiler/Optimize.py', 'tests/run/cpp_stl_string.pyx']"
bbbe428ee5c52dd8fad10b0ee3bb2e33b5a8918c,2023-11-14 09:14:54,Stefan Behnel,"Fix ""float(std::string)"" and other non-PyObject arguments to float().

Closes https://github.com/cython/cython/issues/5818","['Cython/Compiler/Optimize.py', 'tests/run/cpp_stl_string.pyx']"
ae8752464cd1c601f191ac65125dfa28aa76240e,2023-11-13 22:15:16,Lysandros Nikolaou,Check for MSVC when checking for complex support on C11 (#5809),['Cython/Utility/Complex.c']
a855ff17f94b0f293a8638c975d3bb792c9eadca,2023-11-13 22:15:16,Lysandros Nikolaou,Check for MSVC when checking for complex support on C11 (#5809),['Cython/Utility/Complex.c']
7a2412ee4a72f82b742abc4eb6e5489f86c77a42,2023-11-12 19:28:44,Stefan Behnel,Remove unused import.,['tests/run/unicodemethods.pyx']
81e34b80874b2463c4efd05b11a8380985b94b06,2023-11-12 19:28:23,Stefan Behnel,docs: Add a note that profiling and tracing are non-functional in CPython 3.12.,['docs/src/tutorial/profiling_tutorial.rst']
62b04e5f355c683d92d24398221dad7f3358466c,2023-11-10 20:24:45,da-woods,"Cleanup a lot of casts to char* (#5515)

That are no longer needed and causing warnings about losing
constness. They mostly come from Python 2 era when a lot more arguments were just `char*`","['Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/CommonStructures.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/MemoryView.pyx', 'Cython/Utility/MemoryView_C.c', 'Cython/Utility/TypeConversion.c']"
f940f222cb340bde53ac6b09666b580646ad09e3,2023-11-10 07:34:30,Stefan Behnel,"PyPy lacks support for Py_UNICODE_ISPRINTABLE(), so implement it manually (and without error checking as PyPy would also do it).",['Cython/Compiler/Optimize.py']
1cf1320959505684cfc06a7450f204add15bbbf9,2023-11-09 20:51:35,da-woods,Use utility-code version of Py_UNICODE_ISPRINTABLE,['Cython/Compiler/Optimize.py']
d693e91ed5ceb2a4443669b930ba01a480d61924,2023-11-09 18:37:39,da-woods,"Fix ""except Exception"" in limited api (#5699)

Partial fix for #5697

Change cname for builtin types to be a pointer rather than a
value. This means that we can avoid defererencing BaseException
to transform it into a value (which doesn't work on the limited
api, because its an opaque struct)","['Cython/Compiler/Builtin.py', 'Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/TypeSlots.py', 'tests/run/isolated_limited_api_tests.srctree']"
ab8cd495cfb2f44df1a635fc3f4d3750bddffdf2,2023-11-09 18:36:08,Vyas Ramasubramani,"Error if Cython enum is used outside a typed context (#5642)

* Don't add Cython enums to global Python symbol table unless they have a Python wrapper

* Add test","['Cython/Compiler/ExprNodes.py', 'tests/errors/e_cenum_expr.pyx']"
ea546e5ee89ff5389ff0455064c706de1de69e4f,2023-11-09 17:01:28,Stefan Behnel,"PyPy lacks support for Py_UNICODE_ISPRINTABLE(), so implement it manually (and without error checking as PyPy would also do it).",['Cython/Utility/StringTools.c']
664776b8b5008b32824f4833577f9dbcaee1787d,2023-11-09 14:26:45,Stefan Behnel,Fix test data.,['Cython/Build/Tests/TestCythonizeArgsParser.py']
8144b30f257d064a358c670e720d5e6781664cea,2023-11-09 14:00:43,Stefan Behnel,"Optimise Py_UCS4.isprintable().

Closes https://github.com/cython/cython/issues/3277","['Cython/Compiler/Optimize.py', 'tests/run/py_ucs4_type.pyx']"
101b492c73dedd990b14ee9eab9bbf20ed7c3851,2023-11-08 20:09:03,Mads Ynddal,Fix indexing of self.args when passing Python object as varargs parameter (#5805),['Cython/Compiler/ExprNodes.py']
c016ea6451d9bf89d9b706048f1594f25bfd8d36,2023-11-08 20:09:03,Mads Ynddal,Fix indexing of self.args when passing Python object as varargs parameter (#5805),['Cython/Compiler/ExprNodes.py']
c7d02983c2d23f1d63b957aabcd2dcea26e408f7,2023-11-08 13:36:50,scoder,"Remove Py2/Py3.[3456] legacy support (GH-5801)

Closes https://github.com/cython/cython/issues/2800","['CHANGES.rst', 'Cython/Compiler/Buffer.py', 'Cython/Compiler/MemoryView.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Buffer.c', 'Cython/Utility/Builtins.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CpdefEnums.pyx', 'Cython/Utility/CppConvert.pyx', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/Dataclasses.c', 'Cython/Utility/Embed.c', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/FunctionArguments.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/MemoryView.pyx', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/Printing.c', 'Cython/Utility/Profile.c', 'Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c', 'Cython/Utility/arrayarray.h', 'Makefile', 'runtests.py', 'setup.cfg', 'setup.py', 'setupegg.py', 'test-requirements-27.txt', 'test-requirements-34.txt', 'test-requirements-36.txt', 'test-requirements-pypy27.txt', 'tests/buffers/buffer.pyx', 'tests/build/cythonize_script_package.srctree', 'tests/build/module_api.srctree', 'tests/compile/extdelslice.pyx', 'tests/compile/extsetslice.pyx', 'tests/compile/pylong.pyx', 'tests/memoryview/cythonarray.pyx', 'tests/memoryview/memoryview.pyx', 'tests/memoryview/memslice.pyx', 'tests/memoryview/numpy_memoryview.pyx', 'tests/pypy2_bugs.txt', 'tests/run/always_allow_keywords_T295.pyx', 'tests/run/async_def.pyx', 'tests/run/async_iter_pep492.pyx', 'tests/run/asyncio_generators.srctree', 'tests/run/autotestdict.pyx', 'tests/run/autotestdict_all.pyx', 'tests/run/autotestdict_cdef.pyx', 'tests/run/binop_reverse_methods_GH2056.pyx', 'tests/run/broken_exception.pyx', 'tests/run/builtin_basestring.pyx', 'tests/run/builtin_float.py', 'tests/run/builtin_memory_view.pyx', 'tests/run/builtin_next.pyx', 'tests/run/builtin_ord.pyx', 'tests/run/builtin_py3.pyx', 'tests/run/builtin_type_inheritance_T608_py2only.pyx', 'tests/run/bytearray_default_auto_encoding.pyx', 'tests/run/bytearraymethods.pyx', 'tests/run/bytes_formatting.pyx', 'tests/run/bytesmethods.pyx', 'tests/run/c_type_methods_T236.pyx', 'tests/run/callargs.pyx', 'tests/run/carray_coercion.pyx', 'tests/run/cdef_class_dataclass.pyx', 'tests/run/cdef_class_order.pyx', 'tests/run/cdef_members_T517.pyx', 'tests/run/cdef_members_binding_properties.pyx', 'tests/run/cdef_multiple_inheritance_errors.srctree', 'tests/run/cdivision_CEP_516.pyx', 'tests/run/charencoding.pyx', 'tests/run/charescape.pyx', 'tests/run/charptr_from_temp.pyx', 'tests/run/classbody_exec.pyx', 'tests/run/concatcstrings.pyx', 'tests/run/constant_folding.py', 'tests/run/constants.pyx', 'tests/run/cpdef_enums.pyx', 'tests/run/cpdef_scoped_enums.pyx', 'tests/run/cpow.pyx', 'tests/run/cpp_stl_conversion.pyx', 'tests/run/ct_DEF.pyx', 'tests/run/cyfunction.pyx', 'tests/run/cyfunction_defaults.pyx', 'tests/run/cython3.pyx', 'tests/run/cython3_no_unicode_literals.pyx', 'tests/run/datetime_cimport.pyx', 'tests/run/datetime_members.pyx', 'tests/run/datetime_pxd.pyx', 'tests/run/dict.pyx', 'tests/run/dict_getitem.pyx', 'tests/run/embedsignatures.pyx', 'tests/run/empty_builtin_constructors.pyx', 'tests/run/exectest.pyx', 'tests/run/ext_attribute_cache.pyx', 'tests/run/ext_auto_richcmp.py', 'tests/run/extra_walrus.py', 'tests/run/exttype_dealloc.pyx', 'tests/run/exttype_total_ordering.pyx', 'tests/run/fastcall.pyx', 'tests/run/for_in_iter.py', 'tests/run/funcexc_iter_T228.pyx', 'tests/run/funcexcept.pyx', 'tests/run/funcexceptchained.pyx', 'tests/run/funcexceptcypy.pyx', 'tests/run/funcexceptraise.pyx', 'tests/run/funcexceptraisefrom.pyx', 'tests/run/funcexceptreplace.pyx', 'tests/run/funcexceptreturn.pyx', 'tests/run/function_as_method_T494.pyx', 'tests/run/function_as_method_py_T494.py', 'tests/run/function_self.py', 'tests/run/fused_bound_functions.py', 'tests/run/fused_cpdef.pyx', 'tests/run/future_unicode_literals.pyx', 'tests/run/generator_frame_cycle.py', 'tests/run/generators_in_refcycles.pyx', 'tests/run/generators_pep479.pyx', 'tests/run/generators_py.py', 'tests/run/genexpr_iterable_lookup_T600.pyx', 'tests/run/index.pyx', 'tests/run/int_literals.pyx', 'tests/run/intern_T431.pyx', 'tests/run/jarausch1.pyx', 'tests/run/line_trace.pyx', 'tests/run/literal_lists.pyx', 'tests/run/literalslice.pyx', 'tests/run/modop.pyx', 'tests/run/module_init_error.srctree', 'tests/run/mulop.pyx', 'tests/run/multass.pyx', 'tests/run/new_style_exceptions.pyx', 'tests/run/non_future_division.pyx', 'tests/run/partial_circular_import.srctree', 'tests/run/pep448_test_extcall.pyx', 'tests/run/posonly.py', 'tests/run/pure_py.py', 'tests/run/py_unicode_strings.pyx', 'tests/run/qualname.py', 'tests/run/r_addint.pyx', 'tests/run/r_barbieri1.pyx', 'tests/run/r_bowden1.pyx', 'tests/run/r_hordijk1.pyx', 'tests/run/r_huss3.pyx', 'tests/run/r_mang1.pyx', 'tests/run/r_pythonapi.pyx', 'tests/run/r_vree_1.pyx', 'tests/run/reduce_pickle.pyx', 'tests/run/reimport_from_package.srctree', 'tests/run/reimport_from_subinterpreter.srctree', 'tests/run/relative_cimport_compare.srctree', 'tests/run/relative_import_leak.srctree', 'tests/run/reversed_iteration.pyx', 'tests/run/slice_charptr.pyx', 'tests/run/special_methods_T561.pyx', 'tests/run/special_methods_T561_py2.pyx', 'tests/run/str_default_auto_encoding.pyx', 'tests/run/strescapes.pyx', 'tests/run/string_comparison.pyx', 'tests/run/strliterals.pyx', 'tests/run/test_asyncgen.py', 'tests/run/test_coroutines_pep492.pyx', 'tests/run/test_exceptions.pyx', 'tests/run/test_fstring.pyx', 'tests/run/test_genericclass.py', 'tests/run/test_named_expressions.py', 'tests/run/test_raisefrom.pyx', 'tests/run/test_subclassinit.py', 'tests/run/test_unicode.pyx', 'tests/run/test_unicode_string_tests.pxi', 'tests/run/tryfinally.pyx', 'tests/run/tryfinallychaining.pyx', 'tests/run/unicode_default_auto_encoding.pyx', 'tests/run/unicode_identifiers.pyx', 'tests/run/unicode_identifiers_normalization.srctree', 'tests/run/unicode_imports.srctree', 'tests/run/unicode_slicing.pyx', 'tests/run/unicodefunction.pyx', 'tests/run/unicodeliterals.pyx', 'tests/run/unicodeliteralsdefault.pyx', 'tests/run/unicodeliteralslatin1.pyx', 'tests/run/withstat.pyx', 'tests/run/withstat_py.py', 'tests/run/withstat_py27.py', 'tests/run/yield_from_pep380.pyx', 'tox.ini']"
95ac8754cbe3c7e326e07c9e4957277318708773,2023-11-07 18:37:40,da-woods,"Add missing directives to Shadow.py (#5803)

Backport of part of 042451402cbbedbb3f6fc1b6324de880831367ff
(but only the changes to Shadow.py rather than the tests, or
changes to the scope of any directives)",['Cython/Shadow.py']
042451402cbbedbb3f6fc1b6324de880831367ff,2023-11-07 06:46:00,da-woods,"Add tests for some of the contents of Shadow.py (#5778)

* Add tests for some of the contents of Shadow.py

Mainly to confirm that all directives that should appear there
do actually appear there, and also to confirm the presence of
a few types.

* Update Cython/Tests/TestShadow.py

* Comments from review

* Fix Py2","['Cython/Compiler/Options.py', 'Cython/Shadow.py', 'Cython/Tests/TestShadow.py']"
437b9899a0daa4f908777db7589dd19adb651286,2023-11-07 06:41:27,da-woods,"Add warning about embedding + multiprocessing (#5464)

I've seen a couple of questions on this lately so I think it's worth making clear that it's a limitation (so at least people don't waste too much time when they hit problems).

I've outlined a possible solution but it's a hint - it's not something I have had time to test unfortunately.",['docs/src/tutorial/embedding.rst']
ff9e68a206ec24a497690259957bbfad097295de,2023-11-06 14:59:15,Stefan Behnel,Fix a C preprocessor condition that prevented calling PyCFunction_CheckExact() instead of PyCFunction_Check() in Py3.9+.,['Cython/Utility/ModuleSetupCode.c']
8891f10041f7c6ee98a2c1f885be88c9eec8530e,2023-11-06 12:35:50,Stefan Behnel,Remove official support for Py<3.7 from master branch.,['setup.py']
1b44017b5d8e3d10a4cdb24dd6e9a8edfd71ae1a,2023-11-06 12:34:01,Stefan Behnel,CI: Remove all Python<3.7 jobs from CI and wheel builds.,"['.github/workflows/ci.yml', '.github/workflows/wheels.yml', 'Tools/ci-run.sh']"
e23b069bd7501c7767251f0358f6158616eb9bb4,2023-11-06 12:12:20,Stefan Behnel,"Cut off 3.0.x branch and set master version to ""3.1.0a0"".",['Cython/Shadow.py']
4753b95f4f0b64be7abec2c68e97605801bc6c71,2023-11-05 20:30:01,Stefan Behnel,CI: Fix macOS/Py2.7 setup which now finds Python 3 before Python 2 in the path by default.,['Tools/ci-run.sh']
0f2a0d38b60e10e401aa1435801b2b8975083c7b,2023-11-05 09:45:07,da-woods,"Fix cpdef functions and cimport_from_pyx (#5796)

Fixes #5795","['Cython/Compiler/FusedNode.py', 'tests/run/cimport_from_pyx.srctree']"
e7e594b6bda8757f713addca36b0a5314adf533d,2023-11-04 22:20:11,Stefan Behnel,CI: Use an old 'wheel' version in old Python versions.,['Tools/ci-run.sh']
e09a032a588acdcd2972b10780fd6c1b2828efa0,2023-11-04 22:13:20,Stefan Behnel,Update changelog.,['CHANGES.rst']
8bbade2b9d563740ab21032da2e3f92d66b47343,2023-11-04 21:17:22,Stefan Behnel,Avoid useless type checks in the fused function dispatch code.,['Cython/Compiler/FusedNode.py']
e584c46beb0ca96da647e30cca55ccfbe77b35de,2023-11-04 16:31:41,Stefan Behnel,"Avoid assigning a Py_UCS4 value to a C char without cast. Instead, just use the Py_UCS4 value.

Closes https://github.com/cython/cython/issues/5794",['Cython/Compiler/FusedNode.py']
3ebcbf398471217502a9f88f00b25b879f05f041,2023-11-04 16:28:28,Stefan Behnel,Simplify some code by avoiding a long indentation.,['Cython/Compiler/FusedNode.py']
bc32b7ec3f15f532c0ae59b930544c23172e8c50,2023-11-02 08:45:52,Miro Hrončok,"Fix C++17 error: standard attributes in middle of decl-specifiers (CYTHON_UNUSED) (GH-5791)

This is only relevant on Python 3.13+

Fixes https://github.com/cython/cython/issues/5790",['Cython/Utility/FunctionArguments.c']
e6094e2211b3528f49c6c383c47fae96de3b65de,2023-11-01 15:51:36,da-woods,"Do ""dictoffset"" check as Python lookup when slot access is disabled (GH-5698)

... rather than just declaring it impossible.

Fixes https://github.com/cython/cython/issues/5696",['Cython/Utility/ExtensionTypes.c']
af1bcb445bbe99a84f249c700eed50ab5cae1b7f,2023-11-01 15:43:28,da-woods,"Stop fallback indexing code using PySequence_*Item first (GH-5777)

The integer indexing fallback behaved differently from the PyObject functions. If an object has both a sequence and a mapping API, Python prefers the mapping, and so should we (in all cases).

Fixes https://github.com/cython/cython/issues/5776 and some indexing bugs on PyPy and the Limited API.","['Cython/Utility/ObjectHandling.c', 'tests/pypy_bugs.txt', 'tests/run/index.pyx']"
8cb791ae153b1e384ba621ba13a8836a068476ae,2023-11-01 15:36:23,Andreas Poehlmann,Implement string-to-float conversion in Limited API (GH-5695),"['Cython/Utility/Optimize.c', 'tests/run/isolated_limited_api_tests.srctree']"
8a18503635fb13388826924c65dfe3f4b2b419c5,2023-11-01 10:11:36,Stefan Behnel,Fix error message in PyPy.,['tests/run/unicode_formatting.pyx']
f3f704e850ce547b0a7be5eeb3b931402699bc26,2023-11-01 08:39:04,da-woods,"Add list of tests that work with Py_LIMITED_API and make some smaller fixes (GH-5679)

Actually turn on Py_LIMITED_API for supported tests.","['Cython/Utility/ModuleSetupCode.c', 'runtests.py', 'tests/test_in_limited_api.txt']"
ade1e0a04dfc89ac435a83ad0834fa155805cd03,2023-11-01 08:18:29,Stefan Behnel,"Fix a crash when formatting a Python value fails.

Closes https://github.com/cython/cython/issues/5787","['Cython/Utility/StringTools.c', 'tests/run/unicode_formatting.pyx']"
b82455e66180c28137be2f7b83a74c5f0f38d0e4,2023-10-31 21:33:54,Stefan Behnel,docs: Help migrating away from DEF/IF.,"['docs/src/userguide/language_basics.rst', 'docs/src/userguide/migrating_to_cy30.rst']"
848eb70abb937338948d4e44ff3bb64dd42d38a4,2023-10-30 20:24:47,Stefan Behnel,Prepare release of 3.0.5.,['Cython/Shadow.py']
8778c680b5febf1764d9f7a97a0418bdf2410545,2023-10-30 19:38:17,Stefan Behnel,Update changelog.,['CHANGES.rst']
f697dec5c4b769ff3732d665c242cc809889aa1e,2023-10-30 19:46:38,Matus Valo,"Use sysconfig module instead of distutils.sysconfig for python >= 3.9 (GH-5761)

See https://github.com/cython/cython/issues/5751","['Cython/Build/BuildExecutable.py', 'Cython/Parser/ConcreteSyntaxTree.pyx']"
fd9644342c0a7af885e103677e407173428162b9,2023-10-30 09:16:46,scoder,"Adapt to C-API changes in CPython 3.13a1 (GH-5767)

This is partly preliminary but should at least unblock dependent projects.","['.github/workflows/ci.yml', 'Cython/Compiler/ModuleNode.py', 'Cython/Utility/Builtins.c', 'Cython/Utility/CommonStructures.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/Dataclasses.c', 'Cython/Utility/Exceptions.c', 'Cython/Utility/FunctionArguments.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c', 'Tools/ci-run.sh', 'tests/run/set_iter.pyx']"
526e1fc943c5768600c3aeb3fdee7051b8375318,2023-10-27 11:07:03,Stefan Behnel,"Avoid a C++ warning about needlessly casting ""const char*"" to ""char*"" in Py3.4+ and keep the old code easy to delete in Cython 3.1.",['Cython/Utility/ObjectHandling.c']
edaea23cc5a7909e84d3bd01b0a8ab2206af8e95,2023-10-24 10:54:44,Stefan Behnel,Avoid a costly Python dict creation in a function call when we'd only pass the default argument.,['Cython/Utility/TypeConversion.c']
f0d2a1a1037dca87c85b17822f0b46838c0fb7a2,2023-10-24 10:52:58,Stefan Behnel,Minor cleanup and comments.,['Cython/Utility/TypeConversion.c']
06870068a5378d4c4c5d237351ea2a161d9f55cf,2023-10-24 10:52:00,Stefan Behnel,Cleanup: Free Python objects in opposite allocation order in order to reduce the risk of temporary memory fragmentation.,['Cython/Utility/TypeConversion.c']
1ef3c9d0e6d217747503aafe4a76fd2162955d77,2023-10-22 17:15:05,Stefan Behnel,Fix an incorrect macro usage as version check.,['Cython/Utility/ObjectHandling.c']
57ae78d8a8ca6ffe277d64bb31428b75254d45b2,2023-10-22 16:27:00,Pierre Jolivet,"Fix a C function prototype warning (#5780)

src/petsc4py/PETSc.c:563230:49: warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
  static unsigned long __Pyx_get_runtime_version() {
                                                ^
                                                 void
1 warning generated.",['Cython/Utility/ModuleSetupCode.c']
98e5b9b0229bf2b9cad8e485dcebb2f9c0eacee6,2023-10-22 10:15:12,Stefan Behnel,Update changelog.,"['CHANGES.rst', 'Cython/Shadow.py']"
f7c7d634cf2504fa2fc72c8960d5e975afff73af,2023-10-22 09:58:28,Stefan Behnel,Tests: Show runtime percentage of pipeline stages.,['runtests.py']
abb24e1d0858a33c496105347816a821ce5e6d36,2023-10-22 09:51:08,Stefan Behnel,Reorder imports in test runner.,['runtests.py']
1b2b8a222700401160929f19c96e9d9ecbc43c2d,2023-10-22 09:29:06,da-woods,"Fix a crash and test memoryview indexing performance_hint (GH-5773)

Closes https://github.com/cython/cython/issues/5771","['Cython/Compiler/ExprNodes.py', 'tests/memoryview/memoryview.pyx']"
a272c6261a07b3b6b5ecf84dc79129453267aca9,2023-10-19 20:47:08,Stefan Behnel,Do not risk using an uninitialised variable.,['runtests.py']
3780a03c18195eeb277a2b7605c33f9c8c18dcf9,2023-10-19 18:59:38,lk-1984,Fix always_allow_keywords typo Cython/Shadow.py (#5774),['Cython/Shadow.py']
5cd515a709670f35903cf9eb76892a1513ac6899,2023-10-19 09:50:02,Stefan Behnel,"Fix a Schrödinbug where a name (""default_options"") was used that was never imported.",['runtests.py']
575641ce11979ff80ff87a19b6a66d1eeb009697,2023-10-17 20:21:04,Stefan Behnel,Merge branch 'master' of git+ssh://github.com/cython/cython,"['docs/examples/userguide/memoryviews/add_one.py', 'docs/examples/userguide/memoryviews/copy.py', 'docs/examples/userguide/memoryviews/copy.pyx', 'docs/examples/userguide/memoryviews/cpython_array.py', 'docs/examples/userguide/memoryviews/cpython_array.pyx', 'docs/examples/userguide/memoryviews/cython_array.py', 'docs/examples/userguide/memoryviews/cython_array.pyx', 'docs/examples/userguide/memoryviews/memory_layout.py', 'docs/examples/userguide/memoryviews/memory_layout.pyx', 'docs/examples/userguide/memoryviews/memory_layout_2.py', 'docs/examples/userguide/memoryviews/memory_layout_2.pyx', 'docs/examples/userguide/memoryviews/memview_to_c.pxd', 'docs/examples/userguide/memoryviews/memview_to_c.py', 'docs/examples/userguide/memoryviews/memview_to_c.pyx', 'docs/examples/userguide/memoryviews/not_none.py', 'docs/examples/userguide/memoryviews/not_none.pyx', 'docs/examples/userguide/memoryviews/old_sum3d.pyx', 'docs/examples/userguide/memoryviews/quickstart.py', 'docs/examples/userguide/memoryviews/quickstart.pyx', 'docs/examples/userguide/memoryviews/slicing.py', 'docs/examples/userguide/memoryviews/slicing.pyx', 'docs/examples/userguide/memoryviews/transpose.py', 'docs/examples/userguide/memoryviews/transpose.pyx', 'docs/src/userguide/memoryviews.rst']"
bd5a82f0982288b9334e29357c4c19f661cac373,2023-10-17 19:41:44,Stefan Behnel,"Disable a test that crashes on i686.
See https://github.com/cython/cython/issues/5768",['tests/bugs.txt']
8464fb964627892af379cd998693b81e8e43afe0,2023-10-17 17:12:44,Matus Valo,"[Docs] Migrate memoryviews userguide to Pure python (#5658)

Co-authored-by: da-woods <dw-git@d-woods.co.uk>
Co-authored-by: scoder <stefan_ml@behnel.de>","['docs/examples/userguide/memoryviews/add_one.py', 'docs/examples/userguide/memoryviews/copy.py', 'docs/examples/userguide/memoryviews/copy.pyx', 'docs/examples/userguide/memoryviews/cpython_array.py', 'docs/examples/userguide/memoryviews/cpython_array.pyx', 'docs/examples/userguide/memoryviews/cython_array.py', 'docs/examples/userguide/memoryviews/cython_array.pyx', 'docs/examples/userguide/memoryviews/memory_layout.py', 'docs/examples/userguide/memoryviews/memory_layout.pyx', 'docs/examples/userguide/memoryviews/memory_layout_2.py', 'docs/examples/userguide/memoryviews/memory_layout_2.pyx', 'docs/examples/userguide/memoryviews/memview_to_c.pxd', 'docs/examples/userguide/memoryviews/memview_to_c.py', 'docs/examples/userguide/memoryviews/memview_to_c.pyx', 'docs/examples/userguide/memoryviews/not_none.py', 'docs/examples/userguide/memoryviews/not_none.pyx', 'docs/examples/userguide/memoryviews/old_sum3d.pyx', 'docs/examples/userguide/memoryviews/quickstart.py', 'docs/examples/userguide/memoryviews/quickstart.pyx', 'docs/examples/userguide/memoryviews/slicing.py', 'docs/examples/userguide/memoryviews/slicing.pyx', 'docs/examples/userguide/memoryviews/transpose.py', 'docs/examples/userguide/memoryviews/transpose.pyx', 'docs/src/userguide/memoryviews.rst']"
f472900b1c9dbe560a40ba435f6b06aa1437fe7b,2023-10-16 16:45:51,Stefan Behnel,Prepare release of Cython 3.0.4.,['Cython/Shadow.py']
cc0d167a0b82aecbfdb77c6914e3d1b512365ab4,2023-10-16 16:45:24,Stefan Behnel,Update changelog.,['CHANGES.rst']
6940b347d5f86874b882107ad468ea31cc097c84,2023-10-16 09:19:05,Stefan Behnel,Use relative import instead of a global one to make sure we end up in the same package.,['Cython/Compiler/Options.py']
0000fb4c319ef8f7e8eabcc99677f99a8c503cc3,2023-10-16 09:16:47,Stefan Behnel,"Avoid importing distutils/setuptools from 'cythonize' unless we really need it for binary builds.

See https://github.com/cython/cython/issues/5751",['Cython/Build/Cythonize.py']
63aa4ef46e0c5f6aeb1eeab5f450efc3e00246be,2023-10-11 07:19:19,da-woods,"Allow disabling performance hints via a directive rather than an Option (GH-5762)

Closes https://github.com/cython/cython/issues/5757
Supersedes https://github.com/cython/cython/pull/5759","['Cython/Compiler/Errors.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'docs/src/userguide/source_files_and_compilation.rst', 'tests/run/nogil.pyx']"
d508f8e4853adf69a77f9ef55ab398d3ecacc56c,2023-10-09 19:54:17,da-woods,"Fix regression in 3.0.3 with inline functions in pxd files calling other functions  (GH-5752)

Closes https://github.com/cython/cython/issues/5748","['Cython/Compiler/Symtab.py', 'tests/run/inlinepxd.pyx', 'tests/run/inlinepxd_support.pxd']"
5e4c7ac4b163b48b850381e069db1be2a02c9c19,2023-10-09 16:33:47,Stefan Behnel,"docs: Remove usage of outdated ""system_packages"" option.
See https://blog.readthedocs.com/drop-support-system-packages/",['.readthedocs.yaml']
f4b10ff9ae8fd9037718e8a4fa9675ee52c488ed,2023-10-09 16:24:59,Pierre Jolivet,Fix an incorrect C declaration and an unguarded macro reference (found by gcc -Wundef -Wstrict-prototypes) (GH-5756),"['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ModuleSetupCode.c']"
459f7c6236b7507b664703e6a20aafafe22f8a21,2023-10-05 07:53:35,Stefan Behnel,Officially support Python 3.12 (knowing that profiling is still broken there).,['setup.py']
8dc55934d29a36b056abe93f785a8d4cb0add4bd,2023-10-05 07:50:50,Stefan Behnel,"CI: Update workflow to use released Python 3.12.

Closes https://github.com/cython/cython/pull/5745",['.github/workflows/ci.yml']
263c71901a4ce7446f2df89ee6383456321cce36,2023-10-05 07:28:19,Stefan Behnel,Prepare the release of Cython 3.0.3.,"['CHANGES.rst', 'Cython/Shadow.py']"
73f872bb76eba3f3ab8f0c2f6b5bbca1356fe3de,2023-10-05 06:43:32,Yaroslav Halchenko,Fix some typos found by codespell 2.2.5 (GH-5626),"['.codespellrc', 'Cython/Compiler/Nodes.py', 'docs/examples/tutorial/memory_allocation/some_memory.py', 'docs/examples/tutorial/memory_allocation/some_memory.pyx', 'docs/src/userguide/source_files_and_compilation.rst', 'runtests.py']"
9d18c526d4da293108e23585183376dcd4d257c9,2023-10-04 18:58:35,da-woods,"Fix issue with mixed-type ""x if y else z"" expressions (#5735)

To do with coercions of `CondExprNode`","['Cython/Compiler/ExprNodes.py', 'tests/run/if_else_expr.pyx']"
ed2933b3f679a90a03a83ae446931a6071cdc381,2023-10-04 06:54:33,scoder,"Clean up special handling of PyCFunction and CyFunction (GH-5739)

This avoids crashes in debug mode where CPython's access functions assert a type check (which fails for CyFunction).
Avoid excluding CyFunction from the fast-call fast-paths for 0/1 args in Python debug mode. Also include the 1-arg (METH_O) case in the optimisation - I cannot see a reason why only 0-args should be special-cased for CyFunction.
Fix a bug in __Pyx_TryUnpackUnboundCMethod() where we checked for ""defined(CYTHON_COMPILING_IN_PYPY)"" (which is always true) instead of the defined 0/1 value.

It's probably ok to apply the unpacking of unbound methods to any PyCFunction, including subclasses.
Due to a bug, we weren't doing the type check at all before, which meant that PyCFunction_GET_SELF() could actually fail and we'd ignore the error.","['Cython/Compiler/Nodes.py', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c']"
18d3e8e26eb505463e3ad8010dbc1bcffd3a999d,2023-10-04 06:43:18,Stefan Behnel,Suppress a spelling false positive found by codespell.,['.codespellrc']
f963e2e96b321bfe32cd614d6b308df2b8763558,2023-10-04 03:33:00,Stefan Behnel,Fix some spelling mistakes found by codespell.,"['.codespellrc', 'pyximport/_pyximport2.py', 'pyximport/_pyximport3.py', 'tests/run/purecdef.py']"
1f5d6a7042727c2cdd63217749e979113aab70a4,2023-10-03 09:43:32,Matus Valo,Allow `--cplus` argument in cythonize command (GH-5736),['Cython/Build/Cythonize.py']
61b57062e302e62efb393b8c9f8fe712d9d5c721,2023-10-02 09:09:18,Vyas Ramasubramani,"C++: Add ""reference_wrapper"" declarations to ""libcpp.functional"" (GH-5671)","['Cython/Includes/libcpp/functional.pxd', 'tests/run/cpp_stl_cpp11.pyx']"
1aaabe793eb4e7a826b9129255cd19d769c8f497,2023-10-02 08:53:32,Stefan Behnel,"Fix ""unused variable"" C compiler warning in Limited API.",['Cython/Utility/ModuleSetupCode.c']
52565b22201432c138f04c979a86d68970bd073a,2023-10-02 00:53:00,da-woods,"Fix mistake acquiring GIL while generating closure functions (GH-5738)

It didn't need to acquire the GIL here unless lenv.nogil is
set (since while it needs the GIL, it already has it).",['Cython/Compiler/Nodes.py']
7ec8ac7a771c517c9ab640e5e7fa4a52c5e9cc08,2023-09-30 07:26:59,da-woods,Avoid C warning about unused fastcall_fallback (#5734),['Cython/Utility/ObjectHandling.c']
32f99dd4f683e3c424314c8b9b4f331813c4e473,2023-09-29 19:16:29,Stefan Behnel,Update changelog.,['CHANGES.rst']
401e880a336576b765e5d6bb1a9718947243d92b,2023-09-29 10:11:22,da-woods,"Show performance hints for nogil functions requiring exception checks (GH-5673)

Performance hints come out similar to warnings but do not make `-Werror` fail.","['Cython/Compiler/Errors.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Scanning.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/TreeFragment.py', 'Cython/Compiler/UtilityCode.py', 'runtests.py', 'tests/run/nogil.pxd', 'tests/run/nogil.pyx', 'tests/run/nogil_other.pxd']"
b622247a2dd86ba3784299e7a8ef6ef1ae9c91b0,2023-09-29 10:04:01,da-woods,"Fixup a refnanny-related performance regression (GH-5685)

Originally reported in https://github.com/scikit-learn/scikit-learn/issues/27086

Essentially:
* I'd made functions raising an exception require refnanny even
  since prange/parallel block exception handling required it
* I actually don't think this is sufficient and that there's other
  ways of raising an exception within a parallel block.
* The upshot is that *any* function with a call to a function with
  a checked exception now requires refnanny.
* For functions with object arguments (i.e. any cdef class method)
  that leads to the GIL always being acquired around the refnanny
  setup (even when refnanny is disabled).

I've fixed it by avoiding using refnanny in parallel blocks unless we
know it's available and has actually been used in the generated code.
I think it's too hard to tell reliably ahead of time.","['Cython/Compiler/Code.pxd', 'Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/run/gil_in_var_initialization_tests.pyx']"
15a5897c1e5b2d54bd0af0a39a89c2e6e233a0af,2023-09-29 10:01:05,Stefan Behnel,Fix copy-paste bug.,['Cython/TestUtils.py']
09bb9e1208a9dff2305d6bbba8803823b6386e05,2023-09-28 09:58:47,Stefan Behnel,Tests: Improve C code validation to support start and end section patterns.,"['Cython/TestUtils.py', 'Cython/Tests/TestTestUtils.py', 'tests/run/c_file_validation.srctree']"
0f9a74693b6203813ddff0218c77532de307eec0,2023-09-26 16:18:05,Matus Valo,"Fix relative cimport when package contains only `__init__.py` (#5723)

Closes #5715","['Cython/Compiler/Main.py', 'tests/run/relative_cimport.srctree']"
93935d431f7a80976bee2d2f757a639c67a326dc,2023-09-26 11:30:31,Sebastian Koslowski,"Fix macro redefintion warning (#5726)

This fixes a warning (C4005). When using MSVC the macro `__pyx_nonatomic_int_type` is already defined above",['Cython/Utility/MemoryView_C.c']
2f3236d4978189a3f16a32a56a36e36cda2e03c8,2023-09-26 09:08:54,Eric T. Johnson,"Release references to traceback objects in Python 3.12+ (GH-5725)

Closes https://github.com/cython/cython/issues/5724",['Cython/Utility/Exceptions.c']
9827c6085e2141db71c55ae231a4a09a878dd524,2023-09-23 06:09:04,Oleksandr Pavlyk,"Fix Out of bounds access in Coverity reported issue (GH-5717)

In `__Pyx_PyObject_CallNoArg`, the call to `__Pyx_PyObject_FastCall()` passed a pointer just behind a value. It should use a 2-args array instead to correctly point to a valid memory area.",['Cython/Utility/ObjectHandling.c']
051dfc06e303a1680f6111eca00dd816fde9325e,2023-09-19 09:38:34,Stefan Behnel,"Add a more helpful error message to ""Cython.Distutils.build_ext"" when distutils is missing in Python 3.12 and setuptools is not installed (which could replace it).",['Cython/Distutils/build_ext.py']
f39800c6d21c200fc664c56ec0c092663bb4e3b2,2023-09-19 08:27:22,Stefan Behnel,"cythonize: Postpone the distutils import until we know that we really need it. It's no longer available in Python 3.12 (for which we still need a work-around).

Closes https://github.com/cython/cython/pull/5693/","['Cython/Build/Dependencies.py', 'Cython/Build/__init__.py']"
a4c13a0e88e8ea0d40cb8202157145bf56dfec88,2023-09-19 07:58:31,Stefan Behnel,"Re-add 'true' and 'false' as ""np_python"" option values. They were previously allowed but lost when requiring ""True"" and ""False"".",['Cython/Build/Dependencies.py']
d2f3f54a61df33f6a649c329d5ed103a1fcc77c4,2023-09-19 07:51:40,Stefan Behnel,"cythonize: Make sure that we catch both distutils and setuptools ""Extension"" instances when looking for module patterns.",['Cython/Build/Dependencies.py']
96f2ba852e1cb59b3bbbcc6f0fd5da7b7f704a1f,2023-09-19 07:33:33,Stefan Behnel,"Tighten the allowed values of the ""np_python"" option to 'True' and 'False' (which is what we allow for all other boolean options as well). Raise a DeprecationWarning for everything else. Stop depending on distutils for the evaluation (which is gone in Py3.12).",['Cython/Build/Dependencies.py']
ba21b270f5b8ea3f63b37810d4d957b4cebf8405,2023-09-14 20:26:33,Stefan Behnel,Fix pre-version number.,['Cython/Shadow.py']
13cb753acf098ed4698f91e1d449e9b1c3b01e0a,2023-09-14 20:13:14,Stefan Behnel,Update changelog.,['CHANGES.rst']
b6d5c87cb81f22ef7f462c416199e0885b05ad67,2023-09-14 18:44:44,Stefan Behnel,Set version to pre-3.0.3.,['Cython/Shadow.py']
72172c6beee5dec3539f79fddffee6ec97d5db1d,2023-09-14 06:33:33,Oleksandr Pavlyk,"Skip building trees for nodes with invalid tag name (GH-5690)

This change excludes arguments with invalid tag names from being inserted into the TreeBuilder.
This previously lead to failures when using lxml for the XML writing, which validates these tag names.

Closes https://github.com/cython/cython/issues/5552
Closes https://github.com/cython/cython/issues/5686",['Cython/Debugger/DebugWriter.py']
07f383a7b9f04ab220fc58db0de3be4a65df0ec3,2023-09-13 05:39:54,Stefan Behnel,Fix code style issue.,['Cython/Tests/TestCythonUtils.py']
2b6f1a68b60206452a2e42cd7438c720b903fc04,2023-09-12 18:59:29,Stefan Behnel,Fix sign of input argument in C-API call.,['Cython/Utility/ObjectHandling.c']
11b845c2bc1574ac1562c717691ba46360c6b9b3,2023-09-12 18:57:25,Stefan Behnel,Fix mismatch in float normalisation for 0.0 -> .0 vs. 0.,"['Cython/Tests/TestCythonUtils.py', 'Cython/Utils.py']"
c95eebbfdbd9b246f00b97b69696946c37443b8b,2023-09-12 18:11:51,Stefan Behnel,Reduce chance of false positives when warning about loss of floating point precision with DEF.,"['Cython/Compiler/ExprNodes.py', 'Cython/Tests/TestCythonUtils.py', 'Cython/Utils.py']"
a1573bc8aae7d046f982b5cd6846d3b5287a5e97,2023-09-12 09:48:20,da-woods,"Fix invalid fastcall dict when keywords are passed (GH-5675)

We're passing a dict where we should be passing a tuple of names.

The replacement should hopefully be right, but I don't know how optimized or otherwise it is. It prevents a crash in the previous code, so we don't lose anything.

Closes https://github.com/cython/cython/issues/5665",['Cython/Utility/ObjectHandling.c']
ce1aa59ab6300e18e50c752b5c9e28a04b665060,2023-09-10 18:25:08,Frederik Dyrmose,Update description of how to set flags for OpenMP with MSVC (#5580),['docs/src/userguide/parallelism.rst']
1078cc635c164b594f4eff8c2fdc401412b8f0e7,2023-09-05 03:57:56,Stefan Behnel,"Clean up the inclusion of ""<string.h>"" since we now basically require it. Make sure it is always available, but try to include it as late as possible in the C code, after user code.
Also use a safer strlen() when converting C strings to Python unicode strings and bytearrays that raises an exception on length overflow.","['Cython/Compiler/Optimize.py', 'Cython/Utility/ImportExport.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c']"
94940ab5d6f4949073e113d9e54aa921743b9f3e,2023-09-09 17:47:33,scoder,"Implement a better check for the import time Python version (GH-5691)

The compile time Python version is allowed to be older when using the Limited API / stable ABI.

Closes https://github.com/cython/cython/pull/5689","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/compare_binary_pyversions.pyx']"
dd62cba7a4039a1c15f147c98c7669ab64cbaee6,2023-09-09 14:21:24,scoder,"Simplify the handling of immediate (and highly unlikely) failures when entering a Python function wrapper. (GH-5682)

Returning immediately instead of going through the error label (and creating a traceback) avoids a potentially unused label (due to preprocessor guards).

Closes https://github.com/cython/cython/issues/5681","['Cython/Compiler/Nodes.py', 'tests/run/always_allow_keywords_T295.pyx', 'tests/run/callargs.pyx']"
ac390ce954297a52d537f0f3fb9d2aade296c951,2023-09-09 10:11:49,Stefan Behnel,"Lower the deprecation level for ""DEF"" to docs-only but keep the warning for ""IF"", as described in
https://github.com/cython/cython/issues/4310#issuecomment-1702887983","['Cython/Compiler/Parsing.py', 'tests/run/ct_DEF.pyx', 'tests/run/ct_IF.pyx']"
69fb06398cee13c949fe042829d027ff3399d523,2023-09-08 07:10:57,Stefan Behnel,"Use a better example for the ""IF"" conditional compilation statement than platform adaptation.",['docs/src/userguide/language_basics.rst']
beaf3f4265f138f17ac28f396ec0f191998d624b,2023-09-05 03:41:59,Stefan Behnel,"Leave a note in the documentation that ""DEF"" does not pass literals through into the C code and instead handles them as plain Python values.",['docs/src/userguide/language_basics.rst']
cd9dae0cab2f6267e18d11d66b63ca2a86db5fe4,2023-09-04 13:59:15,Stefan Behnel,"Re-enable tests in Python 2.x after accidentally skipping them when adding the ""limited-api"" tag in 4df7e67000575b42183735fabbbec5a5bdc01465.

See https://github.com/cython/cython/issues/5659",['runtests.py']
6ba3daf319d94058de74e8e7f53f932092b38441,2023-09-04 07:45:47,scoder,"Make for-loops work in the Limited C-API. (GH-5672)

Closes https://github.com/cython/cython/issues/5641","['Cython/Compiler/ExprNodes.py', 'tests/run/isolated_limited_api_tests.srctree']"
cf190b0dcb547520df0dc817d966b61a3ec3f02e,2023-09-04 07:42:03,Matus Valo,"Skip acquiring the GIL around __PYX_XCLEAR_MEMVIEW() at function exit (GH-5678)

The macro acquires it more efficiently itself if needed.

Closes https://github.com/cython/cython/issues/5670","['Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py']"
8d20040844dbff3e8113fe2d7fb96312fd72cb9e,2023-09-03 09:05:56,da-woods,"Fix bytes/bytearray decode in limited API (#5676)

closes #5648","['Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c', 'tests/run/isolated_limited_api_tests.srctree']"
2195767f299f6279fc07317ce4a938e6e11cafdc,2023-09-01 15:58:24,Stefan Behnel,"Add a warning when Cython's DEF compile time value processing loses precision on floating point literals due to re-serialisation.

This detects code where the user code assumes a higher precision than the C code, like in https://github.com/cython/cython/issues/4310#issuecomment-1702921523","['Cython/Compiler/ExprNodes.py', 'tests/run/ct_DEF.pyx']"
36a741a10db8114c1eca1753aea7be92c5f3a639,2023-08-31 13:57:13,Oleksandr Pavlyk,"Pad __pyx_callargs with NULL pointer to avoid passing an out-of-bounds pointer in the no-args case. (GH-5669)

This change resolves an issue reported by the Coverity scanner when calling into _Pyx_PyObject_FastCall().
This might be considered a false-positive because we correctly pass the argument length, but it has at least a code smell to pass a pointer that is just behind an array, and thus points to invalid memory.

Closes https://github.com/cython/cython/issues/5668",['Cython/Compiler/ExprNodes.py']
42dddd74041d9f7d10ea3597969d324299e3d296,2023-08-31 10:05:55,Ralf Gommers,"Avoid null comparison C compiler warning visible with gcc 12 (GH-5667)

The older workaround was added in commit https://github.com/cython/cython/commit/12bbe5f3d209d5c8e2d5a6a89f94d97fbb33d78f. Since `strchr()` may return `NULL`, I don't see a reason here not to check for that the regular way. This fixes the warnings I'm seeing in the SciPy build.

Closes https://github.com/cython/cython/issues/5663",['Cython/Utility/ImportExport.c']
66b7561dd63c7622dd35011d76cf632d6640a3e7,2023-08-29 17:40:42,da-woods,"Define thread_local for C++ (#5640)

Since it's available as a standard feature from C++11",['Cython/Utility/ModuleSetupCode.c']
c2e72233f22a488aa869c300b38a946f7cf82804,2023-08-29 17:28:48,xzmeng,"Fix typos in documentation (#5666)

* fix a typo in userguide/extension_types.rst

* fix a typo in tutorial/embedding.rst","['docs/src/tutorial/embedding.rst', 'docs/src/userguide/extension_types.rst']"
df4c9a4c159af0ad30369501ec80392fcc8b6ab6,2023-08-29 07:00:38,Matus Valo,"Warn about unknown memoryview types in annotations (GH-5664)

Closes https://github.com/cython/cython/issues/5650","['Cython/Compiler/ExprNodes.py', 'tests/errors/pure_warnings.py']"
4df7e67000575b42183735fabbbec5a5bdc01465,2023-08-28 06:33:07,Matti Picus,"Skip tests with ""limited-api"" tag on non-CPython (GH-5660)

Closes https://github.com/cython/cython/issues/5659","['runtests.py', 'tests/run/isolated_limited_api_tests.srctree']"
5708465aea47830684d04110bc0b2ac4a98b0bed,2023-08-27 20:56:13,Stefan Behnel,"Tests: Set the ""CYTHON_LIMITED_API"" macro via distutils defines as for other macros, not via CFLAGS option.",['runtests.py']
1cde6233a58538c146a16adcb38496c8e81b0b78,2023-08-27 17:06:57,Stefan Behnel,"Mark a variable as unused that is only used in Py<3.12.

Closes https://github.com/cython/cython/issues/5651",['Cython/Utility/Exceptions.c']
fc5b199fcec1db0922364d351203a7d5205a4ca1,2023-08-27 07:40:57,Stefan Behnel,Prepare release of 3.0.2.,"['CHANGES.rst', 'Cython/Shadow.py']"
e4c70439ada81536d0c996554ee6481dbfa63911,2023-08-27 05:07:03,Stefan Behnel,Minor code cleanup.,['Cython/Compiler/Nodes.py']
96390aef239d5c3fcd7c2a6b2d3d951e28d3e0b1,2023-08-27 07:38:25,Vyas Ramasubramani,"Move an enum class macro before the types block which might need it (GH-5656)

When a scoped enumeration appears in the declaration of a method of a cdef class, the C++ declaration of the method currently appears before the necessary macro is defined. This change moves that declaration to a different section that is always before type declarations.

Closes https://github.com/cython/cython/issues/5637","['Cython/Utility/CppSupport.cpp', 'tests/compile/cppenum.pyx']"
0bdfb97f905520e778a169146d54007836fd678f,2023-08-27 04:57:08,Vyas Ramasubramani,Fix typo in declaration (GH-5655),['Cython/Compiler/Nodes.py']
351e13cab0ff4d5aae7289e859f0f7a62cb70ca1,2023-08-26 20:43:25,scoder,"Avoid useless runtime type checks when coercing a None default argument to a Python type argument. (GH-5652)

For Python int (which we turn into a plain Python object type internally to avoid Py2 int/long issues), we previously generated a type check which made the None default argument much more complex than it was.

Closes https://github.com/cython/cython/issues/5643","['Cython/Compiler/ExprNodes.py', 'tests/run/default_optional_gh5643.py']"
584078a371ef412554a2cd0b96fcc20fb3b9c476,2023-08-26 19:32:50,Stefan Behnel,"Avoid using an unescaped name in the code (however unlikely it is that someone redefines ""i"", but why take the risk...).",['Cython/Compiler/Nodes.py']
61535cf93cb76efac3d8f18a5e105301a8e13be3,2023-08-26 19:06:19,scoder,"Fix invalid C code with -DCYTHON_CCOMPLEX=0 when assigning a simple (integer) default value to a fused type generated complex argument (which ends up as a struct). (GH-5653)

Fix invalid C code with `-DCYTHON_CCOMPLEX=0` when assigning a simple (integer) default value to a fused type generated complex argument (which ends up as a struct).

Closes https://github.com/cython/cython/issues/5644","['Cython/Compiler/FusedNode.py', 'tests/run/fused_types.pyx', 'tests/run/fused_types_complex.pyx']"
0870f6b1904381e9211ccc97208455eac7af2660,2023-08-26 19:03:40,Stefan Behnel,Fix test in Py2.,['tests/run/fused_types.pyx']
310720fdeff34e20b33af02f57451da7b4701f9b,2023-08-26 15:53:21,Stefan Behnel,Convert a test to language_level=3.,"['tests/run/fused_types.pyx', 'tests/testsupport/cythonarrayutil.pxi']"
7c3d175babbc59880b1b6cf5d9d01c14c504f442,2023-08-26 14:45:11,Maroš Telka,"Remove useless shebang in Cython/Build/Cythonize.py (GH-5647)

It uses relative imports and cannot simply be run as script file (only using `python3 -m …`).

Closes https://github.com/cython/cython/issues/5646",['Cython/Build/Cythonize.py']
f34e0bbdda035271bd943f116bddfb22e526c1a3,2023-08-25 18:44:01,Stefan Behnel,Fix C99-ism and replace it with a C89 declaration.,['Cython/Compiler/Nodes.py']
6884db138e18284db1f96012f9a3ebb959859ab0,2023-08-25 07:58:40,Stefan Behnel,Exclude some tests from codespell that use non-UTF8 (or broken) encodings.,['.codespellrc']
36670047e3aa8b652ecaad08bcf4971196f34f6b,2023-08-25 06:48:16,Stefan Behnel,Merge branch 'master' of git+ssh://github.com/cython/cython,['Cython/Compiler/ExprNodes.py']
a50702bb26a7f63a02fb4b63272b2acc5c85f667,2023-08-25 05:55:46,da-woods,"Remove untrue comment

Added in b551a50ae841c7a3c11c3d448a9f938bf3e0cc6a. It referred to a previous attempt at the implementation which ultimately wasn't used.",['Cython/Compiler/ExprNodes.py']
d0043cf62ead48a79d6bf3e5ae0457b75b75a275,2023-08-24 18:01:27,Stefan Behnel,Update changelog.,['CHANGES.rst']
29e07fdc34a15a63f1f68258a4501021501aa20c,2023-08-24 17:18:47,Stefan Behnel,Prepare release of 3.0.1.,"['CHANGES.rst', 'Cython/Shadow.py']"
5c5f247c97e56f54d7684f9a1f675cbdf25dd1fe,2023-08-24 17:01:11,Stefan Behnel,Update changelog.,['CHANGES.rst']
0e1955684d9193a15325af3f95e50825c6edb0e8,2023-08-24 16:55:33,Stefan Behnel,"Fix spelling of ""delimeters"" argument in Tempita to ""delimiters"", but keep a legacy fallback (with deprecation warning) at the main API level.

See discussion in https://github.com/cython/cython/pull/5608
Closes https://github.com/cython/cython/pull/5627",['Cython/Tempita/_tempita.py']
b531e6d93b29bdba6ef98b457e0b0bead281e322,2023-08-24 16:37:46,Stefan Behnel,Update changelog.,['CHANGES.rst']
b551a50ae841c7a3c11c3d448a9f938bf3e0cc6a,2023-08-24 16:35:15,da-woods,"Get some minimal cdef classes working with `Py_LIMITED_API` (GH-5617)

Includes fixes for auto-pickling at least empty classes.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Optimize.py', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/FunctionArguments.c', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/isolated_limited_api_tests.srctree']"
c6e8032e2967bd52113c3248b246c902aee90516,2023-08-24 06:58:24,da-woods,"Switch __pyx_buffmt_parse_array to return an int (#5603)

Since we're returning a borrowed reference to None just for the
sake of returning a success flag, and that's needlessly confusing.

See #5598",['Cython/Utility/Buffer.c']
ce543ff517ecb64426024eb75dcfc5c7771eba2b,2023-08-23 10:56:55,Stefan Behnel,"Add a test for memory view types used in PEP-526 variable annotations and check that they still allow None, even though arguments won't.",['tests/memoryview/memoryview_annotation_typing.py']
74cb58f70a9cbeba7b0d2ce58bf5f619cb9f8026,2023-08-23 10:44:39,Stefan Behnel,Update changelog.,['CHANGES.rst']
4d31b98daec1fbe7d595052e7cadb71699b9c2f3,2023-08-23 10:42:07,Matus Valo,"Add support for `typing.Optional[]` to memoryviews and disallow passing `None` without it (GH-5622)

This is a backwards incompatible change that matches the intention of Cython 3.0 to make argument values safer.

Closes https://github.com/cython/cython/issues/5612","['Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/errors/e_typing_errors.pyx', 'tests/errors/e_typing_optional.py', 'tests/memoryview/memoryview_annotation_typing.py']"
fbe8f94e211bba0d5d07060b742d97e93e7866e6,2023-08-22 07:48:38,Stefan Behnel,Update changelog.,['CHANGES.rst']
37756faa8353e506842e12c7dcb5fcf586a5eec6,2023-08-22 06:00:23,da-woods,"Avoid creating const members in closure structs (#5576)

* Avoid creating const members in closure structs

Fixes #5558 and hopefully #5333

* Make test return generator expression

Stops any optimizations destroying the validity of the test

* Factor remove_cv_ref into a utility code function

* Reverse the test","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/TypeInference.py', 'tests/run/cpp_iterators.pyx']"
821df73db5a179ce65adb9c8de31fb2a74accfa1,2023-08-22 05:59:58,da-woods,"Fix attribute lookup of standard library names (#5537)

* Fix attribute lookup of standard library names

The attributes were accidently being converted to NameNode
instead. The tests weren't picking this up because the names
were available so were being looked up successfully.

Fixes #5536

* Update Cython/Compiler/Builtin.py

* improve tests","['Cython/Compiler/Builtin.py', 'Cython/Compiler/ExprNodes.py', 'tests/run/pep526_variable_annotations.py']"
552c5254146a5e3947cdcca9f1140be64f6085e6,2023-08-21 20:03:57,Matus Valo,"Make sure that relative cimports stay within the package and do not search globally (#5538)

Previously, it could happen that a relative import from a local source copy found a module from a globally installed package instead, thus potentially mixing versions and leading to difficult to understand misbehaviour.

Closes https://github.com/cython/cython/issues/5511
First reported in https://github.com/scipy/scipy/issues/18792","['Cython/Compiler/Main.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/TreeFragment.py', 'Cython/Compiler/UtilityCode.py', 'tests/run/relative_import_leak.srctree']"
b480ae632003d50bc42e8df455dd2df897e1fe6b,2023-08-21 19:46:25,da-woods,"Use NULL as default exception value for pointer return types (GH-5593)

Previously, we returned `0` from such functions but callers did not consider it the exception return value and always checked for exceptions instead. Now, `NULL` is the official exception return value and callers can optimise for it.

Closes https://github.com/cython/cython/issues/5592","['Cython/Compiler/PyrexTypes.py', 'tests/run/exceptionpropagation.pyx']"
3c54aad4698a5ac9f5febeea1f1fdbf543a22790,2023-08-21 19:42:59,da-woods,"Fix issues with parallel/exception checked functions (#5577)

* Fix issues with parallel/exception checked functions

Essentially the problem is that a `nogil` function just promises
that the function *can* be called without the GIL, not that
it actually doesn't have the GIL.

If you call `prange`/`parallel` inside that function while still
holding the GIL, if any thread has finished the GIL will be held
(... I think it's probably more of a mess than this, but mostly
you get away with it...). If a thread is still running and tries
to acquire the GIL then it'll deadlock permenantly.

I've solved this by adding an implicit `with nogil` around any
`prange`/`parallel` that's in a `nogil` block but isn't
certain that it has the GIL.

Fixes #5573 and #5564.

* Add extra field in pxd

* Separate comment","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ParseTreeTransforms.pxd', 'Cython/Compiler/ParseTreeTransforms.py', 'tests/run/parallel.pyx', 'tests/run/sequential_parallel.pyx']"
578fe2bee5a17520e62a538abe6764867bf13cc8,2023-08-21 19:40:06,da-woods,"Fix reference counting of memoryview arguments to special functions (GH-5574)

It largely just aligns the reference counting of memoryviews and PyObjects for these functions.

I believe this is to any function with a special signature (essentially most dunder methods of cdef classes).
The specific report was about properties though.

Closes https://github.com/cython/cython/issues/5571","['Cython/Compiler/Nodes.py', 'tests/memoryview/memoryview.pyx']"
91f826fbe97e4422b318ea2cf6f2f604917cdab9,2023-08-21 10:26:45,Stefan Behnel,Make a test easier to debug on failures.,['tests/run/bytearray_coercion.pyx']
8541f4e7b3ea919fa4c50f5efa0a6220c2503034,2023-08-20 14:08:44,da-woods,"Avoid conflict between int-to-py and anonymous-enum-to-py (#5632)

* Avoid conflict between int-to-py and anonymous-enum-to-py

Introduced in dec61cdd222ded6d5f96a635d9c4b0dddcbc4e78

Fixes #5623

* Typos","['Cython/Compiler/PyrexTypes.py', 'tests/run/c_int_types_T255.pyx']"
f76a841394e58799a34b5a2835aa96649a1ad6cf,2023-08-20 14:08:06,da-woods,"Allow interdependency between cpdef enums (#5631)

Fixes #5602","['Cython/Compiler/Nodes.py', 'tests/compile/cppenum.pyx']"
d455d51bf31379f47c074e40517e24857d4d9cc0,2023-08-17 09:21:49,Stefan Behnel,Refactor PyrexType.is_simple_buffer_dtype() to avoid letting it globally know all simple dtypes and instead let the subclasses decide.,['Cython/Compiler/PyrexTypes.py']
849eda73a817ffece755dea3f6f15791beac809c,2023-08-17 09:56:51,Stefan Behnel,Avoid running a test in Py3.5 because it lacks PEP-526 (variable annotations).,['tests/run/pstats_profile_test_py.py']
aa481be847ab2335429609faa88163825027c03f,2023-08-17 09:50:59,Stefan Behnel,Move codespell workflow into normal CI workflow since it should run under the same circumstances anyway.,"['.github/workflows/ci.yml', '.github/workflows/codespell.yml']"
ea6b6ab19d7096ce5744ccd8848826121d1c2115,2023-08-17 09:44:46,Stefan Behnel,Fix test when using type specs (which cannot be detected in Python code).,['tests/run/pstats_profile_test_py.py']
84907629743f6812d1b9b43fc7d6cb68cdcaacf3,2023-08-17 09:37:09,Stefan Behnel,Fix indentation and break long line in test.,['tests/run/pstats_profile_test_py.py']
bb9a7a072fec4226415eee6dbac2dbaaf45dafa9,2023-08-16 18:45:37,Stefan Behnel,Test runner: fix '# distutils:' directive usage in .py test files.,['runtests.py']
6f80753820fea6dbda12e1d289128ea1dc5dfc49,2023-08-16 09:53:43,Stefan Behnel,"Make the pstats profiling test run also in plain Python for comparison.

See https://github.com/cython/cython/issues/5628",['tests/run/pstats_profile_test_py.py']
b11f925e404da2fccc4ce1363a47a653c0b53740,2023-08-16 09:33:37,Matti Picus,Remove usages of deprecated numpy.distutils (GH-5620),"['Demos/setup.py', 'Tools/ci-run.sh', 'runtests.py', 'test-requirements-312.txt', 'test-requirements-36.txt']"
aa5e8668a9ef3dc047c305fa4971129849d0ab19,2023-08-15 16:15:32,aws-taylor,"Fix minor regression related to print_version() (#5621)

Looks like this was inadvertently introduced in https://github.com/cython/cython/commit/2a625fbd8793a83e16c524b7804710591dfe363e.

Fixes `cython --version`, which is used by `FindCython.cmake`",['Cython/Compiler/Main.py']
6f592646c069c4fd9fee76f96d4abbe060412e65,2023-08-14 16:58:51,da-woods,Fix spelling error introduced since codespell PR,"['CHANGES.rst', 'Cython/Compiler/Nodes.py', 'Cython/Utility/Exceptions.c', 'Cython/Utility/FunctionArguments.c']"
bea98eb8e972f6108b0240397b12614e99ab87f1,2023-08-14 16:45:22,Yaroslav Halchenko,"codespell: add config, workflow (so no new typos sneak in) and get some typos fixed (#5608)

* Add github action to codespell master on push and PRs

* Add rudimentary codespell config

* add various ""legitimate"" skips

* Fix some ambigious typos

* more of intricate skips

* Avoid use of a variable fle close to a typo for file

* [DATALAD RUNCMD] run codespell throughout

=== Do not change lines below ===
{
 ""chain"": [],
 ""cmd"": ""codespell -w"",
 ""exit"": 0,
 ""extra_inputs"": [],
 ""inputs"": [],
 ""outputs"": [],
 ""pwd"": "".""
}
^^^ Do not change lines above ^^^","['.codespellrc', '.github/workflows/codespell.yml', 'CHANGES.rst', 'Cython/Compiler/PyrexTypes.py', 'Cython/Tempita/_tempita.py', 'Tools/cython-numpy-mode-kate.xml', 'Tools/gen_tests_for_posix_pxds.py', 'Tools/kate.diff', 'runtests.py', 'tests/run/cpp_classes_def.pyx', 'tests/run/pep448_test_extcall.pyx']"
d3223edb245d6bbfbab5e04bab8687d9e0a195b9,2023-08-14 11:36:54,da-woods,"Use hex to store large integers (#5597)

This avoids running into Python's limits about the maximum
number of digits to use in string conversion.

Fixes #5596

I suspect this isn't *everywhere* that could generate long number
strings but it's sufficient to solve the reported bug.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Utils.py', 'tests/run/constant_folding.py', 'tests/run/int_literals.pyx', 'tests/run/large_integer_T5290.py', 'tests/run/pure_py.py']"
e1d9c5a03af7a7c723022acfed18f3ea1d1b10c7,2023-08-14 11:35:14,da-woods,"Get some of the limited API working with Py_LIMITED_API defined (#5550)

* Get a some of the limited API working with Py_LIMITED_API defined

This gets a minimal limited API example working with Py_LIMITED_API
defined, and adds a small test to prove it.

* Try to fix setup.py

* Small fixes

* Move guards to ""assume safe macros""

* Make arg spliting code handle avoid borrowed references

* Reorder imports to allow monkey patching

* Fix syntax error in regular mode

* More fixes

* Fix code style

* Fix a few more tests

* Slightly improve error message

* ITEM and GetItem were the wrong way round

* Fix struct definition

* Changes CyFunction to compile with Py_LIMITED_API

Mostly that we store the PyCFunctionObject as an attribute of
it rather than ""inheriting"" from PyCFunctionObject.

* Remove some spurious internal includes

* Switch orders

* Fixup

* Merge conditions

* Initialize weakref

* Fix reference counting mistake

* Minimal change to get classes working

* Fixed borrowed reference

* Remove duplication

* Comments from review; get code working

* Fix code on Py3.11 and Py3.12

The documentation lied...

* Remove PyCodeObject on limited API

* Adapt to awkward arg naming change

* Let's avoid owned reference at least for the very common and safe fast path.

* Reorder conditions to align them with surrounding code.

* Fix PyCode_New on 3.7

* Replace replace on Python 3.7

* Fix 3.11 typo

* Let CPython compile with assume_safe_macros

* Fixed function argument reference counting code

To fix PyPy errors

* Silence warning on newref

* Make sure ownership is properly transfor out of ParseOptionalArguments","['Cython/Compiler/Nodes.py', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/Exceptions.c', 'Cython/Utility/FunctionArguments.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/TypeConversion.c', 'runtests.py', 'tests/run/isolated_limited_api_tests.srctree']"
092abdb41e9b4924ccb99ccf876f35e06c86f077,2023-08-13 08:48:17,Stefan Behnel,Update changelog.,['CHANGES.rst']
332a4d904882c33164cdf6508418eeb5c76298ec,2023-08-13 08:45:07,Stefan Behnel,Add a C code comment (as used in other places) to mark incomplete utiltiy code as being completed automatically.,['Cython/Utility/Exceptions.c']
203c2757a66e1307aaca27022a44e6e4155230bc,2023-08-11 07:15:18,Stefan Behnel,Add comments to Cython feature flags that are not immediately obvious.,['Cython/Utility/ModuleSetupCode.c']
674339444707e2f74967b4646788a25cdc701cd8,2023-08-13 06:38:28,da-woods,"Fix fused function default argument coercion (#5614)

Python object fused function arguments weren't being correctly
coerced, which meant that sometimes an int was being cast directly
to a PyObject*, causing a crash if you actually tried to use it.","['Cython/Compiler/ExprNodes.py', 'tests/run/fused_def.pyx']"
c0870f912196a89a6bc24f94f2684f2633d75589,2023-08-11 20:30:21,Matus Valo,Fix example in extension_types.rst (#5613),['docs/src/userguide/extension_types.rst']
db995de3d24fe463a4121ab9acb94c968d4f25b3,2023-08-11 06:19:24,scoder,"Avoid using Py_OptimizeFlag in the Limited API, and non-public APIs in CPython 3.12. (GH-5606)

Closes https://github.com/cython/cython/issues/5605

We read ""__debug__"" also in Py3.12+ (even without Limited API) since we'd otherwise end up using private C-API calls for an unimportant one-time check at import time.",['Cython/Utility/Exceptions.c']
64811e1bb557e4b65528e2d259508df655d3f1b4,2023-08-10 20:17:15,Stefan Behnel,"Propagate exceptions in ""size sanity check"" and ""two's complement check"" instead of calling PyErr_WriteUnraisable() and ignoring them.","['Cython/Compiler/Code.py', 'Cython/Utility/Overflow.c']"
6ad6ca0e9e7d030354b7fe7d7b56c3f6e6a4bc23,2023-08-07 05:31:10,da-woods,"Allow PyPy to define use_type_specs (#5594)

It stands a decent chance of working because it's just a different implementation rather than access to internals (but is currently untested), so I don't see a reason to be hugely prescriptive.",['Cython/Utility/ModuleSetupCode.c']
6776c96f66fc799c62be4d6d4022903a5e36cbb2,2023-08-04 09:48:50,da-woods,"Fix using NULL as pointer default value for fused function arguments (#5578)

In general, there is no need to go through a temp if the node is literal.

Fixes https://github.com/cython/cython/issues/5554","['Cython/Compiler/FusedNode.py', 'tests/run/fused_types.pyx']"
f1d52e6aebf9ce4a9a311822c0f37788dca5985e,2023-08-04 09:41:16,Stefan Behnel,"Use a temporary for non-trivial conditions in conditional expressions. This avoids generating duplicate parentheses in condition code and aligns the code generated for conditional expressions with that for if-statements.

Closes https://github.com/cython/cython/issues/5555
Closes https://github.com/cython/cython/pull/5587",['Cython/Compiler/ExprNodes.py']
b4671ba09dd69911dc979f15917bbb8a2d4bdc7b,2023-08-01 13:48:08,Matti Picus,"CI: Reenable testing in PyPy, update caching to fix warnings (GH-5582)

When re-enabling Py2.7 (after ""setup-python"" removed support for it), the action conditions accidentally excluded PyPy, which thus left the ""pypy-*"" CI runs with CPython instead of PyPy.",['.github/workflows/ci.yml']
cacce60f50c7633f0278d8dec90132b87f3b644a,2023-07-29 19:34:12,Stefan Behnel,"CI: Fix some dependency declarations for Py2.7 and exclude ""line_profiler"" on macOS since it does no longer build there.",['test-requirements-27.txt']
365ba8efb1945c02fa8c231dacef14b6c6482502,2023-07-31 10:18:33,da-woods,"Add exception handling to signature of make_unique() (GH-5569)

Also tweak the selection for move-if-supported by adding a feature flag `CYTHON_USE_CPP_STD_MOVE`.
This now lets the user enable it even if the compiler support isn't
detected. This is useful because the new signature for `make_unique()`
kind of relies on move-if-supported to work.

Fixes https://github.com/cython/cython/issues/5560","['Cython/Includes/libcpp/memory.pxd', 'Cython/Utility/CppSupport.cpp', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/cpp_smart_ptr.pyx', 'tests/run/cpp_smart_ptr_helper.h']"
292c72c70171720be35b159a9afc9e338633afc5,2023-07-31 06:58:23,Chia-Hsiang Cheng,Ensure analyse_types marks SimpleCallNode as analysed (#5565),"['Cython/Compiler/ExprNodes.py', 'tests/run/cyfunction_defaults_cpp.pyx']"
162851b7f54bd1be7fa9f2a93571d0f0722702ad,2023-07-31 06:56:19,da-woods,"Continue work on unified release notes (#5570)

* Revert ""Remove duplicated part of the changelog.""

This reverts commit 2428384dc3283b6d7edb2950a535116672c0b599.

* create deprecation section

* sync changes from newer releases

* move some lines to C, CLI & build support

* move some more C compat issues

* create section for compatibility with other Python implementations

* move some lines to ""Other Changes"", ""Editor Support"" and ""CLI""

* move some items to python semantics section

* remove some generic items without issue links

* remove some already-emptied sections (after moving items to unified notes)

* temporarily remove currently-unaccounted lines

* Continue work on the unified release notes

* More issues distributed

* Finish categorising changes (and sort)

* Remove duplicated section and add back in ""Other Python""

* Bullet point

Co-authored-by: h-vetinari <h.vetinari@gmx.com>

---------

Co-authored-by: H. Vetinari <h.vetinari@gmx.com>",['CHANGES.rst']
f082052192ab54332ef28d657bfd520bd6772ee2,2023-07-30 21:02:03,Matti Picus,fix copy-paste mistake in CyFunction (#5579),['Cython/Utility/CythonFunction.c']
c64702f563a1bf5a8f45ba6b796e29382a609d62,2023-07-29 11:41:02,Stefan Behnel,Fix some C compiler warnings about mixing singed/unsigned in a test.,['docs/examples/tutorial/string/c_func.pyx']
573bc6791bae462fb12b811bb413be7564126b87,2023-07-29 11:33:49,Stefan Behnel,"Make ""test_print_version"" more reliable (by not actually relying on the external state of the stdout/stderr streams) and add another test for the ""do not print it"" case.",['Cython/Tests/TestCythonUtils.py']
2f7f8971e3913b53eb85ce21232d1c17df6c3b36,2023-07-29 11:32:20,Stefan Behnel,"Make ""print version to stderr or not"" conditions more readable.",['Cython/Utils.py']
b061de44e5834407dce2eafb6fdad10dfe57a895,2023-07-29 11:01:44,Stefan Behnel,Fix option description in cython_freeze.py.,['bin/cython_freeze']
19d18584c36e786aef983ea1efad5de9b962e085,2023-07-29 10:56:49,Stefan Behnel,"docs: Remove all mentions of the ""zip_safe"" flag which is long considered obsolete by setuptools (after replacing eggs by wheels).

See https://setuptools.pypa.io/en/latest/deprecated/zip_safe.html","['docs/examples/quickstart/build/setup.py', 'docs/src/quickstart/build.rst', 'docs/src/userguide/sharing_declarations.rst', 'docs/src/userguide/source_files_and_compilation.rst']"
217b21a2d73940014b65921b571c6397a0f17398,2023-07-29 10:44:50,Stefan Behnel,"docs: Clarify how egg files are unsuitable for binary modules and cimports, and thus should be avoided. Not sure if they are still the default in setuptools, but they certainly are unhelpful.",['docs/src/quickstart/build.rst']
fceb1ae4b70a750f3240fdbabfd98dd93e0decab,2023-07-29 10:37:18,Stefan Behnel,"docs: Move ""--no-cython-compile"" more to the end since it's much less relevant now that we ship pure Python wheels.",['docs/src/quickstart/install.rst']
4eee1c3f461e68a0c57fdef4389b1166dc433f5e,2023-07-29 10:23:06,Stefan Behnel,"Avoid suggesting ""setup.py install"" as installation command.",['INSTALL.txt']
5fbfa7ed7bf7fdab8202e1ec1528ca10eef364d1,2023-07-29 09:53:48,Stefan Behnel,Avoid redundant import.,['Cython/Utils.py']
e1c779ea55aa731d30835d4ce1c9572272feea68,2023-07-29 09:53:19,Stefan Behnel,Fix imports in test after moving a test function from a different test module.,['Cython/Tests/TestCythonUtils.py']
904becbcd743e7e653d6eb9b329c4f06bb3bc92e,2023-07-29 08:19:32,da-woods,Second missing import,['Cython/Tests/TestCythonUtils.py']
6a45c32716d3f20970736dfb0a6f685bdcec8cbf,2023-07-28 21:34:22,da-woods,Fix missing import for print_version test,['Cython/Tests/TestCythonUtils.py']
2a625fbd8793a83e16c524b7804710591dfe363e,2023-07-28 12:44:07,Stefan Behnel,Add a test for printing the Cython version from the CLI tools since it now uses non-trivial logic that is worth exercising.,"['Cython/Compiler/Main.py', 'Cython/Tests/TestCythonUtils.py', 'Cython/Utils.py']"
fd5ad9d114e0af977437a6c2bfb1ae42d2203c01,2023-07-28 11:01:22,Stefan Behnel,"Fix calling compile() with a string as ""source"" and ""options.timestamps"" enabled.
Previously, this would interpret the source string as sequence of sources.",['Cython/Compiler/Main.py']
ca69b359b040bf6c0fc90692bbea3bdd9d7877e6,2023-07-28 10:52:03,Eli Schwartz,"Only write the version to stderr, if it's a separate file descriptor from stdout (GH-5572)

At least one project tries to detect the Cython version by redirecting stderr to
stdout and capturing it. This is done in pure POSIX shell, so it probably seemed
like the simple and obvious solution for a less capable programming language
given that no output at all was expected on stdout.

But the result is that the version number appears twice, and then gets misparsed
and ends up triggering bad assumptions in the code running cython.

It turns out that it's pretty easy to just print once, though. Detect when
stdout and stderr are redirected to the same location, and only print once.

See https://github.com/cython/cython/issues/5504
Fixes https://bugs.gentoo.org/911333",['Cython/Compiler/Main.py']
d99ee19c951b3cd31116598964c9efd040b9a568,2023-07-26 20:23:23,Philipp Wagner,"Declare PY_SSIZE_T* as const (#5561)

Follow the lead of `Cython/Includes/cpython/pyport.pxd` to declare
`PY_SSIZE_T_MIN` and `PY_SSIZE_T_MAX` as `const`. This prevents Cython
from trying to override or assign to this ""variable"" when doing wildcard
imports.

Add a test that shows this behavior in one example.

Fixes #5562","['Cython/Utility/CppConvert.pyx', 'tests/compile/vector_include.pyx', 'tests/run/bytesmethods.pyx', 'tests/run/charptr_decode.pyx', 'tests/run/unicode_slicing.pyx']"
fc29fb40bf0410d0670ada942bb9afb9dbdc0b72,2023-07-26 10:20:11,Philipp Wagner,"Remove outdated comment in README about Cython 3 (GH-5567)

Cython 3 has been released, it's not a future project any more!",['README.rst']
9c3268163c908ccf8f170d737ad8754e95e7612e,2023-07-23 19:10:16,da-woods,"Change CyFunction to compile with Py_LIMITED_API (#5556)

Mostly that we store the PyCFunctionObject as an attribute of
it rather than ""inheriting"" from PyCFunctionObject.","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ModuleSetupCode.c']"
3ff9bff089dd8492407364a5ae2b06a9fdd40699,2023-07-23 19:08:02,Stefan Behnel,"Avoid deprecated API usage in test runner.

See https://github.com/cython/cython/issues/5134",['runtests.py']
cca44ea13618c1327bd713414be4d4523477f935,2023-07-23 17:56:18,da-woods,Fix 3.8 vectorcall_function,['Cython/Utility/ObjectHandling.c']
88ccfe7d1ea2932d312f7866b64cd442e825b899,2023-07-23 14:00:29,Matti Picus,"BUG: NO_IMPORT_ARRAY can be undefined, resulting in compiler warning (#5557)

The value NO_IMPORT_ARRAY is only supposed to be defined, not set to a value, in NumPy.

This only showed up now since the CI job we were using to test Cython3 did not turn on -Werror=undef (which comes sysconfig.get_config_val(""CFLAGS""), used in the main CI job).",['Cython/Utility/NumpyImportArray.c']
223d9738fde99f6f71cfe18ae8ad0c9be36f297a,2023-07-23 12:36:52,Stefan Behnel,"Avoid using internal C-API functions that were removed in CPython 3.13.

Partially replaces https://github.com/cython/cython/pull/5531","['Cython/Utility/ObjectHandling.c', 'Cython/Utility/StringTools.c']"
e1d06dc8c9be52a8ad46e1be5163b85cf56cc2ef,2023-07-23 12:21:33,Stefan Behnel,Use the public (since Py3.8) C-API function in the vectorcall code instead of a private function that is now removed in Py3.13.,['Cython/Utility/ObjectHandling.c']
47b4f565d365ef5872be694e3a7ef2f00d6b2358,2023-07-21 08:45:14,Stefan Behnel,Make sure we include Shadow.pyi in the sdist.,['MANIFEST.in']
572b640211e23789ab429e613ebef277f5feafb0,2023-07-21 07:00:10,da-woods,"Improve error diagnostic for exception-spec mismatch (#5547)

It seems like the most common Cython 3 snag is the change in
function exception behaviour. This PR adds some extra diagnostics
to help people navigate this change, and a general mechanism
for adding this kind of diagnostics.

It needs some tests, but I wasn't to see what tests fail
to tell me where to put them.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/errors/cfuncptr.pyx', 'tests/errors/e_excvalfunctype.pyx']"
0ad32ea25167e2f54ab897d248284ac63a9e7473,2023-07-20 19:34:17,Lisandro Dalcin,CYTHON_LIMITED_API Fix import utility code (#5549),['Cython/Utility/ImportExport.c']
c7b21a0602ff04d1d2a9ae47c4e9777de344b2ca,2023-07-19 07:10:36,0dminnimda,"Pythonise docs: ""pxd files"" (pxd_files.rst) (GH-4295)","['docs/examples/tutorial/pxd_files/cmath.pxd', 'docs/examples/tutorial/pxd_files/inline.pxd', 'docs/examples/tutorial/pxd_files/integrate.py', 'docs/examples/tutorial/pxd_files/integrate.pyx', 'docs/src/tutorial/pxd_files.rst']"
c8fe79db1356e8bc235b2e4684f417cc52f3ed35,2023-07-17 17:19:38,jakirkham,Fix a small typo in 3.0.0 release notes (#5534),['CHANGES.rst']
a2422bd23fd327e61011f8e30f4c69e55bf9130a,2023-07-17 16:01:29,Stefan Behnel,Fix incomplete sentence in changelog.,['CHANGES.rst']
2428384dc3283b6d7edb2950a535116672c0b599,2023-07-17 15:54:04,Stefan Behnel,Remove duplicated part of the changelog.,['CHANGES.rst']
21d19f8d17cad5c4f7623b2a2fe3aa141d2538c1,2023-07-17 15:27:07,h-vetinari,Add unified release notes (GH-5526),['CHANGES.rst']
d0302237943f14240d185010cf6d8341ad985835,2023-07-17 13:45:47,Stefan Behnel,Merge branch 'master' of git+ssh://github.com/cython/cython,['tests/pypy_bugs.txt']
2f3a781dcca092ce95fbfef2736b12b0d1ab50dd,2023-07-17 12:11:22,Stefan Behnel,Prepare release of Cython 3.0.0.,['Cython/Shadow.py']
ac4f0bbf1e0b60e22667836fc757096752d8ebd1,2023-07-17 12:08:23,Stefan Behnel,Update changelog.,['CHANGES.rst']
0713b78ac3b2619d056792e75d42e67e933f8ffa,2023-07-16 07:32:20,Matti Picus,"on pypy, skip test that depends on gc behaviour (#5528)",['tests/pypy_bugs.txt']
039ef7c6242b3b6a18363ff22ead04f4e7cce676,2023-07-14 19:46:56,Stefan Behnel,"In Py2, the extension type might get cleaned up before the objects at system exit, so we need an extra NULL check for the type pointer.",['Cython/Compiler/ModuleNode.py']
8edd90a951029f7c3297e2e2beeab39166cb7760,2023-07-12 20:18:44,Stefan Behnel,Prepare second release candidate 3.0.0rc2.,"['CHANGES.rst', 'Cython/Shadow.py']"
7efee97ba87a7469e77497fec5d494d62fa704ae,2023-07-12 12:29:34,Stefan Behnel,Update changelog.,['CHANGES.rst']
c0a3556744577d4cfdf3e20a2f3fd164f21272ef,2023-07-12 20:48:50,da-woods,"Test including ""complex.h"" in MSVC (#5527)

Follow up to d8bb216c261d1911a0725ea9364cb837e692416b just to
ensure the behaviour is tested.",['tests/run/complex_numbers_c99_T398.h']
36a370289cd41604b65054b49a67cc746f2b518d,2023-07-12 12:10:35,Stefan Behnel,"Write the version to stderr as before, but only if stderr is actually captured and not just printed alongside with stdout.

See https://github.com/cython/cython/issues/5504",['Cython/Compiler/Main.py']
8169009227f565a39f4cdbd13ae73437855faab2,2023-07-12 08:38:53,Stefan Behnel,Update changelog and version.,"['CHANGES.rst', 'Cython/Shadow.py']"
864e56359a83125ab9f89450b385099f1cf6da7f,2023-07-12 08:28:25,da-woods,"Support hex constants in enums (GH-5525)

And other ""special"" integer constants.

Fixes https://github.com/cython/cython/issues/5524","['Cython/Compiler/Nodes.py', 'tests/run/cpdef_enums.pyx']"
0c6141a1bfef1a018a28587a71ec47e2b14db152,2023-07-12 08:23:34,Matus Valo,Document @cython.with_gil (GH-5522),['docs/src/userguide/nogil.rst']
f4dc8c1dd769c12b4b6274a36a41145b9da4be78,2023-07-11 19:26:14,Stefan Behnel,Prepare release of 3.0.0rc1.,['Cython/Shadow.py']
1b4d9e0d341e3091a901e8cc1885abc07e56defd,2023-07-11 19:25:31,Stefan Behnel,Update changelog.,['CHANGES.rst']
1e1b1be69f5cf997c0b3b94dae792c07555ad488,2023-07-11 19:15:56,Matus Valo,"Recognize `gil()`/`nogil()` arguments in pure python mode (GH-5491)

Also adds the missing `@cython.with_gil` decorator to match the `with gil` function declaration.","['Cython/Compiler/Nodes.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Shadow.py', 'docs/examples/userguide/fusedtypes/conditional_gil.py', 'docs/src/userguide/fusedtypes.rst', 'tests/errors/pure_nogil_conditional.py', 'tests/run/pure_nogil_conditional.pyx']"
633ef7f920a68be3ebd1eb6d174aafcec0913c52,2023-07-11 07:41:55,Stefan Behnel,CI: disallow Windows jobs to fail after fixing TestInline.,['.github/workflows/ci.yml']
5102972b92de6652eb2803a768b09db55a606415,2023-07-10 19:48:19,Stefan Behnel,"Rename a test class attribute to avoid misusing the ""test_"" test method prefix.",['Cython/Build/Tests/TestInline.py']
0123b46107c3f6d0186f25650ec3c57150c09f70,2023-07-09 19:44:42,Stefan Behnel,"Try to resolve Windows DLL loading problems in cython.inline() by temporarily adding the library directory to the allowed DLL loading directories.

See https://docs.python.org/3/library/os.html#os.add_dll_directory",['Cython/Build/Inline.py']
08dc346d23279a81490b363d6b8d43b92b55b4f1,2023-07-09 17:05:47,Stefan Behnel,Merge branch '0.29.x',[]
436f8a32ea3a1b0411695db1b974c60434042b5b,2023-07-09 16:53:13,Stefan Behnel,"Disable CYTHON_CCOMPLEX on MSVC since it defines ""_Complex_I"" without actually supporting ""_Complex"".

Closes https://github.com/cython/cython/issues/5512",['Cython/Utility/Complex.c']
6dcd56da25b320d0c653164eb814525c4e7e0c1f,2023-07-09 17:00:27,Stefan Behnel,Update changelog.,['CHANGES.rst']
d8bb216c261d1911a0725ea9364cb837e692416b,2023-07-09 16:53:13,Stefan Behnel,"Disable CYTHON_CCOMPLEX on MSVC since it defines ""_Complex_I"" without actually supporting ""_Complex"".

Closes https://github.com/cython/cython/issues/5512",['Cython/Utility/Complex.c']
52cba8252b3527f0ca998378ba9bd2b8d5d9ee64,2023-07-09 14:53:23,da-woods,"Fix Python conversion of C++ bint containers (GH-5518)

The previously clashed with ""int"" containers.

Fixes https://github.com/cython/cython/issues/5516","['Cython/Compiler/PyrexTypes.py', 'tests/run/cpp_stl_conversion.pyx']"
0d0cc9987f1c7e4d757d974be681e0288f0640e9,2023-07-05 08:20:56,Stefan Behnel,Include Py3.12 in wheel build.,['.github/workflows/wheels.yml']
63cd89fc4ef87893e77e1e1c2a33c5aca46ac395,2023-07-04 20:49:59,da-woods,"Improve (and test) memoryview reference counting (#5510)

1. Avoid needing an indirection to align the atomic types. They
   should be aligned anyway, and this causes a notable slow-down.
2. Don't use ""volatile"" typedef - volatile doesn't guarantee anything
   about atomicity and isn't needed here.
3. Use explicit memory ordering. Won't make much difference on x86/x64
   but may be faster on other architectures.
4. Add a stress-test to try to make sure we haven't messed up.","['Cython/Utility/MemoryView.pyx', 'Cython/Utility/MemoryView_C.c', 'tests/compile/fused_redeclare_T3111.pyx', 'tests/errors/pure_warnings.py', 'tests/memoryview/parallel_refcounting_stress_test.pyx']"
b36b4d6c69da4b22c33c8ff76c7daf0e0d479221,2023-07-04 19:32:50,Stefan Behnel,Merge branch '0.29.x',['runtests.py']
123aea06ce764915c652f76d846a4dbde1a106ff,2023-07-04 19:30:47,Stefan Behnel,test runner: Only print error output if there is some (and it's not None).,['runtests.py']
37b280a732cc6545c9fb9f132673c459c7b7ddfe,2023-07-04 19:20:35,Stefan Behnel,Merge branch '0.29.x',['.github/workflows/ci.yml']
702bbc80fe2e346c4ddc58f074e0054da56e0ced,2023-07-04 15:03:17,Stefan Behnel,"Revert ""Avoid immediate import failure of pyximport on Py3.12 because of the missing 'imp' module. Instead, fail on usage.""
Importing the ""imp"" module after installing pyximport leads to infinite recursion.

This reverts commit fcad0e92240a334ff93915e6f56ba5711ea7b8b7.",['pyximport/pyximport.py']
882b95d6986fd6b5e2c0f67f4138a91c45de8f03,2023-07-04 12:49:04,Stefan Behnel,"Revert ""Avoid using pyximport to build the refnanny in the test runner.""

This reverts commit 9b87ddfea0c53fadabb72612e580c8891fd1e4fe.",['runtests.py']
4e8e5a982cb5a73d57982ca41f1c0650233a5025,2023-07-04 12:49:02,Stefan Behnel,"Revert ""test runner: Fix refnanny import after changing the way (and place) it's built.""

This reverts commit 1e7c4b6f9693d56e4692853844f530b044fd69ab.",['runtests.py']
1e7c4b6f9693d56e4692853844f530b044fd69ab,2023-07-04 12:33:31,Stefan Behnel,test runner: Fix refnanny import after changing the way (and place) it's built.,['runtests.py']
d1b5694353aa7c69cdb5caef97ad91e3b5b4957f,2023-07-04 12:30:12,Stefan Behnel,CI: Use a newer Python version for code style checks.,['.github/workflows/ci.yml']
9b87ddfea0c53fadabb72612e580c8891fd1e4fe,2023-07-04 12:18:39,Stefan Behnel,Avoid using pyximport to build the refnanny in the test runner.,['runtests.py']
fcad0e92240a334ff93915e6f56ba5711ea7b8b7,2023-07-04 08:40:15,Stefan Behnel,"Avoid immediate import failure of pyximport on Py3.12 because of the missing 'imp' module. Instead, fail on usage.",['pyximport/pyximport.py']
0534d44e178473a25a680f6ca3e7bccc3d299573,2023-07-04 08:35:54,Stefan Behnel,Merge branch '0.29.x',"['.github/workflows/ci.yml', 'CHANGES.rst']"
e3859c08faa59e173a84e3c61338cc3633bd9135,2023-07-04 08:31:33,Stefan Behnel,Disable pyximport tests in 0.29.x since the implementation requires the removed 'imp' module.,['runtests.py']
d2f9c558f96f3749b271cfc8a40020a7aebeca3a,2023-07-04 07:51:17,Stefan Behnel,Fix release date.,['CHANGES.rst']
60a48fc8ff410eea672acb465101360f904537db,2023-07-03 12:05:36,Stefan Behnel,CI: Use correct Python2 package names.,['.github/workflows/ci.yml']
b015134bc66ff1143fd3b563b7526b0941cfcc0c,2023-07-03 09:23:52,Stefan Behnel,CI: Increase job timeout to make macOS work again.,['.github/workflows/ci.yml']
e2deed5186432d1cde081cfd827f3bea4cb336e0,2023-07-03 09:22:40,Stefan Behnel,"CI: Use the platform Py2.7 since the ""setup-python"" action no longer supports installing Py2.7.",['.github/workflows/ci.yml']
c69aa348e86555304f9f88da8bce129751dc4cf1,2023-07-03 09:21:40,Stefan Behnel,Remove a numpy test that no longer works with recent releases.,['tests/run/numpy_test.pyx']
fdfc8301b4aaccf27b187e61644833cc66c341a6,2023-07-03 06:55:43,Stefan Behnel,CI: Update some action versions to what we use in master.,['.github/workflows/ci.yml']
4d6004b7ae26ccf1c2da55744c0741ffdbe71523,2023-07-03 06:48:36,Stefan Behnel,Prepare release of 0.29.36.,"['CHANGES.rst', 'Cython/Shadow.py']"
f3ec5963edc77400ed6f796857d54ffa34242542,2023-07-03 06:46:03,Stefan Behnel,Update changelog.,['CHANGES.rst']
90e9f6a3524621fd4b4c77af367e2abe6f4a50a1,2023-06-29 19:21:42,Paul,"Fix display error on Cython3.0 document on troubleshooting (#5503)

* Update troubleshooting.rst

addition letter ""s"" cause error on displaying format

* Fixing Document Display Error 

The document of Cython3 on embedding Cython module into C/C ++ applications has missed one backquote. Hence the display result seems wired. I fixed it by adding the missing backquote","['docs/src/tutorial/embedding.rst', 'docs/src/userguide/troubleshooting.rst']"
4f4e91b9e3646172a2ad873ef3db3c908be2b5b3,2023-06-29 16:25:16,Matti Picus,"Print --version to stdout (GH-5505)

Closes https://github.com/cython/cython/issues/5504",['Cython/Compiler/Main.py']
37f4dcdc04547875e2836fda076f5707ec50e579,2023-06-29 16:17:39,Stefan Behnel,Update changelog.,['CHANGES.rst']
1b5a33d924d88cdd65b439758edd131893e03da3,2023-06-29 16:10:06,Stefan Behnel,CI: Update some (forgotten) action versions.,['.github/workflows/ci.yml']
b0e1cc4086a79374f49a7cbf85abeedec03d6948,2023-06-29 16:08:41,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
86af36e222a60c90551601560ae148539bb89504,2023-06-29 15:57:51,Stefan Behnel,Update changelog.,['CHANGES.rst']
fa75e83359e9e8460f25bb09bdab74f02c98c48b,2023-06-26 20:42:45,Stefan Behnel,"Test runner: Make gcc/clang exclusions work if multiple C compiler versions are installed and one is selected via CC/CXX environment variable.
Previously, we only looked at the 'sysconfig' config variable, which refers to the C compiler that was used to build CPython, not necessarily the one that is currently being used.",['runtests.py']
0b57f750e8ea5c9ce091568d07f5f353afd12227,2023-06-27 09:37:43,Stefan Behnel,Fix some tests in Py3.12 by avoiding interned strings.,"['tests/buffers/bufaccess.pyx', 'tests/memoryview/memoryview.pyx', 'tests/memoryview/memslice.pyx']"
d9c5ff756aee0dc7c4a32114710a5a2e06745ce9,2023-06-28 08:04:09,da-woods,"Temporary fix for tests on Python <= 3.5 (#5501)

By disabling test",['tests/run/cpdef_enums.pyx']
5da80cb16d08e0e29bd5116a51a37c32bded6666,2023-06-27 14:54:53,da-woods,"Fix to-py conversion with duplicate enum values (#5410)

Fix to-py conversion with duplicate enum values

1. Where possible, track the equivalent integer value for an enum
   type as they're defined.
2. Use this to determine if the switch optimization can be used
   (if present)
3. If not present, disable the switch optimization for enum to
   py-enum conversion, since it's duplicates are pretty likely
   in this case.

Fixes #5400","['Cython/Compiler/Nodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'tests/run/cpdef_enums.pyx']"
7e1d9ba4e16b2f6621db7812a1412d26f7eaee1d,2023-06-27 09:37:43,Stefan Behnel,Fix some tests in Py3.12 by avoiding interned strings.,"['tests/buffers/bufaccess.pyx', 'tests/memoryview/memoryview.pyx', 'tests/memoryview/memslice.pyx']"
f6b0ae53b37bec3e636a09a8d69561d59f46c1ad,2023-06-27 09:28:24,Stefan Behnel,"Fix test in Py3.12 after behavioural changes in CPython.

See https://github.com/python/cpython/issues/77757
See https://github.com/python/cpython/pull/103402",['tests/run/test_subclassinit.py']
c545a9a4deb5c2dacbf440a0400a2168cc2e8e5d,2023-06-27 09:15:31,Stefan Behnel,"Disable embedding test on macOS-Py2.7 since it currently fails with an invalid setup: ""LINKFORSHARED=-u _PyMac_Error Python.framework/Versions/2.7/Python""",['runtests.py']
684cb106e7aa4a34b44defbf3b2beb242cba2240,2023-06-27 07:53:41,Stefan Behnel,"CI: Unset MACOSX_DEPLOYMENT_TARGET on macOS + Py3.7/8 to fix build failures due to overly strict checks in distutils.

See https://trac.macports.org/ticket/62757",['Tools/ci-run.sh']
28378c19d0294df15852065528f0115d9f78af64,2023-06-27 07:44:22,Stefan Behnel,"Include the error output of the embedding test in its failure message, rather than just reporting an unhelpful ""exit status 1"".",['runtests.py']
a03483e75a7dd885af28eb191b12fa1c1b3a0304,2023-06-26 20:43:05,Stefan Behnel,Test runner: Minor code cleanup.,['runtests.py']
cf672a2a294c59667dffbbf778ce45a55f332c47,2023-06-26 20:42:45,Stefan Behnel,"Test runner: Make gcc/clang exclusions work if multiple C compiler versions are installed and one is selected via CC/CXX environment variable.
Previously, we only looked at the 'sysconfig' config variable, which refers to the C compiler that was used to build CPython, not necessarily the one that is currently being used.",['runtests.py']
53bf5ee1e7bd78e67c6a9dc9ea95787683cc7001,2023-06-26 20:06:22,Stefan Behnel,EmbedTest: Also print stderr on failures and make both stdout/stderr easier to find in the logs.,['runtests.py']
3d47ed8d83675d066c71690bf15f2cd05a606af3,2023-06-26 19:53:30,Stefan Behnel,Avoid C signedness conversion warnings when writing 'char' values to an unsigned Unicode buffer by casting to the right Unicode character int type.,['Cython/Utility/ModuleSetupCode.c']
4ef4a9d3661899cf192e8061a8aedcbf9ffe0e81,2023-06-26 15:44:48,Stefan Behnel,"Fix C compiler error in CI: ""error: label at end of compound statement""",['Cython/Utility/TypeConversion.c']
9af9bd1ecd5a0c14eeaa47e3c6ea9fe80d586235,2023-06-26 15:10:16,Stefan Behnel,Avoid a clang warning in Py2.7 about implicit C integer sign conversion.,['Cython/Utility/Optimize.c']
3c2dfdd69e789259710421057b406a355ec54a3e,2023-06-26 15:04:21,Stefan Behnel,"Add a special case for unpacking lists into ctuples.
Avoid some clang warnings about uninitialised return structs by passing them around as pointer arguments instead.","['Cython/Utility/TypeConversion.c', 'tests/run/ctuple.pyx']"
002f965be66d6d768bad230d70c44a7389376cfc,2023-06-26 09:12:49,Stefan Behnel,Disable a test in Py3.11.4 due to a bug in CPython.  See https://github.com/python/cpython/issues/105332,['tests/run/cpdef_enums.pyx']
0fce2860d96f744ca21bd844c12d38fb172aa387,2023-06-26 09:05:56,Stefan Behnel,Fix decorator misuse.,['Cython/Build/Tests/TestIpythonMagic.py']
0979a41b369fd243a9b6fe436b45ce76825083ce,2023-06-26 09:03:08,Stefan Behnel,Disable a test in Py2.7 that currently fails in CI due to C compiler setup issues.,['Cython/Build/Tests/TestIpythonMagic.py']
31d33de875b6d7ee5d69eb91870fcaea4e5cb7cc,2023-06-26 08:09:15,Stefan Behnel,CI: Fix file path used for ccache hash.,['.github/workflows/ci.yml']
eca302b4ac6b3c67cf9cd38ee0b194058a70980b,2023-06-24 20:49:56,Stefan Behnel,Fix C++ conversion warning.,['Cython/Utility/TypeConversion.c']
ad31e2c3bd92d16ff6dfb509cf8ed73297fd61f1,2023-06-23 08:46:20,Stefan Behnel,CI: Go back to older GCC 8 to fix C++ failures.,"['.github/workflows/ci.yml', 'Tools/ci-run.sh']"
cefd2cb0e51636ef5577e93737830c08ffacd7aa,2023-06-23 08:20:40,Stefan Behnel,Update changelog.,['CHANGES.rst']
f27311e3994464d0c8e4141b9898ae9c02a9b563,2023-06-22 21:40:19,da-woods,Fix exception handling in libc_signal test,['tests/compile/libc_signal.pyx']
80772e08bf0654960e5031191c4af54994e3117c,2023-06-22 18:20:13,da-woods,"Mark signalhandler_t in libc as noexcept

Fixes https://github.com/cython/cython/issues/5498",['Cython/Includes/libc/signal.pxd']
8d54a676e63b7bc6e46a660cca68cb5a583cbc57,2023-06-21 13:35:09,Stefan Behnel,"Avoid a crash when retrieving an exception that doesn't have a traceback yet.

Closes https://github.com/cython/cython/issues/5495",['Cython/Compiler/Nodes.py']
03d94f7af66b0fc073c9748537a3f3df29406adb,2023-06-21 13:17:32,Stefan Behnel,CI: Fix wording in output title.,['Tools/ci-run.sh']
8a87d20b6d0576914ebacfd827ff308184d4423c,2023-06-21 13:16:55,Stefan Behnel,Also set the default gcc version to 9 instead of 8.,['Tools/ci-run.sh']
1dd1457df840c49e65f65ff1c5499b812b17cede,2023-06-21 12:54:16,Stefan Behnel,Try to make CI for Py2.7 work again.,['.github/workflows/ci.yml']
477f51bb94271bcc0cdc103642f172334413f50e,2023-06-20 18:36:57,nocarryr,Correct links in faq (#5496),['docs/src/userguide/faq.rst']
92259fca593f892c32dac20d331cbc82629a1f5e,2023-06-19 10:39:01,Matus Valo,"Don't override language_level from directives dictionary when set to None (#5487)

Co-authored-by: scoder <stefan_ml@behnel.de>","['Cython/Compiler/Options.py', 'tests/build/cython_language_level.srctree']"
11d83adca9cd6763805bd7a2550329979cbf0c78,2023-06-18 10:51:22,Matti Picus,Remote tests for features removed in NumPy 1.25 (#5492),"['CHANGES.rst', 'Cython/Includes/numpy/__init__.pxd', 'tests/run/numpy_test.pyx']"
d10e31cb3457f2c90469ca7127de1bc46c79d232,2023-06-16 07:43:32,Matti Picus,CI: Update pypy to released version (GH-5490),['.github/workflows/ci.yml']
0b3edb23c9fad72fae8e719887c18a66def07e42,2023-06-15 18:01:56,gabrielfougeron,"added include_dirs to numpy pythran docs (#5485)

Co-authored-by: Gabriel Fougeron <gabriel.fougeron@esi-group.com>",['docs/src/userguide/numpy_pythran.rst']
2c3c0090cd52f0f19893e7faf74d3910509b57cf,2023-06-15 17:56:27,Isuru Fernando,"Don't remove const for reverse iteration (#5483)

Because pair<const T, U> isn't the only type we have to consider and removing const from pointer types is a significant change.

* Don't remove const for reverse iteration

* Add test from gh5478

* Fix multimap too

* Fix test","['Cython/Compiler/ExprNodes.py', 'Cython/Includes/libcpp/map.pxd', 'tests/run/cpp_iterators.pyx']"
51078b3822b093febe51bf20802a4c1119abeef9,2023-06-11 07:37:32,Matti Picus,"Backport fixes for PyPy (GH-5429) (#5465)

* Fixes for PyPy (GH-5429)

Currently require a nightly PyPy build for Py3.9 to support async iteration and finalisation.

Avoid PyIter_Next() and call tp_iternext() instead because PyIter_Next() swallows StopIteration exceptions and thus looses the return value.

See https://foss.heptapod.net/pypy/pypy/-/issues/3280
See https://foss.heptapod.net/pypy/pypy/-/issues/3935

* change MACOSX_DEPLOYMENT_TARGET to 11.0","['.github/workflows/ci.yml', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'tests/pypy_bugs.txt', 'tests/run/async_iter_pep492.pyx', 'tests/run/error_pos.srctree', 'tests/run/test_asyncgen.py']"
0605b260541394d7b33110d0f21830be507fde76,2023-06-09 07:17:29,da-woods,Merge branch '0.29.x',[]
863e9315b0c6298c806314c5465d7b697eef89a1,2023-06-09 07:14:08,Matus Valo,"Use `PyObject_GC_IsFinalized` in Cython >= 3.9 (#5481)

Co-authored-by: Thomas A Caswell <tcaswell@gmail.com>","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ModuleSetupCode.c']"
486b201c1ab7663874b4aa9c0b7c2aae27757ba8,2023-06-09 07:14:08,Matus Valo,"Use `PyObject_GC_IsFinalized` in Cython >= 3.9 (#5481)

Co-authored-by: Thomas A Caswell <tcaswell@gmail.com>","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ModuleSetupCode.c']"
6c316236df9254e893a2177ac4d872b42b706dd5,2023-06-07 20:53:30,da-woods,Fix a link,['docs/src/userguide/faq.rst']
e25bb00f387d7b856c1c7c0a3c9b5e9e0173dcfd,2023-06-07 20:26:37,Matti Picus,DOC: fix broken links (#5475),"['docs/src/userguide/faq.rst', 'docs/src/userguide/pypy.rst']"
0697908fd8b9755b84efff06c1fea93d5305fe9f,2023-06-05 09:03:38,Stefan Behnel,Let's make the next version a release candidate.,"['CHANGES.rst', 'Cython/Shadow.py']"
dfb89dc8c5f80a01143b67517fff6b5f01a3c67d,2023-06-05 08:18:12,Stefan Behnel,"Exclude crashing tests in Python 3.12.0b1.

See https://github.com/python/cpython/issues/104614",['runtests.py']
7423715b901e3fe09a454b919f83dcdf56eaa7b9,2023-06-05 07:52:49,Stefan Behnel,"Exclude crashing tests in Python 3.12.0b1.

See https://github.com/python/cpython/issues/104614",['runtests.py']
ef4874808804c2bb1e1660de17d8f97574dbd3b9,2023-06-02 07:47:52,Stefan Behnel,Update version.,['Cython/Shadow.py']
cdb511b0f53a4956f583d6a99d026f48d148161d,2023-06-02 07:47:35,Stefan Behnel,Update changelog.,['CHANGES.rst']
73980d3a572306c23156b0f009b8319066519b83,2023-06-05 07:37:23,da-woods,"Update numpy tutorial not to use deprecated/removed np.int (#5466)

Fixes https://github.com/cython/cython/issues/5457","['docs/examples/tutorial/numpy/convolve2.pyx', 'docs/src/tutorial/numpy.rst', 'docs/src/userguide/memoryviews.rst']"
1ea67911a779e4622340e49c0f55f0ec342ee1bf,2023-06-04 20:09:46,Ewout ter Hoeven,"wheel CI: Update cibuildwheel to v2.13.0 (GH-5468)

This commit updates cibuildwheel to v2.13.0 in the GitHub Actions wheel.yml CI workflow. cibuildwheel v2.13 adds CPython 3.12 support, under the prerelease flag CIBW_PRERELEASE_PYTHONS, among other things.",['.github/workflows/wheels.yml']
8892b021a3ceee623abccc0bfe1c705952c125f1,2023-06-02 07:29:15,Matti Picus,docs: Reformat the new FAQ page and link it from the userguide index (GH-5461),"['docs/src/userguide/faq.rst', 'docs/src/userguide/index.rst']"
0741c46da750a42b650e5c592d724b43e94ea5ce,2023-06-02 07:20:59,Matti Picus,Use pypy-3.9-v7.3.12rc2 instead of a nightly (GH-5459),['.github/workflows/ci.yml']
c3fed4c16b40291b2845ab3610a113fe639db471,2023-06-01 09:19:32,h-vetinari,"docs: Move FAQ from GH-Wiki to userguide (GH-5374)

See https://github.com/cython/cython/issues/4867","['docs/src/tutorial/strings.rst', 'docs/src/userguide/faq.rst', 'docs/src/userguide/migrating_to_cy30.rst']"
12f9d910b944cab69cbf6a93ba63c49266b8bda8,2023-06-01 09:08:45,da-woods,docs: Remove references to old CI systems (GH-5451),['docs/CONTRIBUTING.rst']
c1a5d174fa4f8814105bbd50400f651d3d7a960f,2023-06-01 08:37:31,Matti Picus,"Raise AttributeError inside ""Shadow.__getattr__()"" instead of ImportError (GH-5458)

Closes https://github.com/cython/cython/issues/5411","['Cython/Shadow.py', 'tests/run/test_shadow_error.py']"
03c498d3142ccee2da258c540e96f12c863159fc,2023-05-29 20:08:50,Stefan Behnel,"Avoid using the thread state attribute ""use_tracing"" in Python 3.12 where it was removed from the struct.

See PEP-669 (https://peps.python.org/pep-0669/) and the implementation in https://github.com/python/cpython/pull/103083.
There is more to be done to properly support PEP-669, but this makes it compile.

See https://github.com/cython/cython/issues/5450",['Cython/Utility/Profile.c']
d82e4e34582e908d315b912a60d81d5759850df5,2023-05-29 19:58:15,Stefan Behnel,"Fix the argument type passed into the new ""PyUnstable_Long_Compact*()"" C-API functions in CPython 3.12.",['Cython/Utility/TypeConversion.c']
d767357a65000d7cbdb71aa991e833d4970d5afc,2023-05-29 19:49:04,Stefan Behnel,"Use setuptools instead of distutils in test runner, as required by Python 3.12 (which removes distutils from the stdlib).",['runtests.py']
0f1ec03f6da2d9e65515a842a0248d1deff5b159,2023-05-29 19:09:28,Stefan Behnel,Fix C integer sign conversion warnings in Py3.12.,['Cython/Utility/TypeConversion.c']
21f306abbda9640ed487869529035a21794cc9e0,2023-05-28 14:49:29,Dimitri Papadopoulos Orfanos,Fix typos found by codespell (#5456),"['Cython/Compiler/Code.py', 'Cython/Compiler/Dataclass.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Debugger/libcython.py', 'Cython/Includes/libcpp/algorithm.pxd', 'Cython/Plex/Lexicons.py', 'Cython/TestUtils.py', 'Cython/Utility/Buffer.c', 'docs/conf.py', 'docs/src/userguide/memoryviews.rst', 'tests/run/check_size.srctree', 'tests/run/methodmangling_T5.py', 'tests/run/typed_slice.pyx']"
4ca84a028f1fa3dd388a5d8eb6204b9508cd4874,2023-05-27 07:22:59,da-woods,"Add troubleshooting section to docs (#5312)

* Add troubleshooting section to docs

This is mostly copied from my https://cython-guidelines.readthedocs.io
project. It seems a good candidate to be included in the official
docs.

* Add some automatic conversion stuff too","['docs/src/tutorial/embedding.rst', 'docs/src/userguide/external_C_code.rst', 'docs/src/userguide/index.rst', 'docs/src/userguide/language_basics.rst', 'docs/src/userguide/troubleshooting.rst', 'docs/src/userguide/wrapping_CPlusPlus.rst']"
21d3d0ba5f7ed9eb0f4249707dbe60f4242d826c,2023-05-27 07:21:34,da-woods,"Document different openmp command line argument on Windows (#5382)

It's a source of confusion",['docs/src/userguide/numpy_tutorial.rst']
8fff489581ed94d4585fa216fe02f92f51bb977e,2023-05-26 06:39:29,Stefan Behnel,Merge branch '0.29.x',[]
54b92e3d4f75225c55609076afd2d901be8326d2,2022-11-20 09:43:01,Marcel Stimberg,"Remove HTML template support from Tempita (#5128)

HTML templates (and the associated functions/classes `sub_html`, `html`,
`attr`, and `html_quote`) were not used by Cython itself, but were left
over from the original, general-purpose, Tempita tool. The HTML
templating relied on the cgi package, which is deprecated as of Python
3.11 and will be removed with Python 3.13 (meaning that merely importing
the tempita package currently raises a DeprecationWarning). More
specifically, it relied on the function `cgi.escape`, which was already
removed with Python 3.8. This clearly suggests that the code has not
been used by anyone, since no-one seems to have complained about this
breakage.

Fixes #3309",['Cython/Tempita/_tempita.py']
99a5cf8302d3a51eaff25bea8c124edea60dc8cd,2019-02-17 07:26:59,Stefan Behnel,Minor code modernisations in Tempita module to use the with-statement.,['Cython/Tempita/_tempita.py']
db7349c540f881cb608015a9c0a7718d5413183d,2023-05-24 20:46:06,da-woods,Another typo fix in CHANGES.rst,['CHANGES.rst']
9ced7756810132f58efd0fb2807cd559b6c5aa58,2023-05-24 20:45:03,da-woods,Fixed a couple of typos in CHANGES.rst,['CHANGES.rst']
7ef843c38557fb5c509ba5988fdff9c92afcf6a6,2023-05-24 20:37:55,Stefan Behnel,Merge branch '0.29.x',[]
6ff8a7e7c2730b03a81b7b0932fba17c19dc0c3a,2023-05-24 20:36:09,Stefan Behnel,"Fix undefined symbol when using ""__debug__"" in a module that does not also use ""assert"".","['Cython/Compiler/Builtin.py', 'tests/run/__debug__.srctree']"
15e21beea4ced4b72380eb8d3767374a6778b36f,2023-05-24 20:36:09,Stefan Behnel,"Fix undefined symbol when using ""__debug__"" in a module that does not also use ""assert"".","['Cython/Compiler/Builtin.py', 'tests/run/__debug__.srctree']"
639ada4ff5348336e4b492227753a89f7f56676b,2023-03-31 18:00:12,scoder,"Avoid deprecated Py_OptimizeFlag in Py3.12 (GH-5343)

* Work around the deprecation of Py_OptimizeFlag in Py3.12 by reading the value from the interpreter's current PyConfig.

See https://github.com/python/cpython/issues/99872

* Avoid access to PyConfig without holding the GIL when trying to read the old Py_OptimizeFlag. The flag was never meant to be modifiable and thus can be read once at module import time.

See https://github.com/python/cpython/issues/99872#issuecomment-1333763465","['Cython/Compiler/Builtin.py', 'Cython/Compiler/Nodes.py', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ModuleSetupCode.c']"
d73164b56544def09b65d250d72b227a38944bb1,2023-05-24 08:32:41,Stefan Behnel,Merge branch '0.29.x',[]
5cef4fa97285b32d1e7d78c57398c464106d14ab,2023-05-24 08:32:13,Stefan Behnel,Update changelog.,['CHANGES.rst']
12bbc6d14d72412dd66fbebf6014a98db09de6f1,2023-05-24 08:31:07,Stefan Behnel,Prepare release of 3.0.0b3.,"['CHANGES.rst', 'Cython/Shadow.py']"
94cd9e42f6771ddc717515aba5ac9b5286ec61d8,2023-05-24 08:27:52,Stefan Behnel,Update changelog.,['CHANGES.rst']
54ba76b34e0ac8242a185f8ceb40a713acf7cd63,2023-05-24 07:17:04,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
cca43b79d6e3c63ea71ef1230fdd8c7b21a79c77,2023-05-24 07:13:31,Stefan Behnel,Prepare release of 0.29.35.,"['CHANGES.rst', 'Cython/Shadow.py']"
4c5f1b4b3672b3c2a01612e32b671be8e101828b,2023-05-24 06:41:43,Stefan Behnel,"Fix sign usage in ""PyLong & C-long"" operator code.
We cannot call PyLong_CompactValue() directly because it entire PyLong checks for the value being compact. Thus, we need to calculate the last digit's signed value ourselves.",['Cython/Utility/Optimize.c']
f89268616749c620f296d3af498d2df53733eacc,2023-05-24 05:27:52,Matti Picus,"Unskip and fix some passing tests in PyPy (GH-5429)

Currently require a nightly PyPy build for Py3.9 to support async iteration and finalisation.

Avoid PyIter_Next() and call tp_iternext() instead because PyIter_Next() swallows StopIteration exceptions and thus looses the return value.

See https://foss.heptapod.net/pypy/pypy/-/issues/3280
See https://foss.heptapod.net/pypy/pypy/-/issues/3935","['.github/workflows/ci.yml', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'tests/pypy_bugs.txt', 'tests/run/async_iter_pep492.pyx', 'tests/run/error_pos.srctree', 'tests/run/test_asyncgen.py']"
736a10956193e4eb8f81c989b4e047c5a52d83fe,2023-05-23 20:16:54,Stefan Behnel,Merge branch '0.29.x',[]
0673bb1d323948494a73f5391c8509c24873522e,2023-05-23 20:16:44,Stefan Behnel,Work around doctest failures in Python 3.12.,['tests/run/py_classbody.py']
6cb2d864797e66797f127986dc5b2d8c19081e0c,2023-05-23 19:58:23,Stefan Behnel,Merge branch '0.29.x',[]
09af77fb5ea8196b010e1a39ae5ccff744af0d27,2023-05-23 19:52:31,Stefan Behnel,Move a comment to a better position.,['Cython/Compiler/Code.py']
7caf5af1ebeb707505fd1bf7a544196c03a12c34,2023-05-23 19:48:31,Stefan Behnel,Update incorrect code references in comments.,['Cython/Utility/Optimize.c']
6d6d49d2d6ab8b2198f4b35c48d00d0c1cf6a5a9,2023-05-23 19:38:18,Stefan Behnel,Avoid calling PyUnstable_Long_CompactValue() if we don't know that the value really is compact (i.e. small). CPython in debug mode guards against this.,['Cython/Utility/Optimize.c']
315b82b2374cfc1223767f798c065042236bcf84,2023-05-23 19:32:59,Stefan Behnel,Avoid a magic C constant and use a CPython provided macro instead.,['Cython/Utility/Builtins.c']
fca96f8b03380e85ace18b95c55dd41f972ac1a7,2023-04-14 08:57:25,Stefan Behnel,"Work around the new Py3.12 error message suggestions in doctests by not printing the exceptions.
In Py3.12, printing the AttributeError calls __getattr__(obj, '__dict__') to suggest typos, which changes the call counts to ""__getattr__"" in some of the tests.","['tests/run/__getattribute__.pyx', 'tests/run/__getattribute_subclasses__.pyx', 'tests/run/special_methods_T561.pyx']"
29c7fb39add896f127494bfa58e5d02a6c164d21,2023-05-23 16:51:27,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
78688bdb57eb9a7d86dd9301e748bfbfdb4bdbb6,2023-05-23 16:51:20,Stefan Behnel,Update changelog.,['CHANGES.rst']
55221b2c6ee2ee627d8eec351d9ee4cf41b5e6d7,2023-05-23 16:01:31,Stefan Behnel,Intern all keywords in the scanner to speed up comparisons etc.,"['Cython/Compiler/Scanning.pxd', 'Cython/Compiler/Scanning.py']"
d174856e86818f9b906a380048c2f5e4d94395fe,2023-05-23 15:47:45,Stefan Behnel,"Revert: Make sure that the string of the scanner symbol (sy) is also interned for identifiers, not just the symbol's text string (systring).
This fails to work in compiled Cython builds since ""scanner.sy"" is declared as ""unicode"", not ""EncodedString"".",['Cython/Compiler/Scanning.py']
70bf9f08d4013b9fd142f6787699b84938dabd58,2023-05-23 09:50:34,Stefan Behnel,Merge branch '0.29.x',[]
fa9b2e92301ce9fc61a802ba11c6183d2688e20c,2023-05-23 09:42:31,Stefan Behnel,"Reject ""except +nogil"" in favour of ""except + nogil"" since the first is almost certainly just a typo that has a different meaning.
Better implementation that avoids passing the whole parser context into the exception clause parser and instead parses the 'nogil' outside or the exception clause parsing function.

Also fixes the position reported for the user defined C++ exception handling function (at the beginning of the name instead of after the name).

Closes https://github.com/cython/cython/issues/5430","['Cython/Compiler/Parsing.py', 'tests/errors/e_cpp_nogil.pyx']"
393835b2936310c46671c0dfc4fd170eeb14e811,2023-05-23 09:42:31,Stefan Behnel,"Reject ""except +nogil"" in favour of ""except + nogil"" since the first is almost certainly just a typo that has a different meaning.
Better implementation that avoids passing the whole parser context into the exception clause parser and instead parses the 'nogil' outside or the exception clause parsing function.

Also fixes the position reported for the user defined C++ exception handling function (at the beginning of the name instead of after the name).

Closes https://github.com/cython/cython/issues/5430","['Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py', 'tests/errors/e_cpp_nogil.pyx']"
d21873d499d5e71edbc9836c1939fe69a49a612c,2023-05-23 09:10:57,Stefan Behnel,"Reject ""except +nogil"" in favour of ""except + nogil"" since the first is almost certainly just a typo that has a different meaning.

Closes https://github.com/cython/cython/issues/5430","['Cython/Compiler/Parsing.py', 'tests/errors/e_cpp_nogil.pyx']"
6e948a80a3c4db65beced9c89c453df7e1a57023,2023-05-23 08:53:13,Stefan Behnel,"Make sure that the string of the scanner symbol (sy) is also interned for identifiers, not just the symbol's text string (systring).",['Cython/Compiler/Scanning.py']
5e4bc04ee9a47c54c9c51ea92e3bf844d957c6ab,2023-05-23 08:38:18,Stefan Behnel,Add code comments about the scanner input state numbers.,['Cython/Plex/Scanners.py']
c2beb61001a966ab182a5059b543347218c55d75,2023-05-23 08:23:42,Stefan Behnel,Update the parseable Unicode character set in Lexicon.py from CPython 3.12.,['Cython/Compiler/Lexicon.py']
c6a249311e9eed9fdc0c1b9bc0cf6f1e333d4ca3,2023-05-23 08:06:16,Stefan Behnel,Use Unicode escapes in the generated Unicode character sets in Lexicon.py to make the file more manageable.,['bin/cython-generate-lexicon.py']
1517064865ae08eecbf90a02955376dfe41b9b0c,2023-05-22 08:31:45,Stefan Behnel,Fix two C signedness conversion warnings in a test.,['tests/run/slice_ptr.pyx']
ba82c22200d6f72f6e05e2ebebc39727892c4f09,2023-05-23 07:22:28,Stefan Behnel,"Update the 0.29.x CI setup to Ubuntu 20.04 to make it work again, and copy some more CI updates from the master branch.","['.github/workflows/ci.yml', '.github/workflows/wheel-manylinux.yml', 'Tools/ci-run.sh']"
98f24b15795ed95d1f7dce7c92c05e4d19b47062,2023-05-23 07:02:54,Matus Valo,"Avoid calling warning() before the Errors module is initialised (GH-5445)

Closes https://github.com/cython/cython/issues/5396","['Cython/Compiler/Main.py', 'tests/errors/dotted.module.pxd', 'tests/errors/dotted_filenames.pyx', 'tests/run/dotted_filenames.srctree']"
05ffe8f2a54f59bad0294ff8083fd604c84f1dec,2023-05-22 19:25:20,da-woods,"Allow the stdlib `dataclasses.dataclass` and `functools.total_ordering` decorators to be used directly on extension types (GH-5446)

Rather than requiring @cython.dataclasses.dataclass and @cython.total_ordering,
allow @dataclasses.dataclass and @functools.total_ordering directives to be used directly on a cdef class.

Also, let these two `@cython.*` decorators imply `@cython.cclass` when used, and do not require the additional decorator.

Closes https://github.com/cython/cython/issues/5292","['Cython/Compiler/Builtin.py', 'Cython/Compiler/Dataclass.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/ParseTreeTransforms.py', 'docs/examples/userguide/extension_types/dataclass.py', 'docs/examples/userguide/extension_types/dataclass.pyx', 'docs/examples/userguide/special_methods/total_ordering.py', 'docs/examples/userguide/special_methods/total_ordering.pyx', 'docs/src/userguide/extension_types.rst', 'docs/src/userguide/special_methods.rst', 'tests/errors/dataclass_e2.pyx', 'tests/errors/dataclass_e3.pyx', 'tests/run/exttype_total_ordering.pyx', 'tests/run/pure_cdef_class_dataclass.py', 'tests/run/test_dataclasses.pxi']"
4d28f8e1659012ca8d1a7f73c7c5ed58e76d5fe0,2023-05-22 08:23:37,Stefan Behnel,Show some more C compiler warnings in the CI test runs.,['Tools/ci-run.sh']
8d974dcebc92a54747afd8f271ac734b829c019f,2023-05-21 14:30:58,da-woods,"Fix access to __qualname__ and __module__ during class definition (#4812)

* Fix access to __qualname__ and __module__ during class definition

Fixes #4447

These need declaring at the class scope, and a bit of special-casing
in flow-control (since otherwise they're detected as undefined).
For cdef classes, they also need further special casing to replace
them by constants.

* Make property writeable

* Exclude pure test from Py3.4

Because the test is spawned in a slightly diffrent way, giving
a different module name

* Apply suggestions from code review

Co-authored-by: scoder <stefan_ml@behnel.de>

* Redid lookup in cdef class, avoid lazy attribute

* Try to fix parent_type everywhere

* Remove blank line

* Apply style suggestions

* Cleaned up comments a little

* Comment

* Fix style inconsistencies

---------

Co-authored-by: scoder <stefan_ml@behnel.de>","['Cython/Compiler/FlowControl.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'tests/run/qualname.py', 'tests/run/qualname.pyx']"
b462eec9899988a8d9c6637669ad8fcf1e3988ab,2023-05-21 09:16:04,Stefan Behnel,"Use unstable PyLong functions in Py3.12b1, if defined.

See https://github.com/python/cpython/pull/101685",['Cython/Utility/TypeConversion.c']
50a03531660dee859f9554e39dd3ed424734e2ef,2023-05-21 08:51:47,Stefan Behnel,Increase CI job timeout to avoid build failures on Windows.,['.github/workflows/ci.yml']
61c079e30828e75f4ce6579568394e035d2bd565,2023-05-19 19:54:40,scoder,"Avoid generating dead code in the special binop method handling helpers. (GH-5420)

Closes https://github.com/cython/cython/issues/5418",['Cython/Utility/ExtensionTypes.c']
a174dcd02f1f662b61f66953929709fbb47b605e,2023-05-18 12:01:56,Lisandro Dalcin,"Add a directive `embedsignature.format` to configure autodoc/embedsignature (GH-5415)

Allows to select plain Python type annotations as output format as well as the Argument Clinic format.","['Cython/Compiler/AutoDocTransforms.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Shadow.py', 'docs/src/userguide/source_files_and_compilation.rst', 'tests/run/embedsignatures.pyx', 'tests/run/embedsignatures_clinic.pyx', 'tests/run/embedsignatures_python.pyx', 'tests/run/fused_types.pyx']"
90ecf373ca22496380d91c5db1c5a25cd8a0c4d8,2023-05-18 11:52:40,scoder,"Adapt the exception handling to Py3.12a6 which replaces the (type, value, tb) exception triplet with a single ""tstate->current_exception"" value. (GH-5442)","['Cython/Compiler/ExprNodes.py', 'Cython/Debugger/libpython.py', 'Cython/Utility/Coroutine.c', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c']"
822952ff49a6df6e31bfc8302851544e06e2fc42,2023-05-18 10:20:09,matttyson,"Check definition of ""__STDC_VERSION__"" macro before usage (GH-5443)

Clang gets upset when an undefined macro is used.","['Cython/Utility/Complex.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/ModuleSetupCode.c']"
d86fc182071e4cf7378c86e28fd3b13b994f1448,2023-05-16 06:49:58,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
8af954f812f78d5258cb8440b13cc6944eccf940,2023-05-16 06:39:06,Stefan Behnel,Disable fast Py_SIZE(PyLong) check in Py3.12a7+ since it's no longer valid there.,"['CHANGES.rst', 'Cython/Utility/TypeConversion.c']"
fbe6162b0eee8c49b294ceb6af5fbe9aa0b9e6c2,2023-05-16 06:21:43,Matti Picus,"Keep the ""tp_print"" slot for PyPy < 3.10 and CPython < 3.9 (GH-5437)","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ModuleSetupCode.c']"
dec61cdd222ded6d5f96a635d9c4b0dddcbc4e78,2023-05-15 20:07:30,scoder,"Custom int128 conversion as a slow fallback (GH-5419)

* Use a custom (although slow) PyLong->cint128 conversion if ""_PyLong_AsByteArray()"" is missing (in PyPy/Limited API).
* Avoid large integer conversion for enum types (where shift etc. don't work well).","['Cython/Compiler/PyrexTypes.py', 'Cython/Utility/TypeConversion.c', 'runtests.py', 'tests/run/int128.pyx']"
580ceee71fd890b86678ec3c41b6a2b73b18440f,2023-05-15 18:52:34,Stefan Behnel,Merge branch 'master' of git+ssh://github.com/cython/cython,['Cython/Utility/CppConvert.pyx']
f797c86c31f4bceabb386278f0d1686cb218da9b,2023-05-15 18:51:07,Philipp Wagner,"Fix a signedness compiler warning in vector.to_py (GH-5438)

When compiling cythonized code which uses `std::vector` we get the
following compiler warning on GCC 8 and Python 3.9 (which is turned into
an error in our case):

```
my_file.cpp: In function ‘PyObject* __pyx_convert_vector_to_py_int(const std::vector<int>&)’:
my_file.cpp:4716:33: warning: comparison of integer expressions of different signedness: ‘Py_ssize_t’ {aka ‘long int’} and ‘size_t’ {aka ‘long unsigned int’} [-Wsign-compare]
   for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
                       ~~~~~~~~~~^~~~~~~~~~~
```

The generated code in question is as follows:

```
/* ""vector.to_py"":75
 *     cdef object item
 *
 *     for i in range(v.size()):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v.size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;
```

`__pyx_t_5` is of type `‘Py_ssize_t’` (signed), and `__pyx_t_4` aka
`__pyx_t_3` is `size_t` (unsigned), causing GCC to rightfully complain.

Fix the generated code by explicitly using the signed variant of the
vector's size in the loop.

This bug has been introduced in
https://github.com/cython/cython/pull/4081, which also contains some
discussion on the use of signed vs unsigned types. This patch chooses to
keep the status quo and only fixes the compiler warning.",['Cython/Utility/CppConvert.pyx']
cd882212a6ddfc90b6760be44b95e2389dde4949,2023-05-15 18:27:32,Stefan Behnel,Merge branch '0.29.x',[]
38f6a5670c7004172502fee41d990519e2163666,2023-05-15 18:18:47,scoder,"Prevent calling the dealloc slot of a non-GC base class with GC tracking enabled. (GH-5432)

This shows warnings in CPython (3.12) debug builds and can lead to crashes when GC triggers on an object while deallocating it.","['Cython/Compiler/ModuleNode.py', 'tests/run/exttype_gc.pyx']"
663c924462adec202c9f469fa346bda1b2264dfa,2023-05-15 18:18:47,scoder,"Prevent calling the dealloc slot of a non-GC base class with GC tracking enabled. (GH-5432)

This shows warnings in CPython (3.12) debug builds and can lead to crashes when GC triggers on an object while deallocating it.","['Cython/Compiler/ModuleNode.py', 'tests/run/exttype_gc.pyx']"
a2db6deb18a64ca08da2f1298808fe5e1d460415,2023-05-07 14:53:29,Matti Picus,enable passing datetime tests on PyPy (#5427),['tests/pypy_bugs.txt']
918f78228b87c2d56f67b4fc634393fc3b8d2586,2023-05-04 08:09:34,Lisandro Dalcin,Support PyBufferProcs with Limited C-API under Py3.9+ or Py3.11+ (GH-5422),"['Cython/Compiler/Nodes.py', 'Cython/Compiler/TypeSlots.py']"
e11ff38357fb928cbc207184e2dd1c60c2344571,2023-05-04 07:59:47,Stefan Behnel,Remove useless parentheses.,['Cython/Compiler/TypeSlots.py']
fd3b9bbaf3a8e4c83dd18a4ce099607b38d66933,2023-05-04 06:51:47,Stefan Behnel,"Remove the useless check that the struct field visibility is the same as the struct's visibility. This is assured by syntax.

See https://github.com/cython/cython/pull/5386","['Cython/Compiler/Nodes.py', 'Cython/Compiler/Symtab.py']"
dee8906fe77cb27ce35b835f1b2dc0093ad92cb3,2023-05-03 07:59:43,Matus Valo,Keep 'extern' visibility in context of struct/union to properly infer 'noexcept' for function pointer fields (GH-5386),"['Cython/Compiler/Nodes.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/Symtab.py', 'tests/errors/cfuncptr.pyx', 'tests/run/extern_impl_excvalue.srctree']"
df0df659747cf8d1b716c04ae9eef83f27d7bfe9,2023-05-03 07:05:08,Lisandro Dalcin,"Silence GCC -Wsign-conversion (GH-5421)

* Silence GCC -Wsign-conversion when using CYTHON_LIMITED_API
* Silence GCC -W[sign-]conversion with invocations to PyUnicode_FromOrdinal","['Cython/Compiler/Builtin.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Plex/Machines.pxd', 'Cython/Plex/Machines.py', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/TypeConversion.c']"
236e705d644247415baacf0a6d38b6e85379cce1,2023-05-02 07:14:06,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
6a901e1256d85695bc98808795c4b53badfedfc8,2023-05-02 07:04:21,Stefan Behnel,Update changelog.,['CHANGES.rst']
b774109f7c54d7b5c25991f45649abc19871c5cd,2023-05-02 06:59:20,Stefan Behnel,"Allow users to override CYTHON_PEP489_MULTI_PHASE_INIT in PyPy 3.9+.

See https://github.com/cython/cython/issues/5413
Improves on https://github.com/cython/cython/pull/5414",['Cython/Utility/ModuleSetupCode.c']
a27f7bc48d9212171f35d692dcdedfa8f8c85df4,2023-05-02 06:07:46,Matti Picus,Use CYTHON_PEP489_MULTI_PHASE_INIT on PyPy 3.9 (GH-5414),['Cython/Utility/ModuleSetupCode.c']
4fa1f93b6e9a32bb384400b1dee1da0fe0262eca,2023-05-02 06:59:20,Stefan Behnel,"Allow users to override CYTHON_PEP489_MULTI_PHASE_INIT in PyPy 3.9+.

See https://github.com/cython/cython/issues/5413
Improves on https://github.com/cython/cython/pull/5414",['Cython/Utility/ModuleSetupCode.c']
755c4944203316fab2b179afb326177ec3b71119,2023-05-02 06:23:44,matttyson,"Fix usage of _MSC_VER macro (GH-5417)

Change #if to #ifdef so we don't get undefined macro warnings on non microsoft compilers.",['Cython/Utility/ModuleSetupCode.c']
d62bc6d633bb30d9c9656469f2c553b4e77de9c9,2023-05-02 06:07:46,Matti Picus,Use CYTHON_PEP489_MULTI_PHASE_INIT on PyPy 3.9 (GH-5414),['Cython/Utility/ModuleSetupCode.c']
0d34008a1746827519589d2e85bc3f54819d47ca,2023-04-30 13:19:32,Matus Valo,Catch ValueError when calling memoryview() to avoid leaking implementation details (GH-5406),"['Cython/Compiler/FusedNode.py', 'tests/memoryview/numpy_memoryview.pyx']"
10cf5f6e18dbce625d32407a857cc06dd2cec637,2023-04-30 10:02:48,Lisandro Dalcin,"CmdLine: Fix regression when using the `--working` option (GH-5365)

Checking for the existence of source files must account for the
user-specified working directory. If the source filename is not absolute,
prepend the working directory if specified, then perform the check.","['Cython/Compiler/CmdLine.py', 'Cython/Compiler/Tests/TestCmdLine.py']"
cdce132997b60ace744da88572ee457e3a9444de,2023-04-28 09:36:56,da-woods,"Fix parsing of bracketed then called context managers (GH-5404)

Require the bracketed multiple context managers to be followed by a
colon, so that the bracketed called context manager is identified as
regular parentheses in old-style syntax.

Fixes https://github.com/cython/cython/issues/5403","['Cython/Compiler/Parsing.py', 'tests/run/withstat_py.py']"
31d847ea1e64714dd75017c68f70aedc566eccb9,2023-04-27 09:43:21,da-woods,Merge branch '0.29.x',[]
bba7d3db9e1404efe3bf53f9010f90e22fe59a5b,2023-04-27 09:32:39,Matti Picus,prepare cython for PyPy3.10 (#5408),"['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
8b9a9b332f54c9840834612b392c65385a7dae71,2023-04-27 09:32:39,Matti Picus,prepare cython for PyPy3.10 (#5408),"['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
c73d2d0c2f4596e6e27dd72a692cfcd59569082a,2023-04-25 06:15:59,Stefan Behnel,"Use the generally available Py_ssize_t instead of the less widespread ssize_t.

See https://github.com/cython/cython/pull/5394#issuecomment-1521199083",['Cython/Utility/TypeConversion.c']
1aef71764cd50e4cd2f638eac8e69fff3ced2224,2023-04-24 17:15:44,Stefan Behnel,"Use unsigned C integer type when validating the C value of a compact PyLong.

Closes https://github.com/cython/cython/pull/5394",['Cython/Utility/TypeConversion.c']
3ce72e1f0ee3c02ca1e3eb7385810ee4b5d5acee,2023-04-24 11:11:12,Stefan Behnel,Move C-only test out of Python test file.,"['tests/run/pure.pyx', 'tests/run/pure_py.py']"
8e0d4df40d1bca3d44eb185f74d6f4d23be4b213,2023-04-24 10:55:30,Stefan Behnel,"Warn about useless directives that do not change the previous setting.
Also, make sure that we correctly allow resetting directives, even if the new value is the same as the value from outside (since we might already have set it differently in the same directives block).","['Cython/Compiler/ParseTreeTransforms.py', 'tests/errors/pure_errors.py', 'tests/run/pure_py.py']"
d88426829e413ea02780c6502c686de099eb368b,2023-04-24 10:48:42,Stefan Behnel,"Disallow @cfunc being applied to a @ufunc.

Closes https://github.com/cython/cython/issues/5399","['Cython/Compiler/ParseTreeTransforms.py', 'docs/examples/userguide/numpy_ufuncs/ufunc.py', 'docs/examples/userguide/numpy_ufuncs/ufunc_ctuple.py', 'docs/examples/userguide/numpy_ufuncs/ufunc_fused.py', 'tests/errors/pure_errors.py']"
91b08978873bd49360afeb9d298c874c11cb963e,2023-04-24 10:44:09,Stefan Behnel,"Treat @total_ordering directive like @cfunc/@ccall directives by excluding it from the normal directives dict unless it's being used.
Also, remove it from the active directives once it's been used, to prevent it from appearing in nested structures.","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Options.py']"
0cc6b283d093ccbfd0dd4c350fb1cc9c789f07dc,2023-04-24 09:51:07,Stefan Behnel,Treat @ufunc directive like @cfunc/@ccall directives by excluding it from the normal directives dict unless it's being used.,"['Cython/Compiler/Options.py', 'Cython/Compiler/ParseTreeTransforms.py']"
3d68fce3350e209a7d9e3ce338cba53fc2f39f28,2023-04-24 09:26:48,Stefan Behnel,Disallow @cfunc together with @ccall on the same function.,"['Cython/Compiler/ParseTreeTransforms.py', 'tests/errors/pure_errors.py']"
3fa5510872ee38b8019429b1bc360dce72ec2179,2023-04-21 08:24:27,Stefan Behnel,"docs: change ""(...)"" ctuple syntax to ""tuple[...]"" in Python annotations.","['docs/examples/userguide/numpy_ufuncs/ufunc_ctuple.py', 'docs/src/userguide/language_basics.rst']"
07a72c33dcceb861600449682aa4ed2492b5ac00,2023-04-21 07:36:00,Stefan Behnel,"Allow assigning ctuples from arbitrary sequences, not just tuples. The code was there anyway, just needed moving around a bit.","['Cython/Utility/TypeConversion.c', 'tests/run/ctuple.pyx']"
be73c3cb8f30b79867bcc3e78cfc30e932486ec5,2023-04-21 07:05:50,Stefan Behnel,"Improve error message when assigning tuples of incorrect size to a ctuple. Previously, it said ""Expected tuple of size 4, got tuple"", which is unhelpful and confusing.","['Cython/Utility/TypeConversion.c', 'tests/run/ctuple.pyx']"
eb79e600256440895561fcb8404e486c77b2842c,2023-04-21 06:57:34,Stefan Behnel,"Ignore (and warn about) simple type-tuples in annotations (like ""(int, int)"") and require ""tuple[int, int]"" instead.

Closes https://github.com/cython/cython/issues/5397","['Cython/Compiler/ExprNodes.py', 'tests/run/annotation_typing.pyx', 'tests/run/ctuple.pyx']"
1183af2c99c62af93bf6fe89bc13a5772fb4f10b,2023-04-23 16:33:30,Vyas Ramasubramani,"Add an example of a custom exception handler. (#5334)

* Add an example of a custom exception handler.

* Make sure to mention that any custom exception would work just as well",['docs/src/userguide/wrapping_CPlusPlus.rst']
bcb6c0e1af0086b7900db518e73e61e48ee5167b,2023-04-21 06:25:20,scoder,"Avoid Python int object creation when multiplying sequences with C integers (GH-5213)

* Avoid redundant subtree analysis in MulNode when multiplying sequences with unknown types.
* Avoid Python int creation when multiplying sequences with integers.
* Also allow a cint mult_factor for sequences, avoiding Python coercion if possible.
* Also optimise (int * ctuple), which will eventually end up as a Python tuple as well.
* Make sure we only apply a ""mult_factor"" to a Python sequence (not ctuples), and make the re-analysis of TupleNode a little safer.","['Cython/Compiler/Builtin.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Utility/ObjectHandling.c', 'tests/run/seq_mul.py', 'tests/run/unicodemethods.pyx']"
a75afc03415f1b887434991ac0db2de0e6555ed7,2023-04-20 21:03:19,Lisandro Dalcin,Fix regression in code generation order for cdef classes (GH-5395),"['Cython/Compiler/ModuleNode.py', 'tests/run/cdef_class_order.pyx']"
f570f8dec0565ef820d888f837645b2ae3b681fa,2023-04-20 18:05:29,da-woods,"[docs] Table for annotation typing rules (#4887)

* [docs] Table for annotation typing rules

* Add back ""tips and tricks""

* Move table into an external csv

It's much easier to maintain there, while editing rst tables
is a real pain

* Update docs/src/tutorial/annotation_typing_table.csv

* Update docs/src/tutorial/pure.rst

Co-authored-by: scoder <stefan_ml@behnel.de>

---------

Co-authored-by: scoder <stefan_ml@behnel.de>","['docs/src/tutorial/annotation_typing_table.csv', 'docs/src/tutorial/pure.rst']"
4e772113e900c2a9d9ac5058cb96f77cad1daeb8,2023-04-20 17:08:45,da-woods,"Distinguish 'api' import functions from different Cython versions (GH-5383) (#5390)

Fixes issue with changed signature for these functions between Cython releases

Issue was reported here: https://github.com/cython/cython/pull/5289#issuecomment-1509371606","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Naming.py', 'Cython/Utility/ImportExport.c']"
cfb9973aff60fe01747020de94bb30c0e306c5bd,2023-04-20 07:57:14,Yue Yang,Make memoryviews with aliased item types comformable (GH-5375),"['Cython/Compiler/PyrexTypes.py', 'tests/memoryview/memoryview.pyx']"
2a2608081dab528b2e28a3c729c049436e7ce8e6,2023-04-17 11:22:52,da-woods,"Distinguish 'api' import functions from different Cython versions (GH-5383)

Fixes issue with changed signature for these functions between Cython releases

Issue was reported here: https://github.com/cython/cython/pull/5289#issuecomment-1509371606","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Naming.py', 'Cython/Utility/ImportExport.c']"
56b30f2e2cbf964eb5b1d1ea4448963d58301035,2023-04-14 09:21:28,Stefan Behnel,"Refactor __Pyx_PyCode_New() to avoid ""dead code"" warnings and special error cases.",['Cython/Utility/ModuleSetupCode.c']
6d8c4ffa5261684e4428e10388d3e6daeb3d7daf,2023-04-14 08:57:25,Stefan Behnel,"Work around the new Py3.12 error message suggestions in doctests by not printing the exceptions.
In Py3.12, printing the AttributeError calls __getattr__(obj, '__dict__') to suggest typos, which changes the call counts to ""__getattr__"" in some of the tests.","['tests/run/__getattribute__.pyx', 'tests/run/__getattribute_subclasses__.pyx', 'tests/run/special_methods_T561.pyx']"
8610a5421305f3e470f6f8a6d93c5cd9d05a7711,2023-04-14 07:42:45,Stefan Behnel,Try to silence clang warning about dead code.,['Cython/Utility/Overflow.c']
d3f8684423999483b29a0333b826f02fc391d667,2023-04-14 06:56:12,Stefan Behnel,Fix optimised PyLong abs() implementation in Py3.12.,['Cython/Utility/Builtins.c']
a2d514a180c5238cac56e5fd6d8c8a27b22ae8a5,2023-04-13 12:11:44,Matus Valo,"Document the new `CYTHON_EXTERN_C` macro (GH-5366)

See https://github.com/cython/cython/pull/5371","['docs/src/userguide/external_C_code.rst', 'docs/src/userguide/migrating_to_cy30.rst']"
ea2c8770db75f6bede759acaba9c9af14b1163b7,2023-04-13 09:33:45,Stefan Behnel,Update changelog.,['CHANGES.rst']
2ea40bbccf2b0e85b88c0bbaa107edc38d0fd690,2023-04-13 09:32:37,scoder,"Add a ""CYTHON_EXTERN_C"" macro to allow redefining ""__PYX_EXTERN_C"" on user side (GH-5371)

See https://github.com/cython/cython/pull/5366

Add a warning for users who already defined ""__PYX_EXTERN_C"" before that there is a new macro for this.
Also try to reverse-engineer expressive names for the different test cases.","['Cython/Compiler/ModuleNode.py', 'tests/run/cpp_extern.srctree']"
09484713cead73353ef3354e96677e0c7b6e293f,2023-04-13 07:50:01,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
0dd38bf8acbc0822986e7f4f196321e661abed53,2023-04-13 07:41:33,da-woods,"Fix issues with partially optimized cascaded comparisons (GH-5357)

If a cascaded comparison is partially optimized (i.e. only some
of the comparisons are optimized) then the result types must end up
consistent all the way through. At the moment we select PyObject
which probably isn't the most efficient option, but is the
easiest to implement

We do not require the whole cascaded optimization to succeed.
Instead, we can just get Python comparisons as bool, and just ensure
that the entire cascade has the same type","['Cython/Compiler/ExprNodes.py', 'tests/run/cascmp.pyx']"
0a944e51e400b69a38a96d9d0d6ec075841dd4dc,2023-04-13 07:24:02,Stefan Behnel,Update changelog.,['CHANGES.rst']
1768af53a37f6ea49d46743ee34301cb42a97395,2023-04-09 06:38:46,Stefan Behnel,Fix argument type in call to PyGen_GetCode().,['Cython/Utility/Coroutine.c']
5f050d675ad6f63cf330ede553a97f03439d2c26,2023-04-13 07:05:36,Stefan Behnel,"Temporarily disable the FastGIL feature in CPython 3.12 until we have a working fix for the new thread state handling.

Closes https://github.com/cython/cython/issues/5345
See https://github.com/cython/cython/issues/5372",['Cython/Utility/ModuleSetupCode.c']
7ceda0d3b1abd4dc4a798496db7ffc467386abc9,2023-04-13 06:39:29,da-woods,"Handle additions to ""_DataclassParams"" signature in Py3.12 dataclasses (GH-5368)

Fixes https://github.com/cython/cython/issues/5346

Uses a potentially slightly inefficient helper function
to inspect the signature of dataclasses.field and
dataclasses._DataclassParams and drop any arguments that are
unsupported (i.e. ones that we're passing because they apply to
later Python versions).","['Cython/Compiler/Dataclass.py', 'Cython/Utility/Dataclasses.c', 'Cython/Utility/Dataclasses.py']"
7a2c9412f6937a944b1b472cc91fe59e7f727429,2023-04-11 08:21:04,0dminnimda,"Add .readthedocs.yaml (GH-5370)

Backports https://github.com/cython/cython/pull/5254
Closes https://github.com/cython/cython/issues/5364",['.readthedocs.yaml']
d0bbecb7fba10f8a992972ea824b55a851646938,2023-04-09 06:38:46,Stefan Behnel,Fix argument type in call to PyGen_GetCode().,['Cython/Utility/Coroutine.c']
a5bb829bbc538467d1fe557b6001a4c1c5a88bd9,2023-04-06 06:27:08,Stefan Behnel,Avoid another potential signedness issue in the new PyLong code.,['Cython/Utility/TypeConversion.c']
8bf72408e867b873b1c7015aa4959f789fdba79a,2023-04-06 06:20:05,0dminnimda,"Remove unintended duplicate of `IS_UNSIGNED_IMPL` and make the macro generally available (GH-5358)

Closes https://github.com/cython/cython/issues/5356
Fixes https://github.com/cython/cython/pull/5302","['Cython/Utility/Buffer.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/Overflow.c', 'tests/pypy2_bugs.txt', 'tests/run/buffer_n_overflowcheck_T5356.pyx']"
f927b02799d7b5482f503903fe6a47f16fc4b86c,2023-04-06 06:09:51,Stefan Behnel,"Fix signedness issues in support for the new PyLong struct layout in Py3.12a7.

Closes https://github.com/cython/cython/issues/5360",['Cython/Utility/TypeConversion.c']
781b087c90817a312e3dc6dd55ef174a798b98d8,2023-04-05 13:09:30,scoder,"Implement support for the new PyLong struct layout in Py3.12a7. (GH-5353)

See https://github.com/python/cpython/pull/102464","['Cython/Utility/Builtins.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c']"
975bd86dcd5e1c816a8bdf00f269befe7f872185,2023-04-05 12:47:54,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
e3c2587f1cbd257c22e703475541c9d782ff7dc3,2023-04-05 12:44:53,Stefan Behnel,Update changelog.,['CHANGES.rst']
f5bf43e3aa1c408358b7b928e0736890a9dc8477,2023-04-05 12:38:56,Lisandro Dalcin,Fix AnnotationWriter for IndexNode with empty TupleNode (GH-5355),"['Cython/CodeWriter.py', 'tests/run/embedsignatures.pyx']"
f408cd056e56002ecfe61418286c8daaa1edfe95,2023-04-05 12:38:56,Lisandro Dalcin,Fix AnnotationWriter for IndexNode with empty TupleNode (GH-5355),"['Cython/CodeWriter.py', 'tests/run/embedsignatures.pyx']"
4c9d7eb3a048e7089e8bda5387f63455226e3be8,2023-04-04 07:58:21,Stefan Behnel,"Fix preprocessor guard around utility function to avoid ""unused"" warnings.",['Cython/Utility/Exceptions.c']
c1025fcf9a7ef52c1fa81eceb7a49f257d8f0db8,2023-04-03 18:45:10,Stefan Behnel,Remove special macOS CI targets as they can just be part of the build matrix.,['.github/workflows/ci.yml']
eed3482456f7133e8a6632c71c6e97e7f5a42936,2023-04-03 18:23:21,Stefan Behnel,Remove Py3.4 from CI targets since it's no longer available for Ubuntu 20.04.,['.github/workflows/ci.yml']
8d0ba5dc50ab4865ae625c4deef6dd1bb03e7453,2023-04-03 15:20:33,Stefan Behnel,Remove outdated apt package from CI setup.,['Tools/ci-run.sh']
57eeda7c6177d19e0294c404fc3b2df018cb2dc8,2023-04-03 15:05:48,Stefan Behnel,"Move CI to Ubuntu 20.04 to fix failures.

See deprecation in https://github.com/actions/runner-images/issues/6002",['.github/workflows/ci.yml']
2ee78381cb0473dc3eabd4ea1d3f14b56cd19092,2023-04-03 09:35:49,scoder,"Refactor the label interception code in for-loop nodes to do the iterator cleanup before entering the 'else' branch. (GH-5352)

Originally proposed in https://github.com/cython/cython/issues/5347#issuecomment-1493260542",['Cython/Compiler/Nodes.py']
51133945ca02ab8d5cbed969987f99ca518e8e26,2023-04-02 15:47:23,Stefan Behnel,Update changelog.,['CHANGES.rst']
c7a5877d045907b12e96bcb96da751cdbed0f2bb,2023-04-02 15:26:38,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
81cc29aedc0d0df69e81812cb8321cc0bcf41065,2023-04-02 10:39:29,Stefan Behnel,Prepare release of 0.29.34.,"['CHANGES.rst', 'Cython/Shadow.py']"
f1928e23e48e2d786f2f58ef9e9b2ebd0e1e4320,2023-03-31 12:34:19,Stefan Behnel,"Disable ""pylong"" and ""longintrepr"" tests in Py3.12 that accessed PyLongObject struct fields that were removed.",['runtests.py']
6ec06e19bc2ced59ba6a5e7f553109895c5dba08,2023-04-02 10:30:08,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
062d11f4a5fce863cacd7a3cf661db8862ebdad8,2023-04-02 10:29:00,Stefan Behnel,Update changelog.,['CHANGES.rst']
c96d7fd4f9589ccb308048c14a506684f911a3cc,2023-03-31 12:19:17,Stefan Behnel,"Avoid accessing ""PyGenObject->gi_code"", which was removed in CPython 3.12a6 and replaced with a C-API function.

See https://github.com/python/cpython/pull/100749",['Cython/Utility/Coroutine.c']
74573879df24fc23202ddcebc6501cae6f881c18,2023-03-31 11:45:22,Stefan Behnel,"Add an explicit (although unnecessary) ""noexcept"" marker to the ""PyCapsule_Destructor"" function type to document explicitly that it must not emit exceptions.

See https://github.com/scipy/scipy/issues/17234","['Cython/Includes/cpython/pycapsule.pxd', 'tests/run/pycapsule.pyx']"
5d7e798e945b36ef47c124759053e6a17f255b81,2023-04-02 08:34:27,scoder,Refactor label interception code in for-loop and exception handling nodes to reduce redundancy. (GH-5350),"['Cython/Compiler/Code.py', 'Cython/Compiler/Nodes.py']"
6d950ddf7fc6b60d549651d01f089f639d7dcf5a,2023-04-01 21:58:16,Stefan Behnel,Merge branch '0.29.x',"['Cython/Compiler/Nodes.py', 'tests/run/for_in_break_continue_T533.pyx']"
4c42949b47eff1bce921fae71ed93ec359dd32a4,2023-04-01 18:52:13,Stefan Behnel,"Fix a reference leak when a for-loop's ""else:"" branch contains a ""break"" for an outer loop.

Closes https://github.com/cython/cython/issues/5347","['Cython/Compiler/Nodes.py', 'tests/run/for_in_break_continue_T533.pyx']"
dacb26cec739a2afa2ba9d305f05504168612bf8,2023-03-31 18:00:12,scoder,"Avoid deprecated Py_OptimizeFlag in Py3.12 (GH-5343)

* Work around the deprecation of Py_OptimizeFlag in Py3.12 by reading the value from the interpreter's current PyConfig.

See https://github.com/python/cpython/issues/99872

* Avoid access to PyConfig without holding the GIL when trying to read the old Py_OptimizeFlag. The flag was never meant to be modifiable and thus can be read once at module import time.

See https://github.com/python/cpython/issues/99872#issuecomment-1333763465","['Cython/Compiler/Builtin.py', 'Cython/Compiler/Nodes.py', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ModuleSetupCode.c']"
f7c073ff83e7489e32f1264c6837f38555a62e5b,2023-03-31 12:34:19,Stefan Behnel,"Disable ""pylong"" and ""longintrepr"" tests in Py3.12 that accessed PyLongObject struct fields that were removed.",['runtests.py']
d5c014f63d422b1d1e004bc0e9a37907ab29c1cb,2023-03-31 12:19:17,Stefan Behnel,"Avoid accessing ""PyGenObject->gi_code"", which was removed in CPython 3.12a6 and replaced with a C-API function.

See https://github.com/python/cpython/pull/100749",['Cython/Utility/Coroutine.c']
1177bd64a3f5ce7fc9cf3e7c1421bc9aef2937dc,2023-03-31 11:45:22,Stefan Behnel,"Add an explicit (although unnecessary) ""noexcept"" marker to the ""PyCapsule_Destructor"" function type to document explicitly that it must not emit exceptions.

See https://github.com/scipy/scipy/issues/17234","['Cython/Includes/cpython/pycapsule.pxd', 'tests/run/pycapsule.pyx']"
eaf0b3d7f51830f182fc503f5722b6f8ea0c71ac,2023-03-30 05:55:24,Stefan Behnel,CI: Disable NumPy usage in Py3.12 since it does not work there yet.,['test-requirements-312.txt']
5acdf3dfb7329ddfc0a4bb1b19b55ca9b34e9259,2023-03-29 12:53:00,Stefan Behnel,"docs: Provide more examples and a clearer wording for the ""noexcept"" migration guide.",['docs/src/userguide/migrating_to_cy30.rst']
d21e74b069a4a803f5447793629686dbab6077ef,2023-03-29 07:22:33,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
d0d1cde6ffa20ac823c857909692e285d731778c,2023-03-29 07:16:26,Stefan Behnel,Update changelog.,['CHANGES.rst']
9c81e19edfc2db7f4055b5716da145ad381ec38f,2023-03-24 07:03:35,Eli Schwartz,"Do not attempt to write out a depfile on failure (GH-5291)

This would be pretty useless as it cannot be used -- the output file
does not exist either. But as it happens, on error, the output file is
reset to None, so instead we triggered a python traceback while trying
to write a depfile for `os.path.relpath(None, cwd)` that was written
to `None+'.dep'`",['Cython/Compiler/Main.py']
a121544a0a5117f194e99c363e23c3d3596cc080,2023-03-29 07:11:02,Harmen Stoppels,"Allow globally forcing C file regeneration by setting the env var CYTHON_FORCE_REGEN=1, e.g. from external build systems. (GH-5307)",['Cython/Build/Dependencies.py']
c23bdf33810ce1da6b5c1af5c6d62b82dc00fa9c,2023-03-28 06:40:14,Stefan Behnel,Fix typo in C comment.,['Cython/Utility/TypeConversion.c']
d8251f86b593e3927e7fedc90c30664dcb562060,2023-03-28 05:51:43,Daniele Nicolodi,"Disable fast thread state access in CPython 3.12a6 (GH-5339)

CPython 3.12a6 made PyThreadState an opaque structure thus the fast
thread state optimization cannot be employed as it is any more.

Closes https://github.com/cython/cython/issues/5286",['Cython/Utility/ModuleSetupCode.c']
fe9c51f680553528d6fcd9122e4855ebd4c13055,2023-03-27 09:39:32,Stefan Behnel,Merge branch 'master' of git+ssh://github.com/cython/cython,"['Cython/Compiler/ParseTreeTransforms.py', 'tests/errors/e_invalid_special_cython_modules.py']"
79b045108742248f4d785352349bb63dc668aee2,2023-03-27 06:58:21,da-woods,"Improve error message for 'cimport cython.floating' (GH-5295)

Tries to provide some helpful hints for https://github.com/cython/cython/issues/5288
where people may be trying to cimport directives/types as if they were a module.","['Cython/Compiler/ParseTreeTransforms.py', 'tests/errors/e_invalid_special_cython_modules.py']"
eaa4407a63396c0d1068b277447174205934674c,2023-03-27 06:56:53,Stefan Behnel,Update release date.,['CHANGES.rst']
fdd604a8ab5b7070c0c95a79442b09bf02a6ea1d,2023-03-26 13:48:20,Stefan Behnel,Prepare release of 3.0.0b2.,['Cython/Shadow.py']
0cb46d005ff8c09cabec350a0d8801b92c1dfe3f,2023-03-26 13:47:59,Stefan Behnel,Update changelog.,['CHANGES.rst']
ba6e0cad79697ff3d65ad569de57377c8c7cd149,2023-03-26 12:48:00,Chia-Hsiang Cheng,"Allow InterpretCompilerDirectives.visit_AnnotationNode() to process nodes that have no children (GH-5336)

Closes https://github.com/cython/cython/issues/5235","['Cython/Compiler/ParseTreeTransforms.py', 'tests/run/annotation_typing.pyx']"
0ffa7e91816a00a1694d1466aa91613b6708b244,2023-03-25 12:26:46,Stefan Behnel,readme: Cython is more a Python compiler than a new language; include download count.,['README.rst']
2a0d703048db48b31cc7ed84d8fe6aff46c60469,2023-03-25 12:17:18,da-woods,"Allow soft-complex->double coercion to run without gil (#5287)

It'll only need the GIL on failure (which it can get)
and ""power of"" type maths is the soft of thing that people are
likely already doing in nogil blocks","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/UtilNodes.py', 'Cython/Utility/Complex.c', 'tests/run/cpow.pyx']"
b8b378712bc74627f266f3ba6c13751af8e1991f,2023-03-24 07:21:32,Stefan Behnel,Merge branch '0.29.x',[]
43ce5588fb97fba407e1af04195c01b4d710453c,2023-03-24 07:06:25,Miro Hrončok,"Account for possible extension type struct padding when calculating the itemsize for the ""size changed"" check (GH-4894) (GH-5289)

Backported from https://github.com/cython/cython/pull/4894","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ImportExport.c']"
8a787ad1fcd3989d5bd3afffd234157873ab5dc3,2023-03-24 07:03:35,Eli Schwartz,"Do not attempt to write out a depfile on failure (GH-5291)

This would be pretty useless as it cannot be used -- the output file
does not exist either. But as it happens, on error, the output file is
reset to None, so instead we triggered a python traceback while trying
to write a depfile for `os.path.relpath(None, cwd)` that was written
to `None+'.dep'`",['Cython/Compiler/Main.py']
d3a6d90ffda05e4d571b6f5134b77d6df4fab04b,2023-03-24 06:56:04,Jonathan Helgert,Add declarations for C++20 mathematical constants (GH-5309),"['Cython/Includes/libcpp/numbers.pxd', 'tests/run/cpp_stl_numbers.pyx']"
2ea4f96af474fd818621bcaca4d2578d558e0908,2023-03-23 14:04:09,da-woods,Add documentation about the GIL (GH-5310),"['docs/src/quickstart/cythonize.rst', 'docs/src/tutorial/pure.rst', 'docs/src/userguide/index.rst', 'docs/src/userguide/nogil.rst']"
5d6ddfc128952c6b99f126d58012b74f099b9377,2023-03-23 10:37:52,Ralf Gommers,"Add a test for relative cimport within a submodule (GH-5320)

This test mirrors the structure of SciPy's `linalg.cython_blas`, `linalg.cython_lapack` and `special.cython_special` modules.

Original bug was resolved in master by https://github.com/cython/cython/pull/4552 (https://github.com/cython/cython/commit/0c8dea13946833606ab7e290d51cd12aee077c04)",['tests/run/relative_cimport.srctree']
168f39ef567ee10634b48f1576b72b77efc002b7,2023-03-23 08:34:21,Stefan Behnel,Add simple code style checks for non-Python source files.,"['Cython/Compiler/FlowControl.pxd', 'Cython/Compiler/Visitor.pxd', 'Cython/Includes/cpython/bool.pxd', 'Cython/Includes/cpython/bytes.pxd', 'Cython/Includes/cpython/exc.pxd', 'Cython/Includes/cpython/list.pxd', 'Cython/Includes/cpython/mapping.pxd', 'Cython/Includes/cpython/marshal.pxd', 'Cython/Includes/cpython/pycapsule.pxd', 'Cython/Includes/cpython/ref.pxd', 'Cython/Includes/cpython/sequence.pxd', 'Cython/Includes/cpython/string.pxd', 'Cython/Includes/cpython/tuple.pxd', 'Cython/Includes/libc/errno.pxd', 'Cython/Includes/libcpp/algorithm.pxd', 'Cython/Includes/libcpp/any.pxd', 'Cython/Includes/libcpp/atomic.pxd', 'Cython/Includes/libcpp/bit.pxd', 'Cython/Includes/libcpp/cmath.pxd', 'Cython/Includes/libcpp/execution.pxd', 'Cython/Includes/libcpp/limits.pxd', 'Cython/Includes/libcpp/list.pxd', 'Cython/Includes/libcpp/numeric.pxd', 'Cython/Includes/libcpp/set.pxd', 'Cython/Includes/openmp.pxd', 'Cython/Includes/posix/fcntl.pxd', 'Cython/Includes/posix/stat.pxd', 'Cython/Includes/posix/uio.pxd', 'Cython/Runtime/refnanny.pyx', 'Cython/Utility/CpdefEnums.pyx', 'Cython/Utility/MemoryView.pyx', 'Cython/Utility/UFuncs.pyx', 'Demos/callback/cheese.pyx', 'Demos/spam.pyx', 'docs/src/quickstart/demo.pyx', 'runtests.py']"
617b9280f77cfb1464e59b1016cfb80a6c5a2ead,2023-03-23 09:19:59,da-woods,"Restore 0.29.x handling of None fused memoryviews (GH-5298)

Partial fix for https://github.com/cython/cython/issues/5297

Ideally I think we should do something cleverer,
but this'd complicated memoryview dispatch significantly.
This PR just restores the 0.29.x behaviour where None matches the first type.","['Cython/Compiler/FusedNode.py', 'tests/run/fused_types.pyx']"
d95c1a385ee60372bab2b001000f269154c3e6a5,2023-03-23 07:28:38,Stefan Behnel,Merge branch '0.29.x',[]
cc4164032416bfa0f15d8fa03525239a8b0658f6,2023-03-22 21:27:12,da-woods,"Fix ufunc GIL handling (#5332)

It looks like Numpy releases the GIL for us (unless it's PyObject
arguments), so we should assume that we don't have the GIL, and
write code to regain it if needed, rather than assuming we need
to release the GIL.

Fixes #5328","['Cython/Compiler/UFuncs.py', 'Cython/Utility/UFuncs.pyx', 'tests/run/ufunc.pyx']"
bcc80cf9edfe19283ea8ad3d3aef57515ff09712,2023-03-22 20:30:02,scoder,"Fix the relative-first import scheme for language_level=2 in Python 3. (GH-5329)

Since https://github.com/cython/cython/commit/4993ba6a0194c2fbcf438ae2833f43c33781148d,
we returned the top-level package module instead of the module that was actually imported
with its dotted name (""collections"" instead of ""collections.abc"").

Closes https://github.com/cython/cython/issues/5308
See https://github.com/cython/cython/issues/2854","['Cython/Compiler/ExprNodes.py', 'Cython/Utility/ImportExport.c', 'tests/run/importas_from_package.srctree']"
6af714dbd3338d8a77a4db9d88d8504fb67a188c,2023-03-22 08:18:06,Tomáš Hrnčiar," Use a more correct and specific CPython internals guard in __Pyx_Raise(). (GH-5330)

This is a backport of https://github.com/cython/cython/commit/1dba3d3b44ce942dafe4c77dec4c64def22c57e1 from Cython's master branch.

See https://github.com/cython/cython/issues/5238#issuecomment-1426853108",['Cython/Utility/Exceptions.c']
10aa1bf6821398c8d0e881e5348c2930df6d0b04,2023-03-21 18:07:42,da-woods,Document the nongil except* performance pitfall (#5327),"['docs/src/userguide/language_basics.rst', 'docs/src/userguide/migrating_to_cy30.rst']"
65b26bca80498209ff77fd87831c7407f81e5340,2023-03-21 17:00:05,Max Bachmann,"Allow IS_UNSIGNED macro to handle const types (GH-5302)

This adds support for constant types in the `IS_UNSIGNED` macro (and prefixes it with `__PYX_`) to fix #5301 without reducing const correctness. It uses the same implementation used for the C++11 type_trait `std::is_unsigned`: https://en.cppreference.com/w/cpp/types/is_unsigned

Closes https://github.com/cython/cython/issues/5301","['Cython/Compiler/Buffer.py', 'Cython/Utility/Buffer.c', 'Cython/Utility/Overflow.c']"
7bb7ff04cac4047cb425acbf4e53cc94bc396c0a,2023-03-20 09:38:44,da-woods,"Fix exception handling in memoryview utilitycode (GH-5325)

The new exception-handling semantics meant that the utility
code always had to check for exceptions on some void nogil functions
(requiring us to re-acquire the GIL). This made performance
noticeably worse under some circumstances.

Fix this by making the exception specifications noexcept
for quite a few cdef functions in the memoryview utility code.

Fixes https://github.com/cython/cython/issues/5324","['Cython/Utility/MemoryView.pyx', 'tests/compile/fused_redeclare_T3111.pyx', 'tests/errors/pure_warnings.py', 'tests/memoryview/memoryview_no_withgil_check.pyx']"
c8b434c6041de474998fa3a9e779b8340c5b1f71,2023-03-17 20:40:00,Chia-Hsiang Cheng,Fix missing exported C function declarations with cimport_from_pyx enabled (#5318),"['Cython/Compiler/FusedNode.py', 'Cython/Compiler/ModuleNode.py', 'tests/run/cimport_from_pyx.srctree']"
31bc1bcfc5e7710a44f9c27bbac882596eea250d,2023-03-17 09:27:59,0dminnimda,"Limit the cname length for generated number constants since some C compilers cannot handle long names (GH-5293)

Closes https://github.com/cython/cython/issues/5290","['Cython/Compiler/Code.py', 'tests/run/large_integer_T5290.py']"
66ccf4a7642ad315d030fdaec1ac4abedd49ee59,2023-03-16 20:56:06,Maximilien Colange,Add support for C++ std::any (#5314),"['Cython/Includes/libcpp/any.pxd', 'tests/run/cpp_stl_any.pyx']"
7c6fe44c830e25f90fac8d78fe462dd676c6e5d5,2023-03-16 09:27:21,Stefan Behnel,Add a test for relative cimports from `__init__.pxd` files.,['tests/run/relative_cimport.srctree']
60cef898a4324a69bc90bcdcd51c10e312b100d8,2023-03-16 09:02:02,Stefan Behnel,"Make sure that we include all user C code in the annotated HTML output by resetting the position around the user code generation.
Previously, it could happen that the C code of the last source line was not included if the subsequently generated (internal) C code was not related to a user code line.",['Cython/Compiler/ModuleNode.py']
429e9aa08e8936c2a2c6f8306db6cccf5cc131f7,2023-03-16 08:25:39,Stefan Behnel,"Tree assertions: while stripping Cython code, also remove all style information from the HTML file before searching for C code patterns to shorten the file content.",['Cython/TestUtils.py']
71d754d82aa75376bacf702350dc110efe3ff53e,2023-03-16 07:54:58,da-woods,"Fix FakeReference on C++03 by avoiding C++11 features (GH-5317)

Apparently default function template parameters aren't allowed (and they don't seem to be needed here anyway)

Closes https://github.com/cython/cython/issues/5316",['Cython/Utility/ModuleSetupCode.c']
1796c7d4eadc6f1783f5894af8b0b2bd3c9741a3,2023-03-11 10:12:09,Jonathan Helgert,"Add libcpp.cmath (#5262)

This PR adds the C++ STL cmath header. It's mainly motivated by the new C++17 mathematical special functions (like assoc_laguerre, assoc_legendre, beta, ...) and the C++20 linear interpolation function lerp. However, all other functions are already in libc.math, so I'm not really sure if we should have them in both libc.math and libcpp.cmath.","['Cython/Includes/libcpp/cmath.pxd', 'runtests.py', 'tests/macos_cpp_bugs.txt', 'tests/run/cpp_stl_cmath_cpp17.pyx', 'tests/run/cpp_stl_cmath_cpp20.pyx']"
f089ff9d568f5925866703bebdb5e87060498c6c,2023-03-07 08:19:11,Stefan Behnel,Merge branch '0.29.x',[]
21e64ec20619d9ac530030a8e0c259912af10407,2022-11-29 06:55:55,Matti Picus,"Disable ""py_unicode_strings"" test in Py3.12, which removed the support for it.

Picked from https://github.com/cython/cython/commit/9d38bf8d620fd09166a5469c76b54f66d7fbd828",['runtests.py']
1f9bda18d70737aaa885a87af5173f785b23a418,2023-03-07 08:04:27,Stefan Behnel,Merge branch '0.29.x',"['tests/run/special_methods_T561.pyx', 'tests/run/special_methods_T561_py3.pyx']"
d883ccdec11dabc41e43e98ff4e12da5649e6316,2023-03-07 08:02:53,Stefan Behnel,Allow Py3.12 AttributeError suggestions in doctest output.,"['tests/run/special_methods_T561.pyx', 'tests/run/special_methods_T561_py3.pyx']"
ba28b10aa9abd0aff1e53052c3581ca6a3af0d0a,2023-03-07 07:43:49,Stefan Behnel,Merge branch '0.29.x',[]
3397705da036bb2df4a5b8b4bf08dbad7bdb409f,2023-03-07 07:43:06,Stefan Behnel,Stop using PyLong internals and dict versioning in Py3.12 for 0.29.x (handled differently in master).,['Cython/Utility/ModuleSetupCode.c']
3aa553034683703da8fdea7e163282eff11147bf,2023-03-07 07:35:06,Stefan Behnel,Merge branch '0.29.x',[]
34cb80b335d0e0a7913a80310ee33e21ec1d10c9,2023-03-07 06:57:25,0dminnimda,"[ENH] Improve GH issue templates (GH-5223)

* Use separate fields for environment information in bug reports.
* Order the templates explicitly.
* Add a reference to the mailing list.","['.github/ISSUE_TEMPLATE/1_bug_report.yml', '.github/ISSUE_TEMPLATE/2_feature_request.yml', '.github/ISSUE_TEMPLATE/3_blank_issue.yml', '.github/ISSUE_TEMPLATE/config.yml', '.github/ISSUE_TEMPLATE/other.md']"
a12638ffd2dd2c3b336d2069eac68c95fa224d86,2023-03-06 18:40:28,0dminnimda,"Renovate docs/README (#5255)

- change it to markdown and add `.md` in the name
- update the windows guide, no need to use a different command
- move unclear notes into a hidden toggle (I am not even sure if we need this info)
- update the requirements, add an installation instruction
- general cleanup","['docs/README', 'docs/README.md']"
23dabe42bdd63d5971a5e0369e23745a36040e1f,2023-03-06 08:20:52,Matus Valo,[0.29.x] IpythonMagic: Replace deprecated imp.load_dynamic() by importlib (GH-5300),"['Cython/Build/Inline.py', 'Cython/Build/IpythonMagic.py']"
85945aae8ad42440fc3bf5f7c9be64a0a68b2952,2023-03-05 11:53:15,Chia-Hsiang Cheng,"Allow nested C++ names after a module name (#5229)

Allow code like the following to compile:

cimport m

def my_func():
    cdef m.CppClass.NestedClass c

where m is a module, CppClass is a C++ class and NestedClass is a nested class inside CppClass.","['Cython/Compiler/Nodes.py', 'tests/run/cpp_nested_classes.pyx', 'tests/run/cpp_nested_names.pxd', 'tests/run/cpp_nested_names_helper.h']"
e552cfb779dd69d784823d070a8aaf29547796d6,2023-03-05 09:56:46,0dminnimda,"Allow 3.12-dev in limited-api to fail (GH-5294)

Fixes CI failure due to a NumPy incompatibility",['.github/workflows/ci.yml']
761ae4fb151e3d74e470a8c315cfa7fd4522aa46,2023-03-04 14:17:31,Matus Valo,Doc: Migrate Numpy ufunc to pure python (#5281),"['docs/examples/userguide/numpy_ufuncs/ufunc.py', 'docs/examples/userguide/numpy_ufuncs/ufunc.pyx', 'docs/examples/userguide/numpy_ufuncs/ufunc_ctuple.py', 'docs/examples/userguide/numpy_ufuncs/ufunc_ctuple.pyx', 'docs/examples/userguide/numpy_ufuncs/ufunc_fused.py', 'docs/examples/userguide/numpy_ufuncs/ufunc_fused.pyx', 'docs/src/userguide/numpy_ufuncs.rst']"
94bea667714567b9091aa25f2ca200c7b4e4f04c,2023-03-01 18:17:36,da-woods,"Fix annotation typing of Optional[tuple] (#5272)

Allow it to use a Py-tuple instead of a ctuple","['Cython/Compiler/PyrexTypes.py', 'tests/run/pep526_variable_annotations.py']"
c788bde390d7fcd0cdb51e715b283ceefdc70206,2023-03-01 18:14:30,da-woods,"Order merged_in utility code (#5282)

Force utility code to come before pxd code which comes before
module code. This specifically fixes #5269, (where the ""ToPy""
functions for cpdef enums weren't availbale when cyfunctions
were created). But I think it's a good idea anyway.","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Pipeline.py', 'tests/run/cpdef_enums.pyx']"
c125e5576e11965f660f07f7cffb71f79c776890,2023-03-01 08:46:49,Eli Schwartz,"Fix depfile generation on Windows, across different drives (GH-5283)

Since its first implementation in commit https://github.com/cython/cython/commit/9db1fc39b31b7b3b2ed574a79f5f9fd980ee3be7,
depfiles try to calculate relative paths for files relative to the project
base dir. This usually worked, but fails when the output directory is being
used from another Windows drive letter. This can happen for build systems that
encourage out of source build directories. When that happens, the logical
thing to do is to use an absolute path anyway. That's what those build systems
do as well, so the resulting depfiles still align with the build system manifest.

(cherry picked from master commit https://github.com/cython/cython/commit/038f94e9fd9e3b7ff279b3bd2627e974b94cb946)

See https://github.com/cython/cython/pull/5279",['Cython/Utils.py']
91d2ed5c9ede93f0742596f5ad130bfdcd0968b2,2023-03-01 08:21:58,Stefan Behnel,Add more recent Limited-API CI builds (Py3.11/3.12).,['.github/workflows/ci.yml']
a9d47ef3490f39342f1d50c582ec70a03507f3da,2023-03-01 08:17:41,Stefan Behnel,Remove trailing whitespace.,['CHANGES.rst']
a3da27d241a597b194265ffc2cec0f8beaf071b4,2023-03-01 08:15:55,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
0df24962b9747552e95d3d676ed23142e97b8cdf,2023-03-01 08:12:04,Stefan Behnel,Merge branch '0.29.x' of git+ssh://github.com/cython/cython into 0.29.x,"['CHANGES.rst', 'setup.py']"
f7f79f2c4172992303939e25fb4878ea10424892,2023-03-01 08:09:08,Stefan Behnel,"Add a test for libc.stdlib, specifically for exception declarations on the callback used by qsort.",['tests/run/libc_stdlib.pyx']
a8f4f066b547c6d76466a4a814160124534acd99,2023-03-01 08:01:34,da-woods,"Fix some issues when optimising the builtin memoryview (GH-5271)

Error in capitalization.
Closes https://github.com/cython/cython/issues/5270 

Context managers were being optimized into a non-working state when involving a CloneNode.
Closes https://github.com/cython/cython/issues/5268","['Cython/Compiler/Builtin.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Utility/Builtins.c', 'tests/run/builtin_memory_view.pyx']"
be5425f16b0af4b922fa790e767b548335da2620,2023-02-28 19:21:40,Matus Valo,[0.29] Document noexcept in CHANGES.rst (#5273),['CHANGES.rst']
038f94e9fd9e3b7ff279b3bd2627e974b94cb946,2023-02-28 19:15:37,Eli Schwartz,"fix depfile generation on Windows, across different drives (#5279)

Since its first implementation in commit 9db1fc39b31b7b3b2ed574a79f5f9fd980ee3be7,
depfiles try to calculate relative paths for files relative to the project
base dir. This usually worked, but fails when the output directory is being
used from another Windows drive letter. This can happen for build systems that
encourage out of source build directories. When that happens, the logical
thing to do is to use an absolute path anyway. That's what those build systems
do as well, so the resulting depfiles still align with the build system
manifest.",['Cython/Utils.py']
31e9bb73988fd6c77bcc419d702df748feb24b4a,2023-02-27 08:36:38,da-woods,"Fix cleanup of non-py-object constants on module close (GH-5265)

Not all `py_constants` are actually `py_constants` so they need to be checked before generating clean-up code.
Since this fact is a source of bugs (like this one), it should be cleaned up. `py_constants` should be limited to Python constants (or get a more accurate name, but it seems reasonable to have such a list of things that need cleanup).

Issue found in https://github.com/cython/cython/pull/5261",['Cython/Compiler/Code.py']
e76027a00f029b889c39e060c616fda2658453b5,2023-02-27 08:29:32,da-woods,Add a missing pointer cast to the Limited API code (GH-5266),['Cython/Utility/ExtensionTypes.c']
2e8122902969d3aa2cbd71fd2d9c2727ca980122,2023-02-27 08:27:09,da-woods,"Fix unicode iteration in Limited API (GH5264)

`__Pyx_PyUnicode_READ()` for the limited API just uses 'data' as the unicode object. Bring the initialization for unicode iteration in line with that definition.

Issue found in https://github.com/cython/cython/pull/5261",['Cython/Utility/Optimize.c']
007c58c06ef5f9fd3c59e61aaeeb4adce815eb23,2023-02-25 19:40:30,Stefan Behnel,Update changelog.,['CHANGES.rst']
ab2451783666ef5c25f6784201ac24a8d3038e7f,2023-02-25 19:35:27,da-woods,"Support auto-generation of Numpy ufuncs (GH-4803)

Provides a decorator to automatically transform a cdef function into a Numpy ufunc (with the loop embedded in the function so hopefully pretty efficient).

Closes https://github.com/cython/cython/issues/4758","['Cython/Compiler/Options.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/UFuncs.py', 'Cython/Compiler/UtilNodes.py', 'Cython/Tempita/_tempita.py', 'Cython/Utility/NumpyImportArray.c', 'Cython/Utility/UFuncs.pyx', 'Cython/Utility/UFuncs_C.c', 'docs/src/tutorial/memory_allocation.rst', 'docs/src/userguide/external_C_code.rst', 'docs/src/userguide/glossary.rst', 'docs/src/userguide/index.rst', 'docs/src/userguide/numpy_ufuncs.rst', 'docs/src/userguide/parallelism.rst', 'tests/run/ufunc.pyx']"
9fdcbb2bd88c75296972231728434888f81a9bc8,2023-02-25 19:30:44,Matus Valo,"Show warning when annotation type is unknown (GH-5079)

Closes https://github.com/cython/cython/issues/5070","['Cython/Compiler/ExprNodes.py', 'docs/examples/userguide/buffer/matrix.py', 'tests/errors/dataclass_e5.pyx', 'tests/errors/pure_warnings.py']"
77f749e4503908a5e3ee68a4e8edebbd6d6e8b7a,2023-02-25 14:35:10,Stefan Behnel,Update changelog and prepare 3.0beta1 release.,"['CHANGES.rst', 'Cython/Shadow.py']"
3a2e365d288e52652fc689841f3b8e97d00dc233,2023-02-25 13:51:53,Max Bachmann,Add recently added CPython exception C-API functions (GH-5257),['Cython/Includes/cpython/exc.pxd']
a927f89deb121dd539a4ea41d8fa179e73b093ab,2023-02-25 11:19:21,Stefan Behnel,Shorten line to make style checker happy.,['tests/run/pep526_variable_annotations.py']
4a462d9e2cd9058bc1f834ff7c6de04847fd3545,2023-02-25 10:59:51,Stefan Behnel,Optimise PNG images.,"['docs/src/tutorial/htmlreport_py.png', 'docs/src/tutorial/htmlreport_pyx.png']"
e92a9c8e0f81ca8ac4eef45d635bb8412911c13b,2023-02-25 10:57:38,Stefan Behnel,"Make test pass after adding float inference in GH-5234. We should really be inferring either Python float or C double from the Python type annotation of 'x' instead, but as it stands, we infer the types from the ctuple assignment.",['tests/run/pep526_variable_annotations.py']
8db63cf0944998819fb70d9639d53ff777ec8ac1,2023-02-24 09:04:27,da-woods,"Make unused **keyword argument show up in locals() (GH-4899)

If you had a function
```
def f(**kwds):
  return locals()
```
then 'kwds' would not appear in locals. Found while investigating
one of the coverage gaps listed in
https://github.com/cython/cython/issues/4163.

```
allow_null = all(ref.node.allow_null for ref in self.starstar_arg.entry.cf_references)  # 3772 ↛ exit
if allow_null:    # 3773 ↛ 3774
    code.putln(""%s = NULL;"" % (self.starstar_arg.entry.cname,))
```
This uncovered code was wrong and has been removed. The only way
I can see to have an `allow_null` reference to the ** argument
would be to use `locals()`, and in this case an empty dict
should be generated.","['Cython/Compiler/Nodes.py', 'tests/run/locals.pyx']"
6037b9066f4762e08ca2220922784d1cbd22d4cc,2023-02-24 08:57:56,da-woods,"Support pyobject memoryviews in annotations (GH-4987)

Closes https://github.com/cython/cython/issues/4907

Also bumps ""pure"" version requirement in test because of the need to use __future__.annotations.","['Cython/Compiler/ExprNodes.py', 'tests/memoryview/memoryview_annotation_typing.py']"
db51a5497614566eaddf2ec5f7185134634bd463,2023-02-24 08:53:40,da-woods,"Fix an initialization reference counting error in the Limited API (GH-4994)

Supersedes https://github.com/cython/cython/pull/3702 (but fixes the same error).

PyInit_* needs to return a new reference to the module object
so effectively we have to transfer ownership of a reference
to __pyx_m.

Also pay a bit more attention to cleaning up on the error path.

Closes https://github.com/cython/cython/pull/3702
Co-authored-by: Matthias Braun <matze@braunis.de>",['Cython/Compiler/ModuleNode.py']
e8029ad116a2e8d01e5d349b5c9453d9b24ed195,2023-02-24 08:46:26,da-woods,"Improve ""subscript typing"" of builtins (GH-5058)

The builtin 'list', 'dict' etc can now be subscripted in the
same way that classes in the 'typing' module can be. The entries
in the typing module are now just aliases of the builtin types.

Also fix a crash where the type is inferred as None (#4975).

Closes https://github.com/cython/cython/issues/5033
Closes https://github.com/cython/cython/issues/4951
Closes https://github.com/cython/cython/issues/4975","['Cython/Compiler/Builtin.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'tests/run/pep526_variable_annotations.py']"
e4857a2d07915f2100186267b3fcde0c8877cc5a,2023-02-24 08:17:17,da-woods,"Infer C float in ""safe"" type inference (GH-5234)

Previously, only 'double' was inferred.","['Cython/Compiler/TypeInference.py', 'tests/run/pep526_variable_annotations.py', 'tests/run/type_inference.pyx']"
2eb8ece91b740e704a628216c7777c1c6aab5f21,2023-02-21 18:58:44,da-woods,Change docs/conf to preserve themes on sphinx4+,['docs/conf.py']
b0bdd69ca37dabebaa98ec4ed07c02177d26a75a,2023-02-21 18:12:49,da-woods,Downgrade jinja2 for version conflict reasons,['doc-requirements.txt']
d0db12ee2bfcdcc756a6dbf2e4d3b8a345444b16,2023-02-21 18:11:01,da-woods,Downgrade sphinx-tabs for version conflict reasons,['doc-requirements.txt']
c0c6205b6961abbab281dad6ed16bbfad2f6f476,2023-02-21 18:06:21,da-woods,Downgrade sphinx version (2),['doc-requirements.txt']
202ad7cabe4c1e9830fe8069efbf2450db7b61e3,2023-02-21 18:01:21,da-woods,Downgrade minimum sphinx version,['doc-requirements.txt']
9b5a89155ad2f3403b219d4d398c2c597fe9500c,2023-02-21 08:28:12,da-woods,"Update doc-requirements.txt

readthedocs was failing to build, allegedly because of outdated
requirements.",['doc-requirements.txt']
1b66e9e2d86d5b7ea7fb9d8c11ded8f63bcc4c6e,2023-02-20 19:50:44,0dminnimda,Add .readthedocs.yaml (#5254),['.readthedocs.yaml']
cf9c2f07de36ecc4e4aa21999a7e7982df59b881,2023-02-18 12:32:46,Matus Valo,"[docs] Softdeprecated C style array declaration in favour of Java style declaration (#5248)

Co-authored-by: GalaxySnail <me@glxys.nl>","['docs/examples/tutorial/cython_tutorial/primes.pyx', 'docs/examples/userguide/buffer/matrix_with_buffer.pyx', 'docs/examples/userguide/language_basics/compile_time.pyx', 'docs/examples/userguide/memoryviews/quickstart.pyx', 'docs/src/tutorial/htmlreport_py.png', 'docs/src/tutorial/htmlreport_pyx.png', 'docs/src/userguide/language_basics.rst']"
1c3a212084744ab52c3e928857a636c312c8f20e,2023-02-13 09:22:37,Stefan Behnel,"Fix PyLong digits access in CPython 3.12.
Needed after https://github.com/python/cpython/pull/101292

See https://github.com/cython/cython/issues/5238","['Cython/Utility/Builtins.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c']"
58d5fed61cc4fa4718d50bfee42bdcf8071c5636,2023-02-13 09:44:27,Stefan Behnel,"Disable access to the ""ma_version_tag"" dict field in CPython 3.12 since PEP 699 deprecates it.

See https://github.com/cython/cython/issues/5238

See https://peps.python.org/pep-0699/
See https://github.com/python/cpython/issues/101152",['Cython/Utility/ModuleSetupCode.c']
1dba3d3b44ce942dafe4c77dec4c64def22c57e1,2023-02-13 08:05:22,Stefan Behnel,"Use a more correct and specific CPython internals guard in __Pyx_Raise().

See https://github.com/cython/cython/issues/5238#issuecomment-1426853108",['Cython/Utility/Exceptions.c']
b24286d35aaaf1318cd2bebb10e3e16d72965a5b,2023-02-06 17:21:34,da-woods,"[docs] Parallelization tutorial (#5184)

Parallelization tutorial to try to explain prange/parallel in a little more user-friendly way","['docs/examples/tutorial/parallelization/manual_work.py', 'docs/examples/tutorial/parallelization/manual_work.pyx', 'docs/examples/tutorial/parallelization/median.py', 'docs/examples/tutorial/parallelization/median.pyx', 'docs/examples/tutorial/parallelization/norm.py', 'docs/examples/tutorial/parallelization/norm.pyx', 'docs/examples/tutorial/parallelization/normalize.py', 'docs/examples/tutorial/parallelization/normalize.pyx', 'docs/examples/tutorial/parallelization/parallel_sin.py', 'docs/examples/tutorial/parallelization/parallel_sin.pyx', 'docs/examples/tutorial/parallelization/setup.py', 'docs/src/tutorial/index.rst', 'docs/src/tutorial/parallelization.rst']"
67b7a7b448de58d2bf50d611d36991e3e3372aae,2023-02-06 17:14:44,Hugo van Kemenade,Declare support for Python 3.11 (#5244),['setup.py']
ac6dd0a28b84f333f0203a63ff5fab4da32001b6,2023-02-06 17:14:44,Hugo van Kemenade,Declare support for Python 3.11 (#5244),['setup.py']
d888842ed8efec0d859dc5978900bb08161d7835,2023-01-30 14:35:54,da-woods,Avoid C++ warnings when initializing module state (GH-5236),['Cython/Compiler/ModuleNode.py']
5ab7c44f9a4f1822a84cacd4b7f030f9db394f39,2023-01-25 13:48:50,scoder,"Make sure we parse int(Py_UCS4) as a digit and not a plain character value integer (GH-5217)

Closes https://github.com/cython/cython/issues/5216","['Cython/Compiler/Optimize.py', 'Cython/Utility/Builtins.c', 'tests/run/py_ucs4_type.pyx']"
488c31c2978633e9e0b03a8eb7e854add3328acc,2023-01-25 13:30:23,Stefan Behnel,Fix test.,['tests/errors/tree_assert.pyx']
d725b375b8419a46a03bec650f73f59acc984b60,2023-01-25 10:21:49,Stefan Behnel,Tests: Show offending position instead of decorator position if negative tree assertion fails.,['Cython/TestUtils.py']
685c3bdf066015016bc25a7016ff7d61b1274580,2023-01-24 09:42:36,0dminnimda,"Fix bound class methods when unpacking builtin method calls (GH-5219)

The general optimization for unpacking builtin method calls was breaking bound classmethods
(with crashes on Py2 and wrong answers on Py3).

Closes https://github.com/cython/cython/issues/5051
Closes https://github.com/cython/cython/pull/5075

Co-authored-by: da-woods <dw-git@d-woods.co.uk>","['Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'tests/run/bytearraymethods.pyx', 'tests/run/bytesmethods.pyx', 'tests/run/dict.pyx']"
56b76887b31ce9205804030105dab456961916b5,2023-01-24 09:36:19,Stefan Behnel,"Prevent arbitrary test requirement files in pip installations etc. from interfering with the ccache.

See https://github.com/cython/cython/issues/5221",['.github/workflows/ci.yml']
69b6107922efe895f83441b4b9d4dd64ff3d46b6,2023-01-23 21:39:36,da-woods,"Avoid unnecessary coercion to Python on int comparisons (#4821)

Fixes some of https://github.com/cython/cython/issues/4819 (although
there's a second issue about applying this more generally to binops).

It works by always generating a second utility code function with
a bint result type and substituting that out if needed. This is
on the basis that the coercion is likely to be sufficiently
common that the code generation is worth the effort","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'tests/run/pyintop.pyx']"
d36fd38a6d4dfee3c4f24ba26153e7c446e8e442,2023-01-20 20:18:49,Alexander Shadchin,"Switch from deprecated `.setDaemon()` (#5220)

`threading.Thread` supports enabling daemon mode through property `.daemon` begin from Python 2.6",['runtests.py']
891d4604bcfbed45d1de66d1a4ac988c2b311e11,2023-01-17 20:45:10,Stefan Behnel,Write unicode strings instead of str in Py2 to get a more optimised string generation.,['Cython/Compiler/Code.py']
26d64d6a8153e31733f350fc2843c6589da36d36,2023-01-17 20:35:03,Stefan Behnel,Minor code cleanups.,['Cython/Compiler/Code.py']
73b7453e5bce45bbfdc0f6cce13a7f6f25714894,2023-01-17 18:52:49,Alexander Shadchin,"Disable parsing command line arguments as Python options in embedding code (GH-5211)

After https://github.com/cython/cython/pull/5210 parsing command line arguments was turned on.

See https://docs.python.org/3/c-api/init_config.html#c.PyConfig.parse_argv",['Cython/Utility/Embed.c']
4d5a2fe66c6747097a3c5d46deedf6ac9af2afb9,2023-01-16 20:44:26,da-woods,"Use PyxCodeWriter in the dataclass TemplateCode (GH-5049)

Makes insertion points behave as they do elsewhere,
adds the ability to track indentation (which I don't use
here, but which I think will clear things up)","['Cython/Compiler/Code.py', 'Cython/Compiler/Dataclass.py', 'Cython/StringIOTree.pxd', 'Cython/StringIOTree.py']"
805d7f3d778cf29f1e2acaaac84cd2bcadb25e14,2023-01-12 09:16:03,da-woods," Optimize dispatch for fused memoryview types (GH-5073)

By converting them to a memoryview once, checking some of the
details of that, and then using that to initialize the Cython memoryview.

I measure something like ~7% speedup on a small toy example
that selects between 3 types of memoryviews

Closes https://github.com/cython/cython/issues/3798 (as an implementation detail)

Regarding the PyPy2 work-around, I wasn't able to diagnose what's going on,
but it doesn't work if you go via an intermediate Python memoryview.","['Cython/Compiler/Builtin.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/Optimize.py', 'Cython/Utility/Builtins.c', 'tests/run/builtin_memory_view.pyx']"
a977ed91d7b02d77a36794335a106856de023b2d,2023-01-12 09:12:29,Alexander Shadchin,"Replace deprecated C-API functions in embedding code with PyConfig calls (GH-5210)

Closes https://github.com/cython/cython/issues/4895",['Cython/Utility/Embed.c']
74bcd91438a6f7f94417dfc4d50f572cfa50f820,2023-01-10 21:34:51,da-woods,"Improve ""cpdef enum"" to Python conversion (GH-4877)

Return the Python enum instead of an int.
Also, use flag enums as wrapper since they behave more like C enums in that they allow or-combination.

The one corner-case that isn't perfect is cpdef enums declared
in a standalone pxd file - they don't actually ever generate
the python wrapper. I've made these emit a warning and return
an int (which I think is a reasonable solution for the moment).

Closes https://github.com/cython/cython/issues/2732
Closes https://github.com/cython/cython/issues/4633","['Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/UtilityCode.py', 'Cython/Utility/CpdefEnums.pyx', 'tests/run/cpdef_enums.pyx', 'tests/run/cpdef_enums_import.srctree', 'tests/run/cpdef_scoped_enums.pyx', 'tests/run/cpp_stl_conversion.pyx']"
17fa2640293ac264788a404efc9441afff5129d7,2023-01-10 21:25:15,0dminnimda,Clean up `build_hex_version` (GH-5209),['Cython/Utils.py']
069794816423948a3dd7cc3365cf969d44fc9326,2023-01-10 13:45:22,Stefan Behnel,"Also support "".pre"" and "".post"" when parsing Cython's version.",['Cython/Utils.py']
1d4cec13b1a2dfab7ede69ea191ed3da1e31b9fb,2023-01-10 13:38:02,Stefan Behnel,Update changelog.,['CHANGES.rst']
a23d40bf802a464e2e7d863a2ea4be5e532ba5a5,2023-01-10 13:35:50,Stefan Behnel,Fix comment.,['Cython/Shadow.py']
d798d65557d4926db70232b482cb41daec4c8250,2023-01-10 13:18:13,Stefan Behnel,"Fix version parsing in Utils.build_hex_version() after allowing a '.dev0' suffix for unreleased versions.

Closes https://github.com/cython/cython/pull/5208",['Cython/Utils.py']
b9b2f63a32558896a75d55b6ce2ed3189319d78a,2023-01-10 13:16:31,Stefan Behnel,Add comment to Shadow.py that lists possible version formats.,['Cython/Shadow.py']
75a8046eb4bb503feff4d30381c2f7f42067cf06,2023-01-10 09:37:00,Julien Jerphanion,"Use PEP-440 Development release segment in public version identifiers (GH-5205)

As specified by PEP 440:
https://peps.python.org/pep-0440/#public-version-identifiers

Closes https://github.com/cython/cython/issues/5204",['Cython/Shadow.py']
eebfaf7ef30c843844490c400634cd1989227243,2023-01-10 09:25:01,Chia-Hsiang Cheng,"Initialize array fields of structs with memcpy (GH-5201)

Closes https://github.com/cython/cython/issues/5178","['Cython/Compiler/ExprNodes.py', 'tests/run/struct_conversion.pyx']"
ac56a661b6d670b69f24fb92408dd852a583b08d,2023-01-10 09:11:13,da-woods,"Make cpdef enums pickleable (GH-5124)

(on Python >= 3.4).

Closes https://github.com/cython/cython/issues/5120","['Cython/Compiler/PyrexTypes.py', 'Cython/Utility/CpdefEnums.pyx', 'tests/run/cpdef_enums.pyx', 'tests/run/cpdef_scoped_enums.pyx']"
f58bfdbfcd96478ef6ce798d00f45a3091cd68bf,2023-01-10 07:35:40,Stefan Behnel,"Add missing call argument to make type(def) coercions for soft complex types work.

Closes https://github.com/cython/cython/issues/5203","['Cython/Compiler/ExprNodes.py', 'tests/run/cpow.pyx']"
e70d35ecdbdfe961ddaf0058e7952616e812ec47,2023-01-06 13:54:33,Stefan Behnel,"Include setup.cfg in sdist.

Closes https://github.com/cython/cython/issues/5199",['MANIFEST.in']
69689cdf1a9348d92c4c440437ccee5d5dbb291d,2023-01-05 21:09:03,da-woods,Typo fix in changelog,['CHANGES.rst']
3831d04b2c77769b5f3e5cf78eb3ee1280f7e855,2023-01-05 20:26:59,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
ac930c3d32757711d307327b2c39d4707753b0ca,2023-01-05 20:25:48,Stefan Behnel,Update changelog.,['CHANGES.rst']
d675bf287ba2b60c362a1fac80f8338565756675,2023-01-05 19:50:06,Stefan Behnel,Prepare release of 0.29.33.,"['CHANGES.rst', 'Cython/Shadow.py']"
6439d0ffc5b8e8b248cab23d2c8c0cb30703b7c7,2023-01-05 19:41:56,Stefan Behnel,"Increase CI timeout since we're getting close to 50 minutes on Windows, apparently.",['.github/workflows/ci.yml']
c21b39d498d9b078abf3704dd71d957ee9b6a8f7,2023-01-05 15:02:14,Stefan Behnel,Update changelog.,['CHANGES.rst']
cf19b86385cf9aee013ffc70443b8f40952708df,2023-01-05 14:26:23,Stefan Behnel,"Avoid exponential recursion when coercing nested conditional expressions.
This used to coerce the nesting tree twice at each condition, once for `coerce_to()` and once for `analyse_result_type()`, both calling each other for the entire subtree.

Closes https://github.com/cython/cython/issues/5197","['Cython/Compiler/ExprNodes.py', 'tests/run/if_else_expr.pyx']"
e5be640268495c14af69629088e7cc40fa606563,2023-01-05 14:54:25,Stefan Behnel,Remove Py2.6 from tested tox.ini envs.,['tox.ini']
0b4b88286215fb374e98278da38009b6decdaa8f,2023-01-05 14:53:12,Stefan Behnel,Merge branch '0.29.x',"['MANIFEST.in', 'tox.ini']"
2cff1bfc9151f770196b33c5ae0a27a1445110f4,2023-01-05 14:52:52,Stefan Behnel,"Update tox.ini a little and include it in sdist.

Closes https://github.com/cython/cython/issues/5193","['MANIFEST.in', 'tox.ini']"
0c2c24eb5fc276122311e53c9be3b7d5d2c2e793,2023-01-05 14:26:23,Stefan Behnel,"Avoid exponential recursion when coercing nested conditional expressions.
This used to coerce the nesting tree twice at each condition, once for `coerce_to()` and once for `analyse_result_type()`, both calling each other for the entire subtree.

Closes https://github.com/cython/cython/issues/5197","['Cython/Compiler/ExprNodes.py', 'tests/run/if_else_expr.pyx']"
56ac55015063bf768ff31e0cd88081e2802e9c10,2023-01-05 14:16:39,Stefan Behnel,Fix Github ticket references in tests ('t' is the prefix used for old trac tickets).,"['tests/errors/fused_types.pyx', 'tests/run/fused_types.pyx']"
4b76247d4575b18f295a6b1ce7b3778c667a92fa,2023-01-05 14:39:47,0dminnimda,CI: Use ccache in Github Actions also for the non-Linux jobs (GH-4972),"['.github/workflows/ci.yml', 'Tools/ci-run.sh']"
00882e68ba76b4725995657bd17bc2ca3ee7da4d,2023-01-05 14:37:44,Roman Donchenko,"Fix the step for uploading platform-specific wheels to GitHub (GH-5034)

`cibuildwheel` puts the wheels into `wheelhouse`, not `dist`. There also
doesn't seem to be any reason to list a bunch of separate per-platform
wildcards, so replace them with `*.whl`.",['.github/workflows/wheels.yml']
ec418746f38e990d16c9faa5f73392b7ecf3bdd4,2023-01-05 07:55:28,0dminnimda,"Add missing `annotation_typing` in Shadow.py (GH-5196)

Closes https://github.com/cython/cython/issues/5194","['Cython/Shadow.py', 'tests/run/pure_py3.py']"
c97b77a2b1ec404b8d1a6577134faee15abc290d,2023-01-04 10:39:26,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'tests/errors/fused_types.pyx', 'tests/run/asyncio_generators.srctree', 'tests/run/py35_asyncio_async_def.srctree']"
78bb64051f57944dcec839899b3cecd311113050,2023-01-04 10:30:21,Stefan Behnel,Update changelog.,['CHANGES.rst']
08e44780f027ce2d8306557d73a5c07b4dea66a6,2023-01-04 10:02:35,da-woods,"Add support of const fused type memory views (GH-3118) (GH-5076)

Backport of https://github.com/cython/cython/pull/3118
Fixes https://github.com/cython/cython/issues/3783

Co-authored-by: Thomas VINCENT <thomas.vincent@esrf.fr>","['Cython/Compiler/PyrexTypes.py', 'tests/errors/fused_types.pyx', 'tests/memoryview/numpy_memoryview_readonly.pyx', 'tests/run/fused_types.pyx']"
60fe73184a855b5a0bcd3a1cf6c2b3993e2bafee,2023-01-04 09:57:00,da-woods,"[0.29.x] Avoid using asyncio.get_event_loop (GH-5188)

The behaviour of creating a new event loop if one doesn't
already exist was removed in Python 3.12 alpha and was allegedly
deprecated before then.

Fixes https://github.com/cython/cython/issues/5183","['tests/run/asyncio_generators.srctree', 'tests/run/py35_asyncio_async_def.srctree']"
81873104ca513980bedaa6f61b0996a2efc5e1a4,2023-01-03 17:19:08,Stefan Behnel,Update cibuildwheel version.,['.github/workflows/wheels.yml']
c8dd3d0b18510afb9963a8d5c3d9819694a7da50,2023-01-01 11:12:13,da-woods,"Skip define 'extern ""C""' test on Windows (#5189)

I was struggling to get the macro passed on the command-line while being escaped properly",['tests/run/cpp_extern.srctree']
5e5b24250808dd02de6bc7878e04ddbcd28fdf37,2023-01-01 09:35:14,Max Bachmann,"Mark extension types as immutable (#5023)

Since python/cpython#25520 types are automatically marked as immutable if they are static.
While we still have the Py_TPFLAGS_HEAPTYPE hack in place we need to manually mark our types as immutable.
It's possible to crash Python by trying to modify mutable static types.","['Cython/Utility/ExtensionTypes.c', 'tests/run/cclass_assign_attr_GH3100.pyx']"
c99616ac78fba3eae59647d2ead79d20cedb7603,2022-12-31 19:01:54,da-woods,"numpy.int -> numpy.int_ (#5190)

* numpy.int -> numpy.int_

numpy.int was deprecated and has now been removed

* More fixes","['tests/run/numpy_parallel.pyx', 'tests/run/numpy_test.pyx']"
ddd11a2bd503ece0c79de65e834429babbbca550,2022-12-31 11:44:02,da-woods,"Change how memoryviewslice/array has sequence flag set (#5187)

Registering cdef classes with collections.abs.sequence only works to set the type flag if cdef classes are mutable. Unfortunately we want them to be immutable since it's possible to corrupt memory with mutable cdef classes (#5023).

Therefore, add a Cython directive for marking cdef classes as a sequence, but only allow it in utility code for now. This is a cutdown version of #5030 - I don't want to add new public features without consensus, but I do want to merge the fix for mutable classes. Therefore I'm adding the feature privately for now.","['Cython/Compiler/Options.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/TypeSlots.py', 'Cython/Utility/MemoryView.pyx', 'Cython/Utility/ModuleSetupCode.c', 'tests/compile/fused_redeclare_T3111.pyx']"
8bcf88eaf1d3dcd0cd7f3f0794c3f7a7cb80bc9b,2022-12-31 10:30:05,da-woods,"Fix windows tests and make some Windows CI builds ""must pass"" (#5175)

* Fix named expression tests on Windows

It's because I forgot that "":"" could appear in a filename

* Remove allowed_failure on as many Windows builds as possible

* Try escaping define_macros quotes on Windows

* Not do parallel build on Windows","['.github/workflows/ci.yml', 'Tools/ci-run.sh', 'tests/run/cpp_extern.srctree', 'tests/run/test_named_expressions.py']"
8fcc9896fca6035ae2e4bd743a890841288706a3,2022-12-26 10:09:48,GalaxySnail,"Remove unnecessary OrderedDict usage for CpdefEnums (#5180)

* Avoid to import OrderedDict on 3.7 or later

Since python 3.7, builtin dict is guaranteed to keep insertion order.

* Remove unnecessary OrderedDict

enum.Enum supports an iterable of (name, value) even since python 3.4.

* Use dict on CPython 3.6

dict on PyPy started to be ordered even before CPython, only CPython
and PyPy are supported by Cython now, so it's fine to use dict on
Python 3.6",['Cython/Utility/CpdefEnums.pyx']
24f73ec9bec2f184d5766805ef5c92b2b7fa9473,2022-12-22 08:01:15,da-woods,"numpy.int -> numpy.int_ (#5181)

* numpy.int -> numpy.int_

numpy.int was deprecated and has now been removed

* More fixes","['tests/run/numpy_parallel.pyx', 'tests/run/numpy_test.pyx']"
b2cad768499cf5763251fe757491e9fc24a1f583,2022-12-15 07:59:48,da-woods,"Support 2 and 3 arg __[ri]pow__ (#5168)

This change accepts both two and three argument versions
for `__pow__` and `__ipow__`.

For the two arg versions it raises an exception if three
arguments are passed (although accepts a third argument of
'None' since this is what Python does by default).

For the three arg versions it allows a default argument of None
to be set (but no other default arguments).

One deviation from Python:

```
class C:
  def __pow__(a, b, c):
    return a, b, c
```

will raise `TypeError: C.__pow__() missing 1 required positional
argument: 'c'`
for all of
```
C()**2
pow(C(), 2)
pow(C(), 2, None)
```

(i.e. it just looks to see if None has been passed and treats
that are 2 args only).

I haven't done this - it seems like a backwards compatibility
mistake for Cython. Although it would be possible.

I haven't tied any of this to `c_api_binop_methods`. I think it's
independent, although if we did want to reject None on the three
argument power function, we could use that directive.","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/TypeSlots.py', 'docs/src/userguide/special_methods.rst', 'runtests.py', 'tests/errors/e_argdefault.pyx', 'tests/run/special_methods_T561.pyx', 'tests/run/special_methods_T561_py38.pyx']"
1ea0da7d0cfbc50deb562bf8b95c871468fc2025,2022-12-14 09:55:10,Stefan Behnel,"Suppress annoying ""Command line warning D9025"" messages in test output on Windows.",['runtests.py']
cbcda04523900612ef543ac7f99d70f5bfd0ca88,2022-12-12 08:28:29,AnyLeftovers,"Fix module struct C syntax error on windows (#5171)

The module struct was being initialized with `= {}` which isn't valid C until C23 so MSVC was rejecting it",['Cython/Compiler/ModuleNode.py']
f109a57212c5078757b0ea0f847f01b86eb19912,2022-12-11 14:05:04,Matus Valo,Docs: Document type qualifiers (#5165),['docs/src/userguide/language_basics.rst']
39ee651a45e45e31805aa94d5c119f0283637f94,2022-12-10 10:53:37,da-woods,"Fix error from combination of two Complex.c changes (#5167)

Essentially SoftComplexToPy required another bit of utility code that has now become tempita. I've just skipped using this utility code",['Cython/Utility/Complex.c']
3b1597ce99b9534bccc644c3bdf4fa2b54267e92,2022-12-08 08:23:58,Matus Valo,"Add PyUnicode_AsUTF8AndSize to cpython imports [0.29.x] (#5164)

Backport of https://github.com/cython/cython/pull/5163",['Cython/Includes/cpython/unicode.pxd']
011c19875b68ea79c583b6d6c238694777cddd0c,2022-12-08 08:19:04,da-woods,"Add 'cpow' as a forward compatibility to 0.29.x (GH-5060)

See https://github.com/cython/cython/pull/5016","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Options.py']"
beecec26ed2416ffb7e74a9396ff1bfd6d887319,2022-12-08 08:16:40,da-woods,Add the `cpow` directive to bring Cython `**` close to Python (GH-5016),"['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/TypeInference.py', 'Cython/Utility/Complex.c', 'docs/src/userguide/cpow_table.csv', 'docs/src/userguide/migrating_to_cy30.rst', 'docs/src/userguide/source_files_and_compilation.rst', 'tests/run/cpow.pyx', 'tests/run/powop.pyx']"
d26591ad2f86d3666d60fbaade8424ae64f80a5c,2022-12-08 08:04:01,da-woods,"Improve detection of C complex.h (GH-5021)

* Improve detection of C complex.h

The existing check didn't really work (but I've left it...).
I think it's based on the quote:
> POSIX recommends checking if the macro _Imaginary_I is defined to
> identify imaginary number support.

My reading is that this is a way to determine if a special
imaginary type exists, but only after including the header. Until
you've included complex.h the macro won't be defined anyway.

From C11 there's a feature macro to determine if complex.h
exists so I've used that as the main way of detecting it.

Extern typedefs can't be handled as C complex numbers
(unfortunately) so fall back to the Cython implementation in that case.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Utility/Complex.c']"
91fb2a7d3bdf7ac5cd07bc61e2b4fa03ba446dcd,2022-12-08 07:41:05,scoder,"Accept both 'int' and 'long' for 'x: int'  annotations in Py2 (GH-5097)

Disregard 'x: int' type annotations only when language_level=2, and otherwise make sure that we accept both int and long in Py2.

Closes https://github.com/cython/cython/issues/4944","['CHANGES.rst', 'Cython/Compiler/Builtin.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Utility/ModuleSetupCode.c', 'docs/src/userguide/migrating_to_cy30.rst', 'docs/src/userguide/source_files_and_compilation.rst', 'tests/run/cython3.pyx', 'tests/run/cython3_no_unicode_literals.pyx']"
0513796ea53467bfc3e0312ffd759839afdb419c,2022-12-07 09:12:16,Stefan Behnel,Update changelog.,['CHANGES.rst']
65373aaf0f7f94c738a20985a6c1accd023353c2,2022-12-07 07:43:05,William Ayd,Added PyUnicode_AsUTF8AndSize to includes (#5163),['Cython/Includes/cpython/unicode.pxd']
c7aba0e94ff78a4a5e569d412ac72b479534cf64,2022-12-06 10:14:42,Matus Valo,Add compiler directive to disable the default exception propagation for legacy code (GH-5094),"['Cython/Compiler/Main.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/Parsing.py', 'docs/src/userguide/language_basics.rst', 'docs/src/userguide/migrating_to_cy30.rst', 'docs/src/userguide/source_files_and_compilation.rst', 'tests/run/legacy_implicit_noexcept.pyx', 'tests/run/legacy_implicit_noexcept_build.srctree']"
099faf83e4f5cc351496afef300853e9b2a57ac0,2022-12-03 19:22:01,Matus Valo,"Relax `nogil_check()` of `SliceIndexNode` to support array initialisation (#5142)

Relax `nogil_check()` of `SliceIndexNode` to support array initialisation

* Ensure GIL when calling PyErr_Format","['Cython/Compiler/ExprNodes.py', 'tests/errors/nogil.pyx', 'tests/run/nogil.pyx']"
026ce36940e748a38f4f5f747a01713aa9de77c5,2022-12-03 10:32:34,Matus Valo,Docs: Migrate fused types userguide to pure python (#5119),"['docs/examples/userguide/fusedtypes/char_or_float.py', 'docs/examples/userguide/fusedtypes/conditional_gil.pyx', 'docs/examples/userguide/fusedtypes/indexing.py', 'docs/examples/userguide/fusedtypes/indexing.pyx', 'docs/examples/userguide/fusedtypes/pointer.py', 'docs/examples/userguide/fusedtypes/pointer.pyx', 'docs/examples/userguide/fusedtypes/type_checking.py', 'docs/examples/userguide/fusedtypes/type_checking.pyx', 'docs/src/tutorial/pure.rst', 'docs/src/userguide/fusedtypes.rst']"
9f36dda6bcf70663bd4c960c322d776097ee4215,2022-12-01 19:40:43,da-woods,"Refactor module state to always use struct (#5056)

First part of https://github.com/cython/cython/issues/3689
First part of https://github.com/cython/cython/issues/4495

This tries to put all the global static variables into the
module state struct. When CYTHON_USE_MODULE_STATE is false,
they're looked up from a single static instance of the struct.
This allows a lot of semi-duplicated code to be dropped.

It doesn't get rid of the awkward `#defines` to access the
struct (that's probably the next step of the cleanup).

It moves the stringtab from a global into a function local.

It moves the statically defined coroutine types into the
module state struct in the same way that CyFunction/FusedFunction
already were.

It's mostly an exercise in deleting things - it doesn't
attempt to do any significant cleanup of the generation code.","['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Naming.py', 'Cython/Compiler/Nodes.py', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/StringTools.c']"
ed0c0237b7151d387c5de08a816bce34fc16fcf2,2022-11-30 14:20:59,Stefan Behnel,Update changelog.,['CHANGES.rst']
b8285f01e80437484e7a71c2cc6a6100bcf88964,2022-11-30 14:15:28,Stefan Behnel,Update changelog.,['CHANGES.rst']
1acc5b1634d34c2f26b4921068ac68372a9226d7,2022-11-30 13:31:27,Scott Wolchok,Use topological sort to speed up quadratic-time ModuleNode.sort_types_by_inheritance() (GH-5139),['Cython/Compiler/ModuleNode.py']
46a863e34bc34a834bb9fa0c1e37d3cd18ccd761,2022-11-30 13:21:30,Dobatymo,Add missing load_factor() method on libcpp/unordered_multimap (GH-5157),['Cython/Includes/libcpp/unordered_map.pxd']
07ca6c336b497a9fa0579183f875e48dd3da82d7,2022-11-30 13:12:36,Stefan Behnel,Remove Emacs Cython mode file that was moved to its own repo: https://github.com/cython/emacs-cython-mode,['Tools/cython-mode.el']
6add7fe37d8d40c4b044526b1605ab4b3904f4da,2022-11-29 08:06:54,Stefan Behnel,"Add new ""tp_watched"" PyTypeObject field in Py3.12.

See https://github.com/python/cpython/pull/97875","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
9d38bf8d620fd09166a5469c76b54f66d7fbd828,2022-11-29 06:55:55,Matti Picus,"Use setuptools>60 for CPython 3.12+, skip unicode test on PyPy and 3.12+ (GH-5154)","['Tools/ci-run.sh', 'runtests.py', 'test-requirements-312.txt', 'tests/pypy_implementation_detail_bugs.txt']"
5ae18baae5535756db8036ea91bda7bb4811d17f,2022-11-26 16:03:31,da-woods,"Fix Python 3.11 fastcall test in debug mode (#5152)

Another case of calling PyCFunction_GET_FLAGS",['tests/run/fastcall.pyx']
b072f14c31da0410d93f63c592e4bde18cd028b7,2022-11-26 11:18:17,Matti Picus,"allow suggestions on AttributeError for PyPy in doctests (#5148)

* accept suggestions on AttributeError for PyPy

* update pypy3.7 -> 3.9","['.github/workflows/ci.yml', 'tests/run/py_classbody.py']"
9a8609dc1c34b590838f23773d1831c2fafce2e2,2022-11-26 11:10:05,da-woods,Add missing 3.12 to ci.yml (#5151),['.github/workflows/ci.yml']
1a459eb7f9f7102badb8f16e6ed03505b3c59d2e,2022-11-26 09:25:49,da-woods,Merge branch '0.29.x',"['.github/workflows/ci.yml', 'Cython/Utility/ObjectHandling.c', 'Tools/ci-run.sh']"
8930130481f27502ecfc48b21d8eb13f49ba1353,2022-11-26 09:16:30,da-woods,"Avoid triggering type-check assert for cyfuncs [0.29.x] (#5031)

* Avoid triggering type-check assert for cyfuncs
* Make some jobs run with debug assertions

Co-authored-by: Stefano Rivera <github@rivera.za.net>","['Cython/Utility/ObjectHandling.c', 'Tools/ci-run.sh']"
d13a5c4d4d93a0a5f09f34ffd50d6c923cf21ecc,2022-11-24 13:33:34,Lisandro Dalcin,"Backport support for PEP-623 to 0.29.x: remove Unicode wstr support (GH-5145)

* Adapt PEP-623 support to latest Py3.12 which removes the wstr field in PyUnicode but kept the PyUnicode_*() macros around.

* Add Py3.12 to CI build targets.","['.github/workflows/ci.yml', 'Cython/Utility/ModuleSetupCode.c']"
696235fd9716e1dc4575c8b11e615e20ea5a850b,2022-11-18 20:11:38,da-woods,"Pin line_profiler version to <4 (#5140)

Ideally we'd work out why it isn't working, but for now it
seems easiest to try to pin the version.",['test-requirements-cpython.txt']
d085015f5afcdfa246f8af61d0f77b9734ac69f6,2022-11-20 10:49:16,Alexander Shadchin,"Avoid warnings from bitwise '&' with boolean operands (#5096)

With clang 14+ and `-Werror,-Wbitwise-instead-of-logical` build failed with:
```
$(BUILD_ROOT)/library/python/cyson/cyson/_cyson.pyx.cpp:29973:39: error: use of bitwise '&' with boolean operands [-Werror,-Wbitwise-instead-of-logical]
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5cyson_6_cyson_InputStream < 16) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5cyson_6_cyson_InputStream)) & ((Py_TYPE(o)->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)) == 0))) {
                                     ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                                                                                                                                            &&
$(BUILD_ROOT)/library/python/cyson/cyson/_cyson.pyx.cpp:29973:39: note: cast one or both operands to int to silence this warning
```",['Cython/Compiler/ModuleNode.py']
3ec429ddf01f693e0f40d11de8dd6bd7dfef14d8,2022-11-20 09:43:01,Marcel Stimberg,"Remove HTML template support from Tempita (#5128)

HTML templates (and the associated functions/classes `sub_html`, `html`,
`attr`, and `html_quote`) were not used by Cython itself, but were left
over from the original, general-purpose, Tempita tool. The HTML
templating relied on the cgi package, which is deprecated as of Python
3.11 and will be removed with Python 3.13 (meaning that merely importing
the tempita package currently raises a DeprecationWarning). More
specifically, it relied on the function `cgi.escape`, which was already
removed with Python 3.8. This clearly suggests that the code has not
been used by anyone, since no-one seems to have complained about this
breakage.

Fixes #3309",['Cython/Tempita/_tempita.py']
171ce959441cc5a96fd3e917b5a08ba4ffb0e0aa,2022-11-18 20:17:57,Mike Graham,Allow returning const types. (#5135),"['Cython/Compiler/Nodes.py', 'tests/run/return.pyx']"
2e657709493a97eb16834ef7def3647668b741f2,2022-11-18 20:11:38,da-woods,"Pin line_profiler version to <4 (#5140)

Ideally we'd work out why it isn't working, but for now it
seems easiest to try to pin the version.",['test-requirements-cpython.txt']
1b028d34d6a3ec82f4687df1e0db598721c7a695,2022-11-13 09:03:10,da-woods,Add note about PyMSVC to the docs,['docs/src/quickstart/install.rst']
363780535e7bfe8adb1b858feb3fccbdf3434d97,2022-11-12 13:35:08,da-woods,"Fix whitespace issue

Introduced in 2fdb74a02667d4c42d0280e03edd65ff3c934a82","['CHANGES.rst', 'Cython/Compiler/ExprNodes.py']"
efca4e08445badb659cebc2298694274c7e8fb6a,2022-11-12 13:31:45,da-woods,Merge branch '0.29.x',['CHANGES.rst']
d71d855614542d22535c9cc121f1c1c2e1730087,2022-11-12 13:27:52,da-woods,Update Cython 0.29.33 changelog,['CHANGES.rst']
2fdb74a02667d4c42d0280e03edd65ff3c934a82,2022-11-12 11:29:54,da-woods,"Clean up issues with dataclasses and inheritance (#5046)

Ban overriding of inherited fields - it's very hard to
make this work so better just go give an error.

Note limitation that dataclass decorator can't see into
cimported base class. Doesn't fix but helps people
avoid #4799

Part of https://github.com/cython/cython/issues/4956","['Cython/Compiler/Dataclass.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Symtab.py', 'Tools/make_dataclass_tests.py', 'tests/errors/dataclass_e6.pyx', 'tests/errors/dataclass_w1.pyx', 'tests/errors/dataclass_w1_othermod.pxd', 'tests/run/test_dataclasses.pyx']"
7a667e69e178ebcc4917d6ca3f102d0e3c729891,2022-11-12 09:34:40,da-woods,"Remove ""assignable"" requirement from cpp_locals (#4692)

Fixes #4558 by making the assignment operation of a cpp_locals
variable actually use ""emplace"".

I've done this by creating a class that implements __Pyx_Optional_Type
rather than justing using std::optional directly (and rewriting
operator= for that). This seemed less intrusive that changing the
code generation to call ""emplace"" directly, but possibly less
efficient in some cases.","['Cython/Utility/CppSupport.cpp', 'tests/run/cpp_locals_directive.pyx']"
9a55e5924c45e452e05ccfca4453fb5629e29f47,2022-11-12 09:22:52,samaingw,"Allow nested cppclass definitions (#3221)

This is a subset of PR #2951, containing the code concerning nested class definition support.

For the records, you'll find below the original #2951 description of theses changes:

4 - Nested classes
------------------------

This is not about wrapping nested C++ classes, because it is already present and functional (and there's a test which can prove it).
This is about being able to generate C++ classes definitions with nested classes. So it is exactly like the batch about method overloading: being able to define and not just declare.
If I have understood it properly, this addresses issue #1218

a) Make cppclass generate code for nested definitions (for example nested cppclass)
b) Fix Symtab for the inherited nested types: this is basically the same thing than for other attributes, have a separate ""inherited types"" array, to be able to have them in scope but ignore them during code generation.
c) Amend the nested classes test","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Symtab.py', 'tests/run/cpp_nested_classes.pyx']"
323e5c8c7583b6d8be7f3c2540a63283a21c27e6,2022-11-11 20:32:38,da-woods,"Run GCC 11 tests with the most recent language standard (#5078)

It doesn't look like we're testing with a compiler using
up-to-date language standards, and this meant we missed
at least one bug recently:
https://github.com/cython/cython/pull/5029.

It seems like the GCC11 tests may as well double as
""GCC11 with up-to-date language standards""

* Try to fix fake reference copy-constructor issue","['.github/workflows/ci.yml', 'Cython/Utility/ModuleSetupCode.c']"
f97aa82ce5fb89138ad8c55e0802069774c73b76,2022-11-11 20:23:05,da-woods,"Remove CHANGES comment about immutable cdef dataclasses

They aren't (yet) immutable - I just removed a test that relied on them being mutable.",['CHANGES.rst']
327b87a240b8e03fb333c7ff8ad36b576fd774f0,2022-11-08 21:35:59,Matus Valo,"cython, cythonize commands print a specific error when file does not exist (#4629)","['Cython/Build/Cythonize.py', 'Cython/Compiler/CmdLine.py', 'Cython/Compiler/Main.py', 'Cython/Compiler/Tests/TestCmdLine.py', 'Tools/ci-run.sh', 'test-requirements-27.txt', 'test-requirements-pypy27.txt', 'tests/run/cython_no_files.srctree']"
2d40828375f2a25a4b931e582bf0ad5161926e42,2022-11-08 21:30:07,Maximilien Colange,"Fix linkage for `cdef public` functions in C++ mode (#5040)

Fixes #1839

cdef public functions should be declared with the appropriate linkage:

* in C mode, either extern or extern ""C"", depending on whether the header file is included in (resp. object code is linked against) a C or a C++ compilation unit. Choice is made at compile-time through #ifdef __cplusplus macros. NB: This is the current behavior.
* in C++ mode, extern ""C++"" is the only option, as C code cannot call C++ code. Note that extern ""C++"" should be preferred over extern to allow users to #include the C++ header inside a extern ""C"" block (which is legal, although barely used).

Note that the current behavior is OK for C mode, but is incorrect for the C++ mode. As described in #1839, this incorrect behavior is diagnosed by compilers emitting warnings when cdef public functions return a C++ type (e.g. std::vector).
The test introduced in this PR checks that the current behavior for C mode (with both C and C++ compatibility) is preserved, and that the behavior for C++ mode is fixed.","['Cython/Compiler/ModuleNode.py', 'docs/examples/tutorial/embedding/embedded.pyx', 'tests/compile/excvalcheck.h', 'tests/compile/nogil.h', 'tests/run/cpp_extern.srctree']"
e14f241cecf5d37b29a057b93779737f81c5a68f,2022-11-08 21:24:46,da-woods,"Optimized implementation of bound c methods (#5105)

Fixes #5062","['Cython/Compiler/ExprNodes.py', 'Cython/Utility/ObjectHandling.c']"
612ab66d720917e39fee2d845c0415fccae7cd59,2022-11-08 21:16:35,Matus Valo,Docs: Improve documentation about error return values (#5108),['docs/src/userguide/language_basics.rst']
5bc34cd4cbe5641aa191cdfe099f02850f7b1472,2022-11-07 11:13:59,Stefan Behnel,Remove a bit of overhead from the Visitor implementation.,['Cython/Compiler/Visitor.py']
d317c588a19a2597571d21a3b78beef9d836045e,2022-11-07 10:54:35,Ewout ter Hoeven,"Wheel CI: Update cibuildwheel to v2.11.2 (#5115)

Updates cibuildwheel from v.2.8.1 to v2.11.2. The v2.8.1 release still used a Python 3.11 beta to build wheels, v2.11.2 uses the stable Python 3.11.0 release.",['.github/workflows/wheels.yml']
66225e8e83a3a40f177e7c6db4018791a248e031,2022-11-01 10:19:06,Stefan Behnel,"docs: Add a note about the ""cython-lint"" tool.",['docs/src/userguide/source_files_and_compilation.rst']
48b5a957e4c681d363f3bc7020e3213cdabdb601,2022-10-30 16:26:35,Tortar,[docs] Use double quotes for arguments in timeit (#5107),['docs/src/tutorial/cython_tutorial.rst']
a4f2c4c26509391c21bbae4ae20ed59986752a28,2022-10-30 15:24:19,da-woods,"Update CCache script version (#5106)

Hopefully fixes #5103",['.github/workflows/ci.yml']
9020af1d06aeab12012492fb90afc3ba02a3cf7d,2022-10-29 13:00:44,Matus Valo,"Docs: Update documentation after introduction of noexcept (#5095)

* Update language basics after introduction of noexcept

* Update clibraries tutorial","['docs/src/tutorial/clibraries.rst', 'docs/src/userguide/language_basics.rst']"
67b7149d4a6ef9c4b8679cd52efca71913eec044,2022-10-29 12:10:27,da-woods,"Fix faulty calls to Context (#5098)

which were mistakenly passing options instead of compiler
directives.","['Cython/Build/Dependencies.py', 'Cython/Build/Inline.py']"
7b0a8a921fec5ec2dec087a9aabfe3be1722c6a0,2022-10-29 12:08:57,Jonathan Helgert,"Add missing C++17/20 STL functions and methods (#5101)

* Add .contains() method for associated containers

* Add string::starts_with and ends_with methods

* Add missing C++17/20 numeric functions","['Cython/Includes/libcpp/map.pxd', 'Cython/Includes/libcpp/numeric.pxd', 'Cython/Includes/libcpp/set.pxd', 'Cython/Includes/libcpp/string.pxd', 'Cython/Includes/libcpp/unordered_map.pxd', 'Cython/Includes/libcpp/unordered_set.pxd', 'tests/run/cpp_stl_associated_containers_contains_cpp20.pyx', 'tests/run/cpp_stl_numeric_ops_cpp17.pyx', 'tests/run/cpp_stl_numeric_ops_cpp20.pyx', 'tests/run/cpp_stl_string_cpp20.pyx']"
1d957b2b33ab9a6b86d1fdad75cda705fb8d9e4f,2022-10-27 07:24:32,Stefan Behnel,Provide better debug output on crashes in CI.,['runtests.py']
0e1d4bc61225bf382abb5d27399e3fe339552f6e,2022-10-26 11:06:44,Stefan Behnel,"Revert ""Change the type check for 'x: int' to 'isinstance(x, (int, long))' in Py2, to also accept large integers there (which is probably intended, given Py3 annotation semantics).""

This reverts commit c19f0b872bc2a469777a7e65118a428ab0adffd3.","['Cython/Compiler/PyrexTypes.py', 'Cython/Utility/ModuleSetupCode.c']"
c19f0b872bc2a469777a7e65118a428ab0adffd3,2022-10-26 08:15:44,Stefan Behnel,"Change the type check for 'x: int' to 'isinstance(x, (int, long))' in Py2, to also accept large integers there (which is probably intended, given Py3 annotation semantics).","['Cython/Compiler/PyrexTypes.py', 'Cython/Utility/ModuleSetupCode.c']"
2aa219d6268618b2b56879d70e9f09544d3c48fe,2022-10-21 07:25:29,Stefan Behnel,Add missing transitive test dependency for IPython/Jupyter integration.,['test-requirements-cpython.txt']
a9f914969f3057b8695bfc6218a1e434d9119447,2022-10-21 07:07:21,Stefan Behnel,Update changelog.,['CHANGES.rst']
1f65318a60660a2c4f07852e1341c1d48e19ea28,2022-10-26 08:01:39,da-woods,"Restore 'int'->'object' in type annotations for now (GH-5057)

a44bbd363029aa9ba16fefcb485c68162f8ab663 changed an `int` annotation
so that it was interpreted as a Python `int` instead of a Python
object, which potentially breaks the usage of large (long) integers on Python 2.

I think this was unintentional so I've added the special-cases
for this in. (I'm happy with this PR being rejected though if
it was intentional since I don't *really* care that much about
Python 2).

See https://github.com/cython/cython/issues/4944","['Cython/Compiler/Builtin.py', 'Cython/Compiler/ExprNodes.py', 'docs/src/userguide/migrating_to_cy30.rst', 'tests/run/annotation_typing.pyx']"
b2015596b38df4b7b2978d87385da20d69e4e822,2022-10-22 15:24:41,da-woods,Merge branch '0.29.x',"['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ObjectHandling.c']"
b5b481132f6fa26c707504133b932e6bd0778c4f,2022-10-22 14:15:02,Matus Valo,"[Docs] Refactor and extend structs, unions, enums, function pointer documentation in language basics userguide (#5082)","['docs/examples/userguide/language_basics/enum.pyx', 'docs/examples/userguide/language_basics/function_pointer.pyx', 'docs/examples/userguide/language_basics/function_pointer_struct.pyx', 'docs/examples/userguide/language_basics/struct.py', 'docs/examples/userguide/language_basics/struct.pyx', 'docs/examples/userguide/language_basics/struct_union_enum.py', 'docs/examples/userguide/language_basics/union.py', 'docs/examples/userguide/language_basics/union.pyx', 'docs/src/userguide/language_basics.rst', 'docs/src/userguide/memoryviews.rst']"
2e62a1560ac2241975534a8aaec4a3b4049591ba,2022-10-21 12:23:03,da-woods,"docs: Recommend Cython 3 for pure-Python syntax (GH-5093)

While this is officially in the ""Cython 3"" documentation, I think most users end up with this documentation. It'd be good to link the annotation typing mainly to Cython 3.",['docs/src/two-syntax-variants-used']
b37cfc9a7028f79025c83a9315544b22c9b43d31,2022-10-17 19:42:51,Lisandro Dalcin,"Fix various clang warnings (#5086)

* Fix clang -Wcomma
* Fix clang -Wextra-semi-stmt
* Fix clang -Wconditional-uninitialized
* Fix clang -Wunreachable-code-return","['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ObjectHandling.c']"
95009ba67a4c0e4cbe2285d59cde5029574c6fc3,2022-10-12 20:48:08,Matti Picus,"always set CYTHON_UPDATE_DESCRIPTOR_DOC to 0 on PyPy (#5083)

It was previously set to 0 via a typo.",['Cython/Utility/ModuleSetupCode.c']
c900b6a587801aa3efc918809e53d6c33bc8ed73,2022-10-12 20:48:08,Matti Picus,"always set CYTHON_UPDATE_DESCRIPTOR_DOC to 0 on PyPy (#5083)

It was previously set to 0 via a typo.",['Cython/Utility/ModuleSetupCode.c']
4eacb83cbb4ff496f4fc1bc37b98aaf424823a27,2022-10-12 16:48:59,Matus Valo,[Doc] Improve documentation of disabling annotations in pure mode (#5080),"['docs/examples/tutorial/pure/disabled_annotations.py', 'docs/src/tutorial/pure.rst']"
cf7c067001f19f15c16b4f8608d47822d90ad70c,2022-10-11 07:25:21,da-woods,Merge branch '0.29.x',[]
877167351d2b1da993ea14ec4001406850ba7371,2022-10-11 07:24:01,da-woods,"[0.29] deprecation warning for ""from x cimport class A"" syntax (#4905)

Unused/rarely used syntax which we plan to remove in Cython 3.
See https://github.com/cython/cython/pull/4904",['Cython/Compiler/Parsing.py']
0976aa3e2dd1ad96a3ce9be5521b951f7d5e4390,2022-10-11 07:22:40,da-woods,"Remove ""from x cimport class C"" (#4904)

(and ""struct S""/""union U"")

This appears to be an old Pyrex feature introduced in
https://github.com/cython/cython/commit/9bac9c2e014ed63c2ac435e9b431fae124fba668
to provide a way of ""forward cimporting"" a class. I originally tried to make
a test for it, but couldn't actually come up with a useful way
of using it in the intended way, where the name would be unavailable
initially but avaialble later.

It looks to be completely untested, and responsible for some missing
coverage in Nodes.py (https://github.com/cython/cython/issues/4163).
The large section containing
```
if kind == 'struct' or kind == 'union':  # 8479 ↛ 8480
```
I propose to fix the missing coverage by killing off the feature.

The only people I could find using this syntax were H5Py, who
look to have removed their sole use of it 3 years ago
https://github.com/h5py/h5py/commit/8d2498c7f5e3fec884ff56e9aca905c325d82484
Therefore it seems a good candidate to go in Cython 3","['Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py']"
bcafbfb19093da9068dc854c2df3897f72902770,2022-10-09 21:16:01,da-woods,"Revert ""Fix PYPY_VERSION_HEX/PYPY_VERSION_NUM typo (#5074)""

This reverts commit 3a063cb43a94786261032266fb02c7234a7c2c07.

At least on master it was causing segmentation faults on PyPy3",['Cython/Utility/ModuleSetupCode.c']
1741bac96ce49d7e31b2434dd798fa38dad660dd,2022-10-09 21:15:13,da-woods,"Revert ""Fix PYPY_VERSION_HEX/PYPY_VERSION_NUM typo (#5074)""

This reverts commit 08d1e0a2f407d418f88f5fc1ca5ac482ed2fdb23.

It looks to cause some segmentation faults in PyPy3",['Cython/Utility/ModuleSetupCode.c']
3a063cb43a94786261032266fb02c7234a7c2c07,2022-10-09 16:05:47,Matti Picus,"Fix PYPY_VERSION_HEX/PYPY_VERSION_NUM typo (#5074)

Fix a typo: s/PYPY_VERSION_HEX/PYPY_VERSION_NUM",['Cython/Utility/ModuleSetupCode.c']
08d1e0a2f407d418f88f5fc1ca5ac482ed2fdb23,2022-10-09 16:05:47,Matti Picus,"Fix PYPY_VERSION_HEX/PYPY_VERSION_NUM typo (#5074)

Fix a typo: s/PYPY_VERSION_HEX/PYPY_VERSION_NUM",['Cython/Utility/ModuleSetupCode.c']
e1364b5a4b546be34829360d0d1471bc33c01262,2022-10-08 07:30:49,Matus Valo,Docs: Migrate buffer userguide to pure python (#5069),"['docs/examples/userguide/buffer/matrix.py', 'docs/examples/userguide/buffer/matrix.pyx', 'docs/examples/userguide/buffer/matrix_with_buffer.py', 'docs/examples/userguide/buffer/matrix_with_buffer.pyx', 'docs/examples/userguide/buffer/view_count.py', 'docs/examples/userguide/buffer/view_count.pyx', 'docs/src/userguide/buffer.rst']"
1e84f30a4a397cecb888997fc97f5c2604af0733,2022-10-07 11:21:25,da-woods,"Fix type slot definitions of some binop self types (#5068)

`__matmul__`, `__truediv__`, `__floordiv__` all forgot to set the type of `self`.

Fixes #5067","['Cython/Compiler/TypeSlots.py', 'tests/run/binop_reverse_methods_GH2056.pyx']"
a1e06d038594929aece02ba171b84f586bf20ead,2022-10-06 18:11:39,da-woods,Clean up empty issue numbers in changelog,['CHANGES.rst']
009b00b413258d9324675f31e838a75651f2e08c,2022-10-06 11:21:26,Stefan Behnel,Update changelog.,['CHANGES.rst']
3c4f009dbd039bcd4f74a0133e132d0b96ce1335,2022-10-06 07:25:54,Matus Valo,"Docs: Fix example in buffer user guide (#5065)

To make sure it works right with Python 3 semantics.",['docs/examples/userguide/buffer/matrix_with_buffer.pyx']
33cd7b0cf13313b36107f5d986be68aa9294830e,2022-10-05 20:04:32,da-woods,Merge branch '0.29.x',['Cython/Utility/CythonFunction.c']
f2e8b2f3dca7436630b1b4a4d42305adcf173ece,2022-10-05 18:10:51,Ewout ter Hoeven,"setup.py: Add project_urls for PyPI (#5064)

Add project_urls dictionary to setup.py with URLs to the Cython documentation, funding, source code and bug tracker. This will add those URLs under the ""Project links"" section on https://pypi.org/project/cython, making it easy to find these resources directly from PyPI.",['setup.py']
4215f740ab84975078fc0e98d33c55cc5b891f2e,2022-10-05 18:10:51,Ewout ter Hoeven,"setup.py: Add project_urls for PyPI (#5064)

Add project_urls dictionary to setup.py with URLs to the Cython documentation, funding, source code and bug tracker. This will add those URLs under the ""Project links"" section on https://pypi.org/project/cython, making it easy to find these resources directly from PyPI.",['setup.py']
25c0aa4b3536b6307a3b66f65cad702ed0f33e06,2022-10-05 18:00:35,Matus Valo,Docs: Migrate early binding for speed userguide to pure python (#5061),"['docs/examples/userguide/early_binding_for_speed/rectangle.py', 'docs/examples/userguide/early_binding_for_speed/rectangle.pyx', 'docs/examples/userguide/early_binding_for_speed/rectangle_cdef.py', 'docs/examples/userguide/early_binding_for_speed/rectangle_cdef.pyx', 'docs/examples/userguide/early_binding_for_speed/rectangle_cpdef.py', 'docs/examples/userguide/early_binding_for_speed/rectangle_cpdef.pyx', 'docs/src/userguide/early_binding_for_speed.rst']"
5266b9c929a3e8348998b70df7561c0d7c3a0758,2022-10-04 18:55:28,da-woods,"""Fix"" an exception formatting issue on Py2 (#5018)",['Cython/Utility/CythonFunction.c']
c0a5ab2de754eec8787693073207aff30b22a318,2022-10-01 14:05:22,da-woods,"PEP614 decorators (#4991)

Relaxes the grammar restrictions on decorators","['Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.py', 'tests/errors/e_decorators.pyx', 'tests/errors/w_uninitialized.pyx', 'tests/run/decorators.pyx', 'tests/run/test_grammar.py']"
0c8dea13946833606ab7e290d51cd12aee077c04,2022-10-01 13:49:29,Matus Valo,"Fix failing relative imports in __init__ files. (#4552)

Fixes lookup of from `. cimport modulename` when called in `__init__.*` files - previously it looked in the parent directory of the package while now it looks in the package.","['Cython/Compiler/CythonScope.py', 'Cython/Compiler/Main.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Symtab.py', 'tests/errors/e_relative_cimport.pyx', 'tests/run/relative_cimport_compare.srctree']"
d329339ba05ac76e0a83f539f173996e80cc89e1,2022-10-01 12:47:41,Chia-Hsiang Cheng,"Implement reversed C++ iteration (#5002)

*   support C++ classes with rbegin/rend implemented for reversed iteration, and
*    solve the compilation error when the type of temporary variable used to store the result of iterator has 'constness'.
    One example of 2. is when iterating std::map, Cython uses std::map<Key, Value>::value_type as the type of temporary variable to store the value of an iterator. However, std::map<Key, Value>::value_type will deduce to std::pair<const Key, Value>, which cannot be reused within a loop as its first component is const.","['Cython/Compiler/ExprNodes.py', 'tests/run/cpp_iterators.pyx']"
1ba6a55579e57aa9f104d01d1f962886d447ec9a,2022-09-27 17:04:07,da-woods,"Fix recursive repr on cdef dataclasses (#5045)

The dataclass module specifically guards repr from being
invoked recursively. I use a slightly different method here
to do the same thing.

Part of https://github.com/cython/cython/issues/4956","['Cython/Compiler/Dataclass.py', 'Tools/make_dataclass_tests.py', 'tests/run/test_dataclasses.pyx']"
849d14785367e8e74faf0ecc579430007cf1c6e6,2022-09-27 00:16:52,Robert Bradshaw,"Merge pull request #5052 from rgommers/suppress-gcc-pragma-warnings

Don't use unsupported GCC pragma's with Intel compilers",['Cython/Utility/TypeConversion.c']
673dab20eea77b86273d850c8c94b6d3fe3c5a48,2022-09-26 21:25:24,Ralf Gommers,"Don't use unsupported GCC pragma's with Intel compilers

The Intel compilers define `__GNUC__` but do not implement the
warning pragma's used by Cython in `TypeConversion.c`. That results
in a large amount of warnings like:
```
scipy/special/_ufuncs_cxx.cpython-310-x86_64-linux-gnu.so.p/_ufuncs_cxx.cpp(4940): warning #2282: unrecognized GCC pragma
  #pragma GCC diagnostic push
                         ^

scipy/special/_ufuncs_cxx.cpython-310-x86_64-linux-gnu.so.p/_ufuncs_cxx.cpp(4941): warning #2282: unrecognized GCC pragma
  #pragma GCC diagnostic ignored ""-Wconversion""
                         ^

scipy/special/_ufuncs_cxx.cpython-310-x86_64-linux-gnu.so.p/_ufuncs_cxx.cpp(4945): warning #2282: unrecognized GCC pragma
  #pragma GCC diagnostic pop
```

Hence disable the use of these pragma's when we see an Intel compiler
is used.",['Cython/Utility/TypeConversion.c']
d6ab97c7027451bc6db64618020ef3a20f1e569f,2022-09-26 16:53:39,da-woods,"Update pyxcodewriter.indenter (#5048)

It was written before `with` was universally available. Update
the interface to make it harder to get wrong.","['Cython/Compiler/Code.py', 'Cython/Compiler/FusedNode.py']"
7b5fc0b13a086b2c03708db2e82e8df482d36803,2022-09-24 16:29:54,da-woods,Recategorise a few dataclass tests,['Tools/make_dataclass_tests.py']
61d98ad972d3e2d61ed4c9c86688420cc078a63e,2022-09-24 13:22:05,da-woods,"Handle dataclass 0 and 1 item hashes consistently with Python (#4959)

The issue was that hash wasn't generated for a 0 field class, and for a 1 field class it hashed the field rather than a len-1 tuple containing the field. I don't think compliance here is strictly necessary, but it's fairly simple and allows us to enable a few more tests.

Part of #4956","['Cython/Compiler/Dataclass.py', 'Tools/make_dataclass_tests.py', 'tests/run/test_dataclasses.pyx']"
c2a54864217a6d4295c7f3748c15943da898b1c2,2022-09-24 12:35:25,da-woods,"Allow empty args to dataclass and field directives (#4957)

Part of the bug fixes in https://github.com/cython/cython/issues/4956","['Cython/Compiler/Dataclass.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Tools/make_dataclass_tests.py', 'tests/run/test_dataclasses.pyx']"
ab1053b2b1171664038488cb6721b9e407fe5679,2022-09-24 10:24:38,da-woods,"Fix arguments like `init=False` being ignored in dataclasses (#4958)

Fixes some of https://github.com/cython/cython/issues/4956","['Cython/Compiler/Dataclass.py', 'Tools/make_dataclass_tests.py', 'tests/run/test_dataclasses.pyx']"
230d5083704d8d7fe32f1998dcc375b18752b8f8,2022-09-24 07:08:39,Ruben Vorderman,"Fix coverage with packages in ""src"" layout (#3831)

This change makes the coverage plugin match paths like
`src/pkg/mod.c` with `src/pkg/mod.pyx`.

Co-authored-by: Sviatoslav Sydorenko <wk.cvs.github@sydorenko.org.ua>","['Cython/Coverage.py', 'tests/run/coverage_cmd_src_pkg_layout.srctree']"
1307134b7dec846082e3021d1cae0da96f81ab76,2022-09-23 21:10:56,da-woods,"Update Nuitka vs cython_freeze in the readme

It's genuinely much more appropriate for this. I think I've answered enough support questions about making self-contained executable. So if we can point people to the right tool that's a good thing",['README.rst']
44b64546e6c90801bf8dc279d6cf2e33b02e4ed2,2022-09-23 08:09:03,Alex,Set explicit permissions for GitHub Workflows (GH-5038),"['.github/workflows/ci.yml', '.github/workflows/wheels.yml']"
fd71114951a9e0d48f0aad324e71d3d9f8be29df,2022-09-19 11:18:09,da-woods,Merge branch '0.29.x',"['Cython/Utility/Complex.c', 'tests/run/complex_numbers_T305.pyx']"
d0b95046274f6d800b808e479a818cd1d03fba51,2022-09-19 11:17:06,da-woods,"Fix bug with complex powers of negative numbers (#5014)

* Fix bug with complex powers of negative numbers

A shortcut was incorrectly applied that returned NaN instead
of an imaginary number

* Add stress test","['Cython/Utility/Complex.c', 'tests/run/complex_numbers_T305.pyx']"
553f6b9a9917f3e37bb7d677ccc2b114609033e2,2022-09-19 11:14:28,EpigeneMax,"Fix mangling for .pxd cdef public functions (#5025)

This commit fixes a typo that caused `cdef public` functions from .pxd
files to be erroneously mangled. The unmangled name is chosen when the
definition from the .py file is processed, but on the condition that the
cname determined while processing the declaration from the .pxd file was
the mangled one (instead of a user-defined one).
The commit also adds a test for the ticket.","['Cython/Compiler/Symtab.py', 'tests/compile/pxd_mangling_names.srctree', 'tests/pypy2_bugs.txt']"
31b41b3ad45e061be7d1c63624727c8abf1d605c,2022-09-18 13:00:43,Роман Донченко,Mark new GitHub releases as pre-releases depending on the tag name (#5015),['.github/workflows/wheels.yml']
e0dda4555d1a1fae9d3f5ffc91e601710f7a7744,2022-09-18 08:06:40,Max Bachmann,"Fix incorrect operator lookup for postincrement (#4536)

Fix incorrect operator lookup for postincrement. Before this Cython always called the c++ ""preincrement"" operator.","['Cython/Compiler/ExprNodes.py', 'docs/src/userguide/migrating_to_cy30.rst', 'tests/errors/cpp_increment.pyx']"
490d3ebaf17fb3ad369cfd913d31de902324f184,2022-09-16 10:39:03,Maximilian,Use proper SPDX identifier (GH-5032),['setup.py']
ba2269e1d40bdfe13cee35b79ebc7175b8648ebf,2022-09-14 16:58:42,da-woods,"Fix C++ error from Cython unused (#5029)

I was getting a whole lot on errors along the lines of

```
cfunc_convert_with_memoryview.cpp:11097:8: note: in expansion of macro ‘CYTHON_UNUSED’
11097 | static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
      |        ^~~~~~~~~~~~~
cfunc_convert_with_memoryview.cpp:407:31: note: an attribute that appertains to a type-specifier is ignored
  407 |         #define CYTHON_UNUSED [[maybe_unused]]
```

This swaps the order of static and CYTHON_UNUSED.

I think whether the error appears is probably dependent on the exact
compiler version.","['Cython/Compiler/Code.py', 'Cython/Compiler/Nodes.py']"
a6e7218aae9ec3b2ca7a9d8be4276e802a480da1,2022-09-13 17:26:06,da-woods,"Remove dataclass tests that used mutability (#5026)

We accidently made cdef classes mutable in Python 3.10.
@maxbachmann has shown that it's trivially easy to crash them
(e.g. by trying to change the name). Therefore we should make
them immutable.

I included this test from the CPython test-suite because it
seemed to work. However, it relies on a feature that's
unsafe and unintended.","['Tools/make_dataclass_tests.py', 'tests/run/test_dataclasses.pyx']"
9fcf55fa86488bba666e918ba6550e976557411f,2022-09-12 05:56:12,Max Bachmann,fix PyPy unused variable warning in Coroutines.c (#5019),['Cython/Utility/Coroutine.c']
77918c57b5f36bee708f625e2499bf05b23a87f1,2022-09-10 13:55:15,Ashwin Srinath,"[ENH] Propagate exceptions from `cdef` functions by default (#4670)

Change the default behavior to always check for exceptions after a call to a cdef function defined in Cython. Calls to extern cdef functions are not checked by default.","['Cython/Compiler/Nodes.py', 'Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Includes/cpython/time.pxd', 'Cython/Utility/MemoryView.pyx', 'docs/src/userguide/language_basics.rst', 'docs/src/userguide/migrating_to_cy30.rst', 'tests/build/cythonize_options.srctree', 'tests/compile/branch_hints.pyx', 'tests/compile/cpp_nogil.pyx', 'tests/compile/declarations.srctree', 'tests/compile/publicapi_pxd_mix.pxd', 'tests/compile/publicapi_pxd_mix.pyx', 'tests/errors/cfuncptr.pyx', 'tests/errors/e_excvalfunctype.pyx', 'tests/errors/e_nogilfunctype.pyx', 'tests/errors/nogil.pyx', 'tests/errors/nogilfunctype.pyx', 'tests/memoryview/cythonarray.pyx', 'tests/memoryview/memoryview_acq_count.srctree', 'tests/memoryview/memslice.pyx', 'tests/memoryview/numpy_memoryview.pyx', 'tests/run/builtin_abs.pyx', 'tests/run/cfunc_convert.pyx', 'tests/run/cpdef_void_return.pyx', 'tests/run/cpp_classes.pyx', 'tests/run/cpp_classes_def.pyx', 'tests/run/cpp_exceptions_nogil.pyx', 'tests/run/cpp_function_lib.pxd', 'tests/run/cpp_stl_function.pyx', 'tests/run/exceptionpropagation.pyx', 'tests/run/exceptions_nogil.pyx', 'tests/run/line_trace.pyx', 'tests/run/nogil.pyx', 'tests/run/nogil_conditional.pyx', 'tests/run/parallel.pyx', 'tests/run/sequential_parallel.pyx', 'tests/run/trace_nogil.pyx', 'tests/run/type_inference.pyx', 'tests/run/with_gil.pyx', 'tests/run/with_gil_automatic.pyx', 'tests/run/withnogil.pyx', 'tests/testsupport/cythonarrayutil.pxi']"
606bd8cf235149c3be6876d0f5ae60032c8aab6c,2022-09-10 06:57:07,da-woods,"Try to use test_dataclass from CPython (#4955)

It needs a bit of translation to get it Cythonable (since
Cython dataclasses are extension types and so must be at the
global scope).

At the moment bugs are identified but not fixed","['Tools/dataclass_test_data/test_dataclasses.py', 'Tools/make_dataclass_tests.py', 'runtests.py', 'tests/run/test_dataclasses.pxi', 'tests/run/test_dataclasses.pyx']"
866e1a01fab85ef9ae5cf0be9a75ffaac9b9e104,2022-09-05 17:23:37,da-woods,"Make sure we call __del__ for final types (#4996)

including final types that inherit __del__ from elsewhere (either
known or unknown).

Fixes #4995","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/TypeSlots.py', 'runtests.py', 'tests/run/pep442_tp_finalize.pyx', 'tests/run/pep442_tp_finalize_cimport.srctree']"
0c7f5534923284ba42f6d5140f17f303a4f4cd8f,2022-09-05 17:02:17,da-woods,"Allow bound cfuncs to be coerced to object (#4988)

Fixes https://github.com/cython/cython/issues/4890 (although likely
doesn't generate the optimized code they were really after).

This is an initial pass at the problem that just uses functools.
It's likely that Cython could generate more efficient code in
future.","['Cython/Compiler/ExprNodes.py', 'tests/run/cfunc_convert.pyx']"
de2ca1746ba7c8a4c373005d4c6ed02aba3c1978,2022-09-05 11:05:00,0dminnimda,ci-run.sh: run msvc build with multiple processes (GH-4977),['Tools/ci-run.sh']
85a29fbd4d74be8560d379a0e443ed819d2c0534,2022-09-05 10:59:18,da-woods,"Remove `p_lambdef_nocond` from the parser, following Python 3.9+. (GH-4992)

Note that it wasn't correct before since it didn't pass the
correct flag to `p_lambdef` and thus was equivalent to just
using `p_lambdef`.

Note also that there's a difference in behaviour between Python3.9+
and before. Python <3.9 allowed `[i for i in range(10) if lambda: i]`
while Python >=3.9 disallows this. Arguably it's pointless because
the lambda always evaluates to True. See
https://github.com/python/cpython/issues/86014
for the Python issue.

With this change Cython will follow the Python 3.9 behaviour at
the cost of potentially breaking some code that does use the
pattern above.

Part of the cleanup in https://github.com/cython/cython/issues/4595","['Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py']"
f5e14787a25cdceeb4d2424590edac4d0e9494a2,2022-09-05 10:40:42,Max Bachmann,"Prevent more ""unused variable"" C compiler warnings (GH-5004)

See https://github.com/cython/cython/pull/4693","['Cython/Compiler/ExprNodes.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/CommonStructures.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/Optimize.c']"
9b989f4300f13c068d3e1486b86bb78d2d54ac19,2022-09-04 13:19:25,Max Bachmann,"only cancel successive runs for pull requests (#5008)

This should skip workflows only in pull requests, since the commit sha should be unique. In case the ci is run for the same commit sha (e.g. when creating new branches), I think it is fine to cancel the CI.",['.github/workflows/ci.yml']
f0a31b720ee20407976a16efd7a9cb4368fb8936,2022-09-04 13:19:25,Max Bachmann,"only cancel successive runs for pull requests (#5008)

This should skip workflows only in pull requests, since the commit sha should be unique. In case the ci is run for the same commit sha (e.g. when creating new branches), I think it is fine to cancel the CI.",['.github/workflows/ci.yml']
5eeb363ea5117a44e687953d1ff770d8179e457a,2022-09-04 09:40:41,Max Bachmann,"only use [[fallthrough]] starting C++17 (#5005)

This led to warnings when building with clang and the -pedantic warnings when building for C++ versions below C++17",['Cython/Utility/ModuleSetupCode.c']
261536b3b929fc37dd9e7e160c8f209a3e19a5f6,2022-09-04 09:22:57,Max Bachmann,"cancel unfinished CI run to save CI time (#5006)

This cancels the ci for previous commits on the same branch and previous commits in a PR, which should save CI time since the CI builds do no longer stack up when pushing multiple times while the CI is still running.",['.github/workflows/ci.yml']
380d9ef98b22be168ba790409f09c4a9a688edb3,2022-09-04 09:22:57,Max Bachmann,"cancel unfinished CI run to save CI time (#5006)

This cancels the ci for previous commits on the same branch and previous commits in a PR, which should save CI time since the CI builds do no longer stack up when pushing multiple times while the CI is still running.",['.github/workflows/ci.yml']
3424926e9c8f03061b55516d2516a9f98999399e,2022-08-20 11:10:33,da-woods,"Handle fused types containing indirect fused types (#4725)

For example, a fused typedef that contains a vector of a fused
type. This needs to do a more complex iteration to discover the
range of fused types that its subtype can contain.","['Cython/Compiler/PyrexTypes.py', 'tests/run/fused_cpp.pyx']"
cdecd15e6f52d7b9364fc5c6eb12aeda89ff7437,2022-08-19 09:52:35,Stefan Behnel,"Do not make SkipDeclarations a cdef class since it is only used as a mixin, also together with a main cdef base class.
Making it an extension type has no apparent advantages when mixing it with Python transform classes, but risks introducing struct layout conflicts when combined with cdef transforms.

Closes https://github.com/cython/cython/pull/4986
See https://github.com/cython/cython/issues/4350
See https://github.com/cython/cython/issues/4351",['Cython/Compiler/ParseTreeTransforms.pxd']
322aaaf412aea8d008fdbff015731d07492d2052,2022-08-16 18:18:35,Emmanuel Leblond,Remove cclass decorator from cython snippet in userguide (#4979),['docs/src/userguide/extension_types.rst']
14a818772974232d46c56aff916ed0311e9f2dd9,2022-08-16 16:17:10,Matus Valo,[Doc] Add pure python mode to parallelism.rst (#4974),"['docs/examples/userguide/parallelism/breaking_loop.py', 'docs/examples/userguide/parallelism/breaking_loop.pyx', 'docs/examples/userguide/parallelism/cimport_openmp.py', 'docs/examples/userguide/parallelism/cimport_openmp.pyx', 'docs/examples/userguide/parallelism/memoryview_sum.py', 'docs/examples/userguide/parallelism/memoryview_sum.pyx', 'docs/examples/userguide/parallelism/parallel.py', 'docs/examples/userguide/parallelism/parallel.pyx', 'docs/examples/userguide/parallelism/setup_py.py', 'docs/examples/userguide/parallelism/setup_pyx.py', 'docs/examples/userguide/parallelism/simple_sum.py', 'docs/src/userguide/parallelism.rst']"
a7e8d60afa928831862c1997d3c4bf8c85d6f3b6,2022-08-13 10:43:37,Stefan Behnel,"Revert ""CI: Silence an annoying C compiler command line warning.""

MSCV does not seem to support silencing warnings regarding the command line.

This reverts commit 07c03d343983c2df07ad0288fc64583776acc9fb.",['Tools/ci-run.sh']
0509398738ccf970ef9863a7198fdd814660169c,2022-08-12 10:48:29,Stefan Behnel,Allow Windows path names also in test error/warning output.,['runtests.py']
18a3413283a9fcdf921acfd9d5b5dee00eeb2d69,2022-08-12 10:28:57,Stefan Behnel,"Test and fix extended_iglob() with Windows paths (as used by ""cythonize"" when compiling whole packages).","['Cython/Build/Dependencies.py', 'Cython/Build/Tests/TestDependencies.py']"
07c03d343983c2df07ad0288fc64583776acc9fb,2022-08-12 10:27:25,Stefan Behnel,CI: Silence an annoying C compiler command line warning.,['Tools/ci-run.sh']
6006a7e8ad4be5f9fcd269b472ee955a3ef931a4,2022-08-11 20:18:31,Matus Valo,[Doc] Document final C methods (#4960),['docs/src/userguide/extension_types.rst']
a30eba6f6ea2fffe4a9670c3403f17e416bf2227,2022-08-11 12:23:54,Stefan Behnel,CI: Prevent changes to irrelevant files from triggering a CI run.,['.github/workflows/ci.yml']
13e5024dc18a47d87f8347b76aa071c8750212f4,2022-08-11 12:23:32,Stefan Behnel,"Add some more gitignores, in case we start (or try) compiling more of Cython's modules.",['.gitignore']
78a3af71a95c2f70ef0f65dab39ab64a6d427a8d,2022-08-11 09:01:06,da-woods,"Switch to YAML issue templates (#4971)

I think it's fairly hard to read the markdown forms and pick out instructional comments, bits that you're supposed to be modifying, etc. (even when you're trying to do it right and not just click through to submit your support question as quickly as possible).

Hopefully the YAML forms are a little clearer - they at least separate ""instructions"" from ""user input"" clearly.

I've also added a 3rd ""other"" free-form form for anything that doesn't quite fit into the two categories. We may regret that but it seemed sensible to have it as an option first.","['.github/ISSUE_TEMPLATE/bug_report.md', '.github/ISSUE_TEMPLATE/bug_report.yml', '.github/ISSUE_TEMPLATE/feature_request.md', '.github/ISSUE_TEMPLATE/feature_request.yml', '.github/ISSUE_TEMPLATE/other.md']"
278d07603e9ae9ce167f489c3c9855cb424cd5e7,2022-08-10 14:05:59,Stefan Behnel,Update the GH issue template to hint more at trying out 3.0 first.,['.github/ISSUE_TEMPLATE/bug_report.md']
68ce046a823d8d5efc9572ce6510326972da1864,2022-08-10 07:11:53,da-woods,"Set is_variable on ""special"" entries (#4965)

Fixes a small omission in https://github.com/cython/cython/commit/f6edb652db32e12505be8bc4767e64b50790f378",['Cython/Compiler/Builtin.py']
b721a96d13b43f7018ed6f697715e829d0e5a9af,2022-08-09 13:55:52,da-woods,"Fix memoryview iteration in generator expressions (GH-4968)

As a result of f946fe22fff32077dc58beeb64ec1ebc85d37632
And fix at least one pre-existing reference counting leak for memoryview references in things like
`any(i > 0 for i in memview)`","['Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'tests/memoryview/memoryview.pyx', 'tests/memoryview/memslice.pyx']"
dc2b1dea0a5e0be66ecee3642a83fccd478acc16,2022-08-09 13:50:42,Stefan Behnel,Remove outdated CI build configurations for Travis and Appveyor.,"['.travis.yml', 'appveyor.yml']"
d9e205077e8770cee6e0aa8a61cbfd23b8813847,2022-08-09 08:12:28,Stefan Behnel,Move some declarations next to the optimisation method that uses them. They used to be there before another method was added.,['Cython/Compiler/Optimize.py']
3e93b8ed48f76616e24b989809fd0585b4a86ffb,2022-08-09 13:42:38,Jonathan Helgert,Add declarations for C++20's Bit manipulation functions (GH-4962),"['Cython/Includes/libcpp/bit.pxd', 'runtests.py', 'tests/macos_cpp_bugs.txt', 'tests/run/cpp_stl_bit_cpp20.pyx']"
da32c448814b6f78b5972a5265a0a9d979c9b847,2022-08-08 21:15:13,Stefan Behnel,"runtests.py: Let the decision whether a C++XX test can run at all really depend on the C compiler version. Not just whether the ""-std=..."" option should be set or not.",['runtests.py']
c0ba04283ebfb906028d542b52da352c8a326b71,2022-08-08 20:58:24,Stefan Behnel,runtests.py: Also allow defining a minimum clang version in the C++XX extension setup.,['runtests.py']
301abe70ba363fae4d9c3a800cf7aecc50d30387,2022-08-08 20:46:08,Stefan Behnel,runtests.py: Generalise the C++XX extension setup to support also newer C++ standard versions.,['runtests.py']
f946fe22fff32077dc58beeb64ec1ebc85d37632,2022-08-08 18:29:48,da-woods,"Generator expression and comprehension scope (#4254)

Fixes #1159.

This should be a simpler way of dealing with the long-standing generator and comprehension scoping issues. Unlike the previous PR it is fairly non-intrusive (i.e. doesn't wrap everything in `ResultRefNodes`) and therefore the changes should be more reasonable. Instead it:

* Gives `IteratorNode` a scope (pointed at the outer scope rather than the scope of the generator/comprehension)
* Tags each `ExprNode` inside the generator iterator sequence with a number, and uses those tags later to work out what needs to be converted to an argument for the generator. If an `ExprNode` is optimized out then that's fine - one of its children will have been tagged.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FlowControl.pxd', 'Cython/Compiler/FlowControl.py', 'Cython/Compiler/Naming.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/TypeInference.py', 'tests/bugs.txt', 'tests/run/cpp_iterators.pyx', 'tests/run/cpp_iterators_simple.h', 'tests/run/generators_py.py', 'tests/run/genexpr_arg_order.py', 'tests/run/genexpr_iterable_lookup_T600.pyx', 'tests/run/locals.pyx']"
0be7a37283bf6f9f9b563f22659d8aa9d353db73,2022-08-08 06:57:39,da-woods,"Let C++ references work in fused types (#4719)

Fixes #4717","['Cython/Compiler/PyrexTypes.py', 'tests/run/fused_cpp.pyx']"
20c1432c9343afe46a0421ef54f9edae2377d475,2022-08-08 03:59:42,da-woods,"Fix handling of annotations in functions in dataclasses (#4954)

Fixes #4953.

Before this change the annotations were being treated as
""dataclass-related"" annotations, and thus being made ""public"".","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Symtab.py', 'tests/run/pure_cdef_class_dataclass.py']"
23023e991ab3aa2b7a304aa53511460c7f1b67b6,2022-08-07 19:40:24,Matus Valo,[Doc] Mention explicitely cython.NULL language basics (#4964),['docs/src/userguide/language_basics.rst']
5ddbe05d419d48161e5938e8de227d41913312ee,2022-08-07 15:12:05,0dminnimda,ci-run.sh: Simplify by compacting two conditions into one (GH-4961),['Tools/ci-run.sh']
db0af9cd99e0ea06f9755c3ec8fe084b53c6ae9f,2022-08-06 21:45:59,Stefan Behnel,Add a longer docstring comment to explain how the coverage plugin maps trace calls to source code.,['Cython/Coverage.py']
5b4bc497ad04880d85c7cb64b8c6e6aa919ffdde,2022-08-06 12:08:07,Stefan Behnel,"Rename a method to distinguish it from the ""add_*()"" methods that do not return anything.",['Cython/Compiler/Dataclass.py']
9cb28fb273b9bb9b2c08d4f6131e08f5a92f951c,2022-08-06 11:57:42,Stefan Behnel,"Refactor the dataclass code generation to use a dedicated TemplateCode class instead of an opaque tuple.
That allows moving more functionality into the class that was previously spread over multiple places in the code.",['Cython/Compiler/Dataclass.py']
78adcf4645fa76388c9f75fb64d801196921c737,2022-08-06 11:18:00,Stefan Behnel,Fix last commit: splitting declaration and initialisation of local variables happens later than TreeFragment's tree normalisation.,['Cython/Compiler/Dataclass.py']
71db9f7f236f975ce6ea068317fefd25186e4bd8,2022-08-06 09:45:51,Stefan Behnel,"Generate simpler Cython code that handles an invalid case first, before continuing with the normal cases.",['Cython/Compiler/Dataclass.py']
a0b5e955ccb1ee2a4d37f2f4896446932cf9aae2,2022-08-06 09:41:10,Stefan Behnel,"Fix usage of undeclared variable that should have been a plain empty string (because there is no ""__eq__"" and thus no code to generate).",['Cython/Compiler/Dataclass.py']
ff502b17d1ed96976b3593b44da273794fd713fa,2022-08-06 09:11:29,Stefan Behnel,"Go back to compile Parsing.py and Code.py in the default binary wheel packages since it really brings some 10% improvement.
Wheels are often cached, whereas CPU time is not.",['setup.py']
65cd5eabed156ead3602ee5b96b4a0c7879483c8,2022-08-06 09:11:12,Stefan Behnel,Turn some often used CCodeWriter methods into (final) cdef methods to reduce their call overhead.,"['Cython/Compiler/Code.pxd', 'Cython/Compiler/Code.py']"
3c9fc5d23f457bca473252a2e79d4538830ea559,2022-08-06 09:10:45,Stefan Behnel,Simplify code.,['Cython/Compiler/MemoryView.py']
bcff552078cc5b91c75a231e7823604e27809872,2022-08-05 21:08:20,Stefan Behnel,Reformat and clarify a floating point calculation that didn't really look like one.,['Cython/Compiler/Annotate.py']
9d2ba1611b28999663ab71657f4938b0ba92fe07,2022-08-05 20:54:19,Stefan Behnel,"CI: Remove ""time"" command that does not exist on Windows.",['Tools/ci-run.sh']
ac97b861a8507f477e0dcce52d6f6332555b843a,2022-08-05 14:09:59,Stefan Behnel,Reduce unnecessary code generation a little.,['Cython/Compiler/Visitor.py']
aa4108467c7c04f6720ac27aca35bcda913ab304,2022-08-05 09:50:19,Stefan Behnel,Merge branch '0.29.x',[]
c656624a4fc638e4c0cc098dab0f59a6f8331b1c,2022-08-05 09:49:39,Eli Schwartz,"[0.29] implement the --depfile command-line option for the ""cython"" tool (GH-4949)

Backports https://github.com/cython/cython/pull/4916","['Cython/Build/Dependencies.py', 'Cython/Compiler/CmdLine.py', 'Cython/Compiler/Main.py', 'Cython/Utils.py', 'tests/build/depfile_package_cython.srctree', 'tests/build/depfile_package_cythonize.srctree']"
cedf48e5b121b59146f8643e43f6a56fa1c3fb2d,2022-08-05 09:28:41,Matus Valo,"Let ""cythonize --help"" output the supported environment variables (GH-4952)

Closes https://github.com/cython/cython/issues/1711",['Cython/Build/Cythonize.py']
007f3869346817401204ab2b0129d2a7b4ba1843,2022-08-05 06:42:47,Stefan Behnel,Prevent the wheel builder from triggering on unrelated PR changes.,['.github/workflows/wheels.yml']
0528b4c783bd46a6ab96b0bc92d6fd7da8ce0431,2022-08-05 06:15:29,Stefan Behnel,CI: Disable the pure Python wheel builder unless we actually want wheels.,['.github/workflows/wheels.yml']
8ac874f10265f13ddcc34490e0b160f6a4e66e33,2022-08-04 19:38:07,Stefan Behnel,Merge branch '0.29.x',['Cython/Utility/Exceptions.c']
189f6684474b9d3c5e27696f2ed961657b951204,2022-08-04 19:36:18,Stefan Behnel,"Hide a C compiler ""unused argument"" warning in Py3.11 where the ""fast thread state"" usage is disabled.

Closes https://github.com/cython/cython/issues/4948",['Cython/Utility/Exceptions.c']
a97d91e8f78dc7adacd8cd6c786347cb9d0c584a,2022-08-04 17:48:52,Stefan Behnel,"Validate imported ""cython.*"" module names and reject unknown module names.

Closes https://github.com/cython/cython/issues/4947","['Cython/Compiler/ParseTreeTransforms.py', 'tests/errors/e_invalid_special_cython_modules.py', 'tests/errors/e_pure_cimports.pyx']"
8afd932c28d08428d45bba03d6b642093e4c973b,2022-08-04 08:34:45,Stefan Behnel,"Fix missing newlines in HTML annotation file, introduced in 0b4370678e5b00a020cd990f922964d3aba59884.

Closes https://github.com/cython/cython/issues/4945","['Cython/Compiler/Annotate.py', 'Cython/Compiler/Code.pxd', 'Cython/Compiler/Code.py', 'Cython/TestUtils.py', 'tests/run/annotate_html.pyx']"
287a11e55259ffe01cf43a450159be7f946f1cfb,2022-08-03 14:23:10,Xavier,"Fix bug in cpp iteration over rvalue-dependant attribute (#3828)

The implementation of the Python-style `for ... in` loop over an
iterable cpp sequence (using `begin()` and `end()`) needs to determine
whether the sequence should be stored in a temporary variable or
if it can be iterated over directly.

The previous code assumed that attributes are always safe to be
iterated directly, but attributes can depend on an rvalue, as in:

    for i in returns_object_with_vector_attribute().vector:
        ...

In such a case we need to store the `in` operand in a temporary value
on which `begin()` and `end()` can be safely called.","['Cython/Compiler/ExprNodes.py', 'tests/run/cpp_iterators.pyx', 'tests/run/cpp_iterators_over_attribute_of_rvalue_support.h']"
16811213c6e21459582e29eb33f4a4fb80322b86,2022-08-03 10:42:46,Stefan Behnel,CI: Fix syntax problem in build script.,['Tools/ci-run.sh']
9d5787523d8110c4d7204df08baef1138a1f2259,2022-08-03 10:14:29,Stefan Behnel,Minor code simplification.,['Cython/Compiler/ParseTreeTransforms.py']
51749704b10b65fe4a77b5f7df69e4270bf60d76,2022-08-03 10:06:36,Stefan Behnel,"Use -O3 C compiler flags only for the Cython build, not for the test file compilation.",['Tools/ci-run.sh']
a919d570bd463ab7a0d6c32836c3e41adf2a9810,2022-08-03 09:59:08,Stefan Behnel,CI: Bring all file size output together at the end of the build part to help with finding it in the logs.,['Tools/ci-run.sh']
88a46f1184ffed326cafe5d7e879c664acbd2bf8,2022-08-03 09:44:45,Stefan Behnel,Sort build log output to make the list of Cython's extension modules easier to compare.,['Tools/ci-run.sh']
441869f51503d4f6ff9184d063e595d150a867fd,2022-08-03 09:38:55,Stefan Behnel,CI: log how long it takes to build Cython for each of the configurations.,['Tools/ci-run.sh']
baa0543cb105ca4a92a8d366b47b3e2282d02e1f,2022-08-03 09:16:02,Stefan Behnel,CI: Fix Py3.10 version reference to prevent it from coming out as 3.1.,['.github/workflows/ci.yml']
ca889e1ebab3aa9ce549e574fd84e8b018ca1351,2022-08-03 09:11:18,Stefan Behnel,Print ext module sizes in CI build.,['Tools/ci-run.sh']
a7dbdebdc076b18c7a4b442ee2523411184ac085,2022-08-03 09:04:40,Stefan Behnel,"Use ""compile all"" CI builds to create generic wheels to allow comparing their size to the standard wheels.","['.github/workflows/ci.yml', 'Tools/ci-run.sh']"
c1af54fb1d20cc14adca8c0f4fe60160ed6a1868,2022-08-03 08:55:17,Stefan Behnel,"Use latest Py3.10 for the ""compile all"" CI builds instead of 3.9.",['.github/workflows/ci.yml']
5fbac16da26e1cbddeafd9fa9c98d31ce8b5e19d,2022-08-03 08:53:28,Stefan Behnel,"Allow passing Cython build options via env vars, not only via CLI.","['.github/workflows/wheels.yml', 'setup.py']"
d1db86b1e2560afe2e0ec4ce7d6c25628023e16b,2022-08-03 08:33:31,Stefan Behnel,Delete outdated wheel workflow file. Replaced by wheels.yml.,"['.github/workflows/wheel-manylinux.yml', '.github/workflows/wheels.yml']"
fd8a826faecd8d541cc2455c976de21b1df229ff,2022-08-03 08:32:07,Stefan Behnel,Upload wheels to GH-Releases after a release build.,['.github/workflows/wheels.yml']
be4f81be305e14157421a95718557196e4d19abc,2022-08-03 05:21:46,Thomas Li,"Add GHA workflow to build wheels using cibuildwheel (GH-4784)

Only Python >= 3.6 is supported with this as of now (hopefully that is also the case for Cython 3.1).

Closes https://github.com/cython/cython/issues/4736
Closes https://github.com/cython/cython/issues/3916",['.github/workflows/wheels.yml']
f51d258e74ea0ab073507f05e5f1550cc457c8d7,2022-08-02 20:45:08,Matus Valo,"Use annotation for pointer in docs (#4942)

and remove note about bug","['docs/examples/tutorial/clibraries/queue.py', 'docs/src/tutorial/clibraries.rst']"
bf6362634eecec89f8907e79d7bc68bed0267838,2022-08-02 08:38:24,Matus Valo,IpythonMagic: Replace deprecated imp.load_dynamic() by importlib (GH-4941),"['Cython/Build/Inline.py', 'Cython/Build/IpythonMagic.py']"
b4f84a95ef996a7944d63c1e616811f18a1c5779,2022-08-01 22:07:54,Golden Rockefeller,"[docs] Replace some cinit with init (#4642)

* Replace unnecessary __cinit__ with __init__ in documentation examples

* Use __cinit__ when necessary in the wrapping C++ examples

* Modify existing Rectangle instead of creating a new Rectangle in the pointer to Rectangle example","['docs/examples/userguide/extension_types/dict_animal.pyx', 'docs/examples/userguide/extension_types/extendable_animal.pyx', 'docs/examples/userguide/sharing_declarations/shrubbing.pyx', 'docs/examples/userguide/wrapping_CPlusPlus/rect.pyx', 'docs/examples/userguide/wrapping_CPlusPlus/rect_ptr.pyx', 'docs/examples/userguide/wrapping_CPlusPlus/rect_with_attributes.pyx']"
6ab4b5f6b9d54fe43b2a2ce6c71366351699a7f8,2022-08-01 05:30:01,Stefan Behnel,"Merge remote-tracking branch 'origin/master'

# Conflicts:
#	Cython/Distutils/old_build_ext.py","['Cython/Compiler/Builtin.py', 'Cython/Utility/MemoryView_C.c', 'tests/run/cdef_class_dataclass.pyx', 'tests/run/pep526_variable_annotations.py']"
cc75ab5cea18decdf47c19bc7483193a2d9e8d00,2022-08-01 05:27:29,Stefan Behnel,Minor code cleanup.,['Cython/Build/Inline.py']
6147450d043eca0ee3e47c79558248705e85e41f,2022-07-31 17:41:59,da-woods,"Use standard C or C++ atomics for memoryviews (#4925)

Use them in preference to the existing compiler-specific
atomic types.

In both cases this requires the 2011 edition of the standard.

Closes https://github.com/cython/cython/issues/4923",['Cython/Utility/MemoryView_C.c']
f6edb652db32e12505be8bc4767e64b50790f378,2022-07-31 16:34:43,da-woods,"Add var_entry for ""special"" modules (e.g. typing) (#4603)

Allows them to be accessed as regular Python attributes too.

(First second or third(?) fix for something that probably should have been in #3400)","['Cython/Compiler/Builtin.py', 'tests/run/cdef_class_dataclass.pyx', 'tests/run/pep526_variable_annotations.py']"
6cd64875336b5121e145a3fe85c7621f3db5a64e,2022-07-31 13:03:19,da-woods,code style in old_build_ext.py,['Cython/Distutils/old_build_ext.py']
d6c66598353555a42b18095f1027cea4503cfdd6,2022-07-31 09:13:50,Stefan Behnel,Use manylinux2014 instead of the EOL manylinux1 docker images to build legacy wheels.,"['.github/workflows/wheel-manylinux.yml', 'Makefile']"
9366abc7d6700da7c98b3b1f169e4f2bfac28c54,2022-07-31 05:30:07,Stefan Behnel,Fix code style.,['Cython/Distutils/old_build_ext.py']
65ff43ed9ce7f90ae80afd83702e84ad98f4241a,2022-07-31 05:22:37,Stefan Behnel,Prepare release of 3.0.0a11.,"['CHANGES.rst', 'Cython/Shadow.py']"
cfe1a4eb374c529e946b7684dbfd81a25fbc7eae,2022-07-31 05:15:46,Stefan Behnel,Update changelog.,['CHANGES.rst']
66534408d3d8d6132e5b4e4061481661ba2d190e,2022-07-31 04:42:21,da-woods,"Don't call __Pyx_ImportNumPyArrayTypeIfAvailable() for every fused def function (GH-4935)

Cython.Utils.OrderedSet did not have a `__bool__` function and so
was always treated as ""true"". The mean that Cython always generated
buffer-handling utility code (`if all_buffer_types:` in FusedNode.py)
even when just handling scalar types.","['Cython/Utils.py', 'tests/compile/fused_buffers.pyx', 'tests/compile/fused_no_numpy.pyx']"
a864f9b8830fb80a24abb0d82cd9a28289e532a5,2022-07-31 04:37:05,Stefan Behnel,Fix some code style issues: assert is not a function but a statement.,"['Cython/Compiler/ExprNodes.py', 'tests/run/pure_py.py']"
84afe5550e619cc1b40e9909e4a35234841ad366,2022-07-30 16:43:10,scoder,Allow C code assertions in tests by defining regular expressions in module directives. (GH-4938),"['Cython/Compiler/Options.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/Pipeline.py', 'Cython/TestUtils.py', 'tests/compile/c_directives.pyx', 'tests/run/c_file_validation.srctree']"
9b69292ee4f5340994776cac4ba18c27c9578ea1,2022-07-29 17:58:31,da-woods,"Fix initialization of init=False dataclass fields (GH-4908)

init=False (in a field name) means that it isn't an argument to
`__init__`. It does not mean that the field isn't initialized if
a default method of initialization is provided.","['Cython/Compiler/Dataclass.py', 'tests/run/pure_cdef_class_dataclass.py']"
11e4b1f11c3849622007481d92c3589ce5cfbec8,2022-07-29 17:56:50,scoder,Make Cython async functions set CO_COROUTINE and CO_ASYNC_GENERATOR code flags (GH-4902),"['Cython/Compiler/ExprNodes.py', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/test_coroutines_pep492.pyx']"
820b444ddcbfae7e393298d3a6478e742aa12022,2022-07-29 17:51:01,Eli Schwartz,"Implement the --depfile command-line option for the ""cython"" tool (GH-4916)

* refactor cythonize depfile support to be reusable

We would like to use it in the frontend for the cython tool as well.
Pull it out of the main loop and make it a utility function.

* fix depfiles emitting unusable relative paths

The paths for files in the source tree are relative instead of absolute.
This is not inherently a problem, but they are relative to the
containing directory of the source code file but the program that parses
these files (make, ninja) computes filenames relative to its working
directory, not relative to the source file.

Likewise, the final output file had its entire path component trimmed,
leaving just a bare filename.

Make this actually work by computing all relative paths relative to the
current working directory of the cython process itself. When invoked by
a build system, this will be the same directory the build system expects
files to be based on. This has the obvious drawback of requiring a sensible
work directory (i.e. you can't ""just run"" cython next to the sources), but it's
still a reasonable thing to assume and we already make that assumption in
other places.","['Cython/Build/Dependencies.py', 'Cython/Compiler/CmdLine.py', 'Cython/Compiler/Main.py', 'Cython/Compiler/Options.py', 'Cython/Utils.py', 'tests/build/depfile_package_cython.srctree', 'tests/build/depfile_package_cythonize.srctree']"
ccc02e097fc70b8aef43773d77607013d51f9438,2022-07-29 06:33:36,Stefan Behnel,Remove dead test code (replaced by new version further down).,['tests/memoryview/memslice.pyx']
6a9b519c3b0d1696c07058eaa4bb1bc628e87bf7,2022-07-29 06:31:50,da-woods,"Fix a crash due to incorrect reference counting of memoryview arguments (GH-4848)

Closes https://github.com/cython/cython/issues/4798

Moves reference counting of memoryview arguments entirely into the def function wrapper.
New behaviour is:

```
def wrapper(x, ...):
  # summary of generated code!
  xview = memoryview(x)
  # handle rest of args
  if error_in_rest_of_args:
    cleanup(xview)
  ret_value = func(xview, ...)
  cleanup(xview)
  return ret_value
```

while old behaviour was

```
def wrapper(x, ...)
  xview = memoryview(x)
  # handle rest of args
  if error_in_rest_of_args:
    cleanup(xview)
  return func(xview, ...)

def func(xview, ...):
   # body goes here
   cleanup(xview)
   return ...
```

This treats memoryviews in the same way as PyObjects.

The next step (not done here) is to unify put_var_incref_memoryviewslice() with put_var_incref() of other types.

One observable consequence is that a memoryview argument is released later in functions that reassign their argument. E.g.:

```
def f(double[:] xview, x):
  # where xview is a view of x...
  xview = None
  # In the old version, the memoryview would be released and you
  # could probably resize x. In the new version the memoryview
  # would be held until the end of the wrapper function and you
  # could not resize x
  x.append(1)
```

I don't think this is a major problem but it's worth mentioning.","['Cython/Compiler/Nodes.py', 'tests/memoryview/memslice.pyx']"
619cbbc78656ab8c960d76a8f1bc538636a1286a,2022-07-29 06:14:29,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Utility/MemoryView.pyx', 'Cython/Utility/MemoryView_C.c', 'tests/memoryview/memslice.pyx']"
c48361d0a0969206e227ec016f654c9d941c2b69,2022-07-29 05:43:40,Stefan Behnel,Prepare release of 0.29.32.,"['CHANGES.rst', 'Cython/Shadow.py']"
a4be069c6bb0de91c98db5c6378ed2947ff46a45,2022-07-29 05:32:01,da-woods,"Reallow capture of memoryview arguments (GH-4929)

It was actually OK in def functions. It only looks very dodgy:
```
__Pyx_XDEC_MEMVIEW(closure->arg)
```
This gets called twice and `INC` gets called once. However this is
actually OK since XDEC really means ""clear""

Fixes https://github.com/cython/cython/issues/4798
for 0.29.x (completely I think)","['Cython/Compiler/Nodes.py', 'tests/memoryview/memslice.pyx']"
67c44be9dd01a7a5bdde8df928f0cd4139570e0e,2022-07-28 21:10:59,da-woods,"Fix error where ""import *"" tried to overwrite a macro in utility code (GH-4930)

Closes https://github.com/cython/cython/issues/4927","['Cython/Utility/MemoryView.pyx', 'Cython/Utility/MemoryView_C.c', 'tests/memoryview/memslice.pyx']"
a0f63cd4f9318ed65767ea8a6b81cb6f24edf516,2022-07-27 18:41:10,Stefan Behnel,Add manylinux_2_28 wheel builds.,"['.github/workflows/wheel-manylinux.yml', 'Makefile']"
64701f6e89ab04d2253c3dea38d8ab1cc008e35d,2022-07-28 05:58:59,0dminnimda,"Add GitHub Actions build jobs for Windows (GH-4324)

There are still test failures, but at least it allows us to see the test results in GHA.","['.github/workflows/ci.yml', '.gitignore', 'Tools/ci-run.sh', 'runtests.py', 'test-requirements-27.txt', 'test-requirements-34.txt', 'tests/windows_bugs_39.txt']"
e9d5959e1d760d61462bd24477c5fbb457f4212a,2022-07-27 15:31:37,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
1f71962268c7fa4d0361b38b172e7376fa904a61,2022-07-27 15:30:16,Stefan Behnel,Fix release date.,['CHANGES.rst']
2d7fe9fc40461f9fea845b6ff331c537ecc734cd,2022-07-27 15:22:50,Stefan Behnel,Merge branch '0.29.x',[]
29c9e92b3333561b217dc4b96c5a3281c82ae686,2022-07-27 15:07:25,Stefan Behnel,Prepare release of 0.29.31.,['CHANGES.rst']
b6cb192f29da5af63f252c4f831a0b71f73ac1da,2022-07-27 15:07:25,Stefan Behnel,Prepare release of 0.29.31.,"['CHANGES.rst', 'Cython/Shadow.py']"
7d59ffaebe08914681067458d8e5c5288e13fe4d,2022-07-27 15:05:44,da-woods,[docs] Fix typo in embedded.pyx,['docs/examples/tutorial/embedding/embedded.pyx']
6cede008009c6a5bf5c1414591ca79ec62f56256,2022-07-27 14:59:02,h-vetinari,"[0.29] Add --module-name argument to cython command (GH-4906)

Backport of https://github.com/cython/cython/pull/4548

It can be useful to specify the module name for the output file
directly, rather than working it out from the enclosing file tree -
particularly for out of tree build systems, like Meson.

See background in
https://github.com/rgommers/scipy/issues/31#issuecomment-1002662816","['Cython/Compiler/CmdLine.py', 'Cython/Compiler/Main.py', 'Cython/Compiler/Tests/TestCmdLine.py', 'tests/compile/module_name_arg.srctree']"
8927290a39c4af76332767c1b16f5878001d7b3d,2022-07-27 09:25:57,Stefan Behnel,Merge branch '0.29.x',[]
34ce43c8f3dafda734d59345731a61b8200c3b94,2022-07-27 09:08:36,Stefan Behnel,Update changelog.,['CHANGES.rst']
72848313d8b8f06c14ae171e66d6f09f5312c325,2022-07-27 09:19:35,da-woods,"Backport ""noexcept"" function modifier to Cython 0.29.x (GH-4903)

As a no-op, but it parses fine.

Also add some basic compile tests, and some brief documentation.","['Cython/Compiler/Parsing.py', 'docs/src/userguide/language_basics.rst', 'tests/compile/excvaldecl.pyx']"
ec188212755a0eef555cc282094831b37fc9be6d,2022-07-27 09:15:04,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
4b1f45dd5a6a3a95f3b63b50a6a06e0c14334ee3,2022-07-27 09:08:36,Stefan Behnel,Update changelog.,['CHANGES.rst']
206110c629aa4594ef6fb3f5c6ff1795c957d55d,2022-07-26 21:53:22,Stefan Behnel,Merge branch '0.29.x',"['Cython/Utility/MemoryView.pyx', 'Cython/Utility/MemoryView_C.c', 'Cython/Utility/ModuleSetupCode.c', 'tests/compile/buildenv.pyx', 'tests/compile/fused_redeclare_T3111.pyx']"
3de4be40a1642ffeec18d783cde9d285622b24ce,2022-07-26 21:43:15,Sam Gross,"[0.29] Add configuration for the ""nogil"" CPython fork (GH-4912) (GH-4914)","['Cython/Utility/ModuleSetupCode.c', 'tests/compile/buildenv.pyx']"
f1748bb86bf7edb731728ac366e129c1be9bcb61,2022-07-26 21:39:52,Sam Gross,"[0.29] Use atomic reference counting in MemoryView in more cases (GH-4912) (GH-4915)

This fixes a few issues in MemoryView_C.c to allow atomic reference
counting to be used in more cases.

 - Enable GNU atomics for `__GNUC__` >= 5. Previously, GCC 5.0, 6.0, X.0
   versions used lock-based reference counting due to an incorrect preprocessor check.

 - Typo in `__GNUC_PATCHLEVEL__` macro (missing underscores)

 - Enable atomics in MSVC and fix returned values. InterlockedExchangeAdd
   returns the *initial* value (like __sync_fetch_and_add).
   InterlockedIncrement returned the *resulting* value (post increment),
   which would have been incorrect if MSVC atomics had been enabled.

Also avoids allocating a lock in MemoryView when atomics are available,
which additionally fixes a thread-safety issue in the ""nogil"" CPython fork.

* Use _InterlockedExchangeAdd intrinsic

The InterlockedExchangeSubtract function isn't available in older
versions of MSVC, while InterlockedExchangeAdd is available since
Windows XP.

The intrinsic variant (with the underscore prefix) avoids needing to
include the entire Windows.h header.

* Only use MSVC atomics when compiling for the ""nogil"" CPython fork
  to prevent potential breakage of existing Windows setups.","['Cython/Utility/MemoryView.pyx', 'Cython/Utility/MemoryView_C.c', 'tests/compile/fused_redeclare_T3111.pyx']"
3f9fa1a46b90b9763b84ea5ec4319fdb5eba55f0,2022-07-26 14:02:32,da-woods,"Remove unused function ""looking_at_call"" from parser (GH-4922)","['Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py']"
ea38521bf59edef9e6d22cbabf44229848091a76,2022-07-26 08:45:53,Max Bachmann,Add missing unicode C-APIs (GH-4910),['Cython/Includes/cpython/unicode.pxd']
5f531332a89016c78814b9eb972086a1eb0ec3f9,2022-07-25 13:26:02,da-woods,Merge branch '0.29.x',['.github/workflows/ci.yml']
d5835270a42fcedd19805c135fbb8afdd873c362,2022-07-25 13:23:27,da-woods,"Update macos version for github actions (#4917)

See https://github.com/cython/cython/issues/4913",['.github/workflows/ci.yml']
64b1cb116a223f48a08edd97bbd7c63188cb0b0b,2022-07-20 18:33:20,Stefan Behnel,Merge branch '0.29.x',"['Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Tests/TestParseTreeTransforms.py']"
3cb3c2fd3a1359c46c81675610f7458ac6dcf223,2022-07-20 18:26:50,Stefan Behnel,Minor code cleanups after 3a373e2ccdddc79202d9ed13edc85d4b95616b26.,['Cython/Compiler/ParseTreeTransforms.py']
3a373e2ccdddc79202d9ed13edc85d4b95616b26,2022-07-20 16:19:44,Stefan Behnel,"Make pickle checksum calculation succeed even if one of the hash algorithms is blocked at runtime.
Also, pass ""usedforsecurity=False"" in Py3.9+ to unblock MD5 also on some security constrained systems (FIPS).

Closes https://github.com/cython/cython/issues/4909","['Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Tests/TestParseTreeTransforms.py']"
87329f1f9747a5a7e483cf4827d40457f6354c7c,2022-07-20 08:36:10,da-woods,Remove unhelpful comment in test,['tests/run/special_methods_T561.pyx']
15819719f4ae804df92cf58bbb744ccd079e04e4,2022-07-20 08:11:15,da-woods,"Improve test coverage of special methods with type conversions (#4900)

https://github.com/cython/cython/issues/4163

```
if old_type.is_pyobject:
    if arg.default:  # 4325 ↛ 4326
        code.putln(""if (%s) {"" % arg.hdr_cname)
    else:
        code.putln(""assert(%s); {"" % arg.hdr_cname)
        self.generate_arg_conversion_from_pyobject(arg, code)
        code.putln(""}"")
    elif new_type.is_pyobject:  # 4331 ↛ 4334
        self.generate_arg_conversion_to_pyobject(arg, code)
    else:
        if new_type.assignable_from(old_type):
            code.putln(""%s = %s;"" % (arg.entry.cname, arg.hdr_cname))
        else:
            error(arg.pos, ""Cannot convert 1 argument from '%s' to '%s'"" % (old_type, new_type))
```

It doesn't cover the arg.default case (since I don't think any
of these methods accept a default argument, or the failed conversion
case. But does cover the pyobject->C, C->pyobject and C->C cases",['tests/run/special_methods_T561.pyx']
c01c6d508339587935ef4c101663dd2803c70e9e,2022-07-19 06:53:22,Matthew Brett,"Add --module-name argument to cython command (GH-4548)

It can be useful to specify the module name for the output file
directly, rather than working it out from the enclosing file tree -
particularly for out of tree build systems, like Meson.

See background in
https://github.com/rgommers/scipy/issues/31#issuecomment-1002662816","['Cython/Compiler/CmdLine.py', 'Cython/Compiler/Main.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/Tests/TestCmdLine.py', 'tests/compile/module_name_arg.srctree']"
b190c217899638f9d18da2a92cdda6c67d547c14,2022-07-18 16:23:25,Stefan Behnel,"On test failures, list the directory structure in end-to-end tests to aid in remote debugging.",['runtests.py']
4d626caa314c8d6de741185e3ec11199effb8f22,2022-07-17 17:46:02,Ewout ter Hoeven,"CI: Remove ""allow_failures"" for Python 3.11 to make sure we notice failures during the release phases (GH-4780)",['.github/workflows/ci.yml']
344389e9be01a34b0d8a79260396c791b1183f69,2022-07-17 17:54:15,Matti Picus,pyximport: 'cd' into common dir to prevent too-long filenames (mostly for windows) (GH-4630),"['pyximport/_pyximport2.py', 'pyximport/_pyximport3.py']"
1b284442bb9f9ea59dddf069c63c3cc042cd9696,2022-07-17 17:46:02,Ewout ter Hoeven,"CI: Remove ""allow_failures"" for Python 3.11 to make sure we notice failures during the release phases (GH-4780)",['.github/workflows/ci.yml']
ef0e7a2ebfae6a32eaf9da5d935750250b8573f5,2022-07-17 09:56:44,Stefan Behnel,Fix parser functions declarations.,['Cython/Compiler/Parsing.pxd']
20cb27bf1ca1f3b2b45ef4f59fabfc64acb29cf6,2022-07-17 09:51:11,da-woods,"Account for possible extension type struct padding when calculating the itemsize for the ""size changed"" check (GH-4894)","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ImportExport.c']"
c65db31e2cf22807891bdd52ccc298c6145b3bef,2022-07-17 08:58:41,Stefan Behnel,Add missing .pxd declarations for new parser functions.,['Cython/Compiler/Parsing.pxd']
1103ae152923dd0337fde30a031817290b60fba0,2022-07-17 08:57:19,Stefan Behnel,"Refactor ""with"" parsing code to reduce code duplication.",['Cython/Compiler/Parsing.py']
9c6140b373334e9fa661582ccd1ffd816f1b622c,2022-07-17 08:41:10,da-woods,"Enable parenthesized context managers (GH-4814)

As described in https://docs.python.org/3/whatsnew/3.10.html#parenthesized-context-managers

The approach to parsing is largely copied from the CPython parser
(with comments to support it) - closer to the PEG approach of
""try the bracketed case first, and let it fail silently then try the unbracketed case"".","['Cython/Compiler/Parsing.py', 'tests/run/test_grammar.py']"
0b4370678e5b00a020cd990f922964d3aba59884,2022-07-16 20:14:48,Stefan Behnel,Reduce overhead in the code writer when writing out simple code without newlines.,"['Cython/Compiler/Code.pxd', 'Cython/Compiler/Code.py']"
1777f13461f971d064bd1644b02d92b350e6e7d1,2022-07-16 15:36:45,da-woods,"Make it easier to restore scanner state during parsing phase (GH-4813)

Things like match-case (essentially anything that uses Python's
new PEG parser capacities) are going to have to be implemented
by trying to parse something, failing, then going back and trying
to parse something else. This commit gets the initial work done
to make this easier to do.

Several error positions change in this effort, but this seems to improve the error reporting overall.","['Cython/Compiler/Errors.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/Scanning.pxd', 'Cython/Compiler/Scanning.py', 'Cython/Compiler/Tests/TestScanning.py', 'Cython/Plex/Scanners.pxd', 'Cython/Plex/Scanners.py', 'tests/errors/cpp_object_template.pyx', 'tests/errors/cppexc_non_extern.pyx', 'tests/errors/e_argdefault.pyx', 'tests/errors/e_bufaccess.pyx', 'tests/errors/e_cpp_only_features.pyx', 'tests/errors/e_cstruct.pyx', 'tests/errors/e_public_cdef_private_types.pyx', 'tests/errors/e_typing_errors.pyx', 'tests/errors/fused_types.pyx', 'tests/memoryview/error_declarations.pyx']"
3de56e25789de3576b5d4e7ff9bb99efea35bdf6,2022-07-16 15:32:28,da-woods,"Make memoryviewslice and cython.array be collections.abc.Sequence (GH-4817)

The main reason to do this is so that they'll work in sequence patterns in structural pattern matching in Python 3.10+.
Since the builtin ""memoryview"" type and ""array.array"" are sequences, I think this is reasonable.","['Cython/Utility/MemoryView.pyx', 'tests/compile/fused_redeclare_T3111.pyx', 'tests/memoryview/cythonarray.pyx', 'tests/memoryview/memoryview.pyx']"
f236f652c5e9efc2beefb7bb696654fdd6ca30b8,2022-07-16 15:27:45,da-woods,"Refactor parsing of named expressions to bring it closer to CPython's LL parser (GH-4846)

I've tried to rewrite it to largely follow the rules from the most
recent version of the Python LL parser, so avoiding conditional parameters.

See https://github.com/cython/cython/issues/4595","['Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py']"
6414a07ec88b60d604daf0e51fd850ee974afdcb,2022-07-16 08:47:05,Stefan Behnel,"Extend test to make sure that cython.declare(int) interprets ""int"" as C int and not Python int.",['tests/run/pure_py.py']
a2e4139993df6bd52a5f3db670dc1ca55fdedc9e,2022-07-16 08:34:11,da-woods,"Give better errors on size changes of PyVarObjects and reduce false positives (GH-4869)

Fixes https://github.com/cython/cython/issues/4827

Some of the patch was copied from https://src.fedoraproject.org/rpms/Cython/pull-request/35#request_diff

Allows the size of a type to be between basicsize and basicsize+itemsize
since anything is this range is a reasonable size for a class to be, subject to
implementations details of the object struct.

Adds an explicit runtime test when an extern extension type is inherited from
to make sure that it isn't a PyVarObject of unexpected size.","['Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/ImportExport.c', 'runtests.py', 'tests/errors/builtin_type_inheritance.pyx', 'tests/pypy_bugs.txt', 'tests/run/builtin_type_inheritance_T608.pyx', 'tests/run/builtin_type_inheritance_T608_py2only.pyx', 'tests/run/extern_varobject_extensions.srctree']"
5c6120f38b280f56bb0381bc9500438e41b86094,2022-07-16 08:27:58,Stefan Behnel,Merge branch '0.29.x',[]
2f1c338ac4e7333823be84cc0d8df80acc5e23f3,2022-07-16 08:25:26,da-woods,"Fixed over-zealous optimization of append attribute usage to ""__Pyx_PyObject_Append"" (GH-4834)

Fixes https://github.com/cython/cython/issues/4828","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'tests/run/append.pyx']"
c5e6c183436d7477d15fd1e02c6cd9144bb74708,2022-07-16 08:25:26,da-woods,"Fixed over-zealous optimization of append attribute usage to ""__Pyx_PyObject_Append"" (GH-4834)

Fixes https://github.com/cython/cython/issues/4828","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'tests/run/append.pyx']"
905fd831dd8ec6a674076cf2d1559e38887c1547,2022-07-16 06:19:12,da-woods,"Avoid conflict between propery names and function variables (GH-4845)

Fixes https://github.com/cython/cython/issues/4836

Bug introduced by https://github.com/cython/cython/commit/8c7b0f3fb745aa7bd0afedfbeb862eecc5fdff0c","['Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Visitor.py', 'tests/run/decorators.pyx']"
18fa11463bebda11eaabc2fe02287fcd9569f7e2,2022-07-13 11:21:05,Stefan Behnel,Merge branch '0.29.x',[]
565f176f23dd91287d51cd44883af62fa0aaafa0,2022-07-06 19:47:04,da-woods,"Add tests for NULL objects in memoryviews (GH-4871)

Follow up on https://github.com/cython/cython/pull/4859 by adding tests for memoryviews too.

Additional refactoring to avoid invalid decref calls on test failures. Instead, the item is safely cleared directly before the access.","['tests/buffers/bufaccess.pyx', 'tests/memoryview/memslice.pyx']"
c8df6a37318770ade07645c40e7751b5907348a8,2022-07-13 11:09:14,Stefan Behnel,Update changelog.,['CHANGES.rst']
f298b6af61a0ab5e8e0b53907ea5080529dd98e4,2022-07-13 10:21:24,da-woods,"Avoid raising StopIteration in ""__next__"" if possible  (GH-4844)

Fixes https://github.com/cython/cython/issues/3447","['Cython/Compiler/Code.pxd', 'Cython/Compiler/Code.py', 'Cython/Compiler/FlowControl.pxd', 'Cython/Compiler/FlowControl.py', 'Cython/Compiler/Naming.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Symtab.py', 'tests/run/funcexc_iter_T228.pyx']"
858b1a5ad2237cb439965450c221a15dfedd1295,2022-07-13 10:18:14,da-woods,"Disable co_varnames identity check on Python 3.11 (GH-4850)

CPython 3.11 no longer stores the varnames tuple. Instead, it stores it
as part of a larger list of names and calculates it dynamically on request.",['tests/run/tuple_constants.pyx']
e4ef0c1e807aab8c20fb08b638550c912c166be3,2022-07-12 18:00:58,da-woods,"Error on memoryview argument capture on 0.29.x (GH-4849)

I don't believe it's easy to fix
https://github.com/cython/cython/issues/4798 on 0.29.x Therefore,
generate an error message that explains two possible workarounds.

This at least makes sure that people don't end up with mysterious crashes.","['Cython/Compiler/Nodes.py', 'tests/memoryview/memslice.pyx']"
f04d53bc5a372a02266a92a27c1d041d1e02b6b8,2022-07-12 17:39:47,da-woods,Add a note about cythonize in the quickstart documentation (GH-4879),['docs/src/quickstart/build.rst']
b404a3f3b82f296931730470411a68fec7d6f40f,2022-07-12 14:54:21,da-woods,"Allow setting ""annotation_typing"" directive more locally (GH-4886)

To make it easier to handle cases where Cython's interpretation
differs from the user's interpretation.

Also improve the documentation about this.","['Cython/Compiler/Options.py', 'docs/src/userguide/migrating_to_cy30.rst', 'docs/src/userguide/source_files_and_compilation.rst', 'tests/run/annotation_typing.pyx']"
31d40c8c62acef9509675155fe5b5bb8e48dba5a,2022-07-11 05:45:17,scoder,"Fix annotation type analysis for Python ""typing"" types (GH-4606)

* Check for ""Optional[ctype]"" earlier because we need to make sure that ""Optional[int]"" etc. interprets ""int"" as (valid) Python int type and not (invalid) C int type.

See https://github.com/cython/cython/issues/3883

* Fix typing assumptions in PEP 526 variable annotations test: in a Python type annotation, ""int"" means Python int and ""float"" means Python float, not the C types.

* Use a context manager to make it explicit in annotation type analysis when C types are allowed, and when Python types are required or expected.

* Generalise the concept of equivalent Python and C types for more efficient type inference: PyFloat/double, PyBool/bint, PyComplex/double complex.

* Refactor analyse_type_annotation() to prepare the extraction of type modifiers (as opposed to special types).

See discussion in https://github.com/cython/cython/pull/4606#issuecomment-1026658869

* Refactor handling of ""typing.Optional"", ""dataclasses.InitVar"" etc. annotations to move them into the declared Entry during type analysis and keep only the bare type in the type system.

* Force ClassVar[...] types to be object types.

* Add a warning when users define a ClassVar[] with a non-Python type.

See https://github.com/cython/cython/pull/4606#discussion_r805170982

* Provide a helpful warning when users write plain C types in a non-C annotation context.

* Only consider Python object item types from list/tuple as self.type in IndexNode since that will be the result of the index access. Coercion needs to happen externally, then based on the type inference.

* Ignore Python annotation type ""long"" since it almost certainly does not refer to PyLong but to C long. Issue a warning to make users aware of it.

* Fix PEP-526 test by working around incomplete type inference, but leave FIXME comments.","['Cython/Compiler/Builtin.py', 'Cython/Compiler/Dataclass.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'docs/examples/userguide/extension_types/dataclass.pyx', 'tests/errors/dataclass_e1.pyx', 'tests/errors/dataclass_e5.pyx', 'tests/errors/e_typing_errors.pyx', 'tests/errors/e_typing_optional.py', 'tests/run/annotation_typing.pyx', 'tests/run/cdef_class_dataclass.pyx', 'tests/run/cdef_setitem_T284.pyx', 'tests/run/delete.pyx', 'tests/run/pep526_variable_annotations.py', 'tests/run/pep526_variable_annotations_cy.pyx', 'tests/run/pure_cdef_class_dataclass.py']"
a44bbd363029aa9ba16fefcb485c68162f8ab663,2022-07-07 12:42:55,Matus Valo,Docs: migrate extension_types.rst to pure python (GH-4516),"['docs/examples/userguide/extension_types/cheesy.py', 'docs/examples/userguide/extension_types/cheesy.pyx', 'docs/examples/userguide/extension_types/dataclass.py', 'docs/examples/userguide/extension_types/dataclass.pyx', 'docs/examples/userguide/extension_types/dict_animal.py', 'docs/examples/userguide/extension_types/dict_animal.pyx', 'docs/examples/userguide/extension_types/extendable_animal.py', 'docs/examples/userguide/extension_types/extendable_animal.pyx', 'docs/examples/userguide/extension_types/owned_pointer.py', 'docs/examples/userguide/extension_types/owned_pointer.pyx', 'docs/examples/userguide/extension_types/penguin.py', 'docs/examples/userguide/extension_types/penguin.pyx', 'docs/examples/userguide/extension_types/penguin2.py', 'docs/examples/userguide/extension_types/penguin2.pyx', 'docs/examples/userguide/extension_types/pets.py', 'docs/examples/userguide/extension_types/pets.pyx', 'docs/examples/userguide/extension_types/python_access.py', 'docs/examples/userguide/extension_types/python_access.pyx', 'docs/examples/userguide/extension_types/shrubbery.py', 'docs/examples/userguide/extension_types/shrubbery.pyx', 'docs/examples/userguide/extension_types/shrubbery_2.py', 'docs/examples/userguide/extension_types/shrubbery_2.pyx', 'docs/examples/userguide/extension_types/widen_shrubbery.py', 'docs/examples/userguide/extension_types/widen_shrubbery.pyx', 'docs/examples/userguide/extension_types/wrapper_class.py', 'docs/examples/userguide/extension_types/wrapper_class.pyx', 'docs/src/userguide/extension_types.rst']"
796fd06da1fa1d5481ce43a6b6c901bc87f0ce9a,2022-07-06 19:49:32,da-woods,"Fix mistake in docs error return values (GH-4876)

Fixes https://github.com/cython/cython/issues/4875",['docs/src/userguide/language_basics.rst']
22f4444a1722fe0fd3f9157f1db35ab1c02522a9,2022-07-06 19:47:04,da-woods,"Add tests for NULL objects in memoryviews (GH-4871)

Follow up on https://github.com/cython/cython/pull/4859 by adding tests for memoryviews too.

Additional refactoring to avoid invalid decref calls on test failures. Instead, the item is safely cleared directly before the access.","['tests/buffers/bufaccess.pyx', 'tests/memoryview/memslice.pyx']"
24f10066335332d9ff4680e6bf6f7550f67097da,2022-07-04 20:44:49,da-woods,"Don't add multiple ""CoerceToBooleanNode"" layers (GH-4847)",['Cython/Compiler/ExprNodes.py']
76b22ac750531919194c4334150dea4c51d67f44,2022-07-04 20:37:55,da-woods,"Add note that embedding does not produce a portable application (GH-4863)

Try to make it clear that using cython --embed doesn't embed any external dependencies.","['docs/src/tutorial/embedding.rst', 'docs/src/userguide/external_C_code.rst']"
77a51ab6965a892512ecdd83cd54023e531c9e9c,2022-07-04 20:35:52,da-woods,"Avoid NULL dereference in __Pyx_KwValues_FASTCALL (GH-4872)

Simpler follow up to https://github.com/cython/cython/pull/4726.
I don't think we need to be worried null args and non-zero nargs,
but null args and 0 nargs is quite common and valid I think.

This PR just avoids a dereference in that case (which is probably dubious).",['Cython/Utility/FunctionArguments.c']
f80d32583c4f6db5050ce48408415e7a55acaf02,2022-07-04 19:51:42,0dminnimda,Reject invalid spellings of Ellipsis (GH-4868),"['Cython/Compiler/Lexicon.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/Tests/TestGrammar.py', 'tests/compile/fromimport.pyx', 'tests/compile/fromimport_star.pyx', 'tests/errors/incomplete_varadic.pyx']"
4cae7d6c3aef4f83a083f0083d22cd42c373d1fa,2022-07-04 19:47:18,Matus Valo,"Port pyximport to the importlib machinery (GH-4625)

Closes https://github.com/cython/cython/issues/4560","['pyximport/_pyximport2.py', 'pyximport/_pyximport3.py', 'pyximport/pyximport.py']"
4189c759ce468b74f35cfce3cfdba9aa8b4992e3,2022-07-03 11:08:40,Kirill Smelkov,"includes/cpython: Fix newfunc to use PyObject* for args/kwargs instead of object (#4823)

object means the argument is always non-NULL valid Python object, while
PyObject* argument can be generally NULL. If the argument is indeed
passed as NULL, and we declare it as object, generated code will crash
while trying to incref it.

Quoting https://github.com/cython/cython/issues/4822:

    object.pxd currently declares `newfunc` as follows:

    ```pyx
    ctypedef object (*newfunc)(cpython.type.type, object, object)  # (type, args, kwargs)
    ```

    which implies that `args` and `kwargs` are always live objects and cannot be NULL.

    However Python can, and does, call tp_new with either args=NULL, or kwargs=NULL or both. And in such cases this leads to segfault in automatically-generated __Pyx_INCREF for args or kw.

    The fix is to change `object` to `PyObject*` for both args and kwargs.

    Please see below for details:

    ```cython
    # cython: language_level=3
    from cpython cimport newfunc, type as cpytype, Py_TYPE

    cdef class X:
        cdef int i
        def __init__(self, i):
            self.i = i
        def __repr__(self):
            return 'X(%d)' % self.i

    cdef newfunc _orig_tp_new = Py_TYPE(X(0)).tp_new

    cdef object _trace_tp_new(cpytype cls, object args, object kw):
        print('_trace_tp_new', cls, args, kw)
        return _orig_tp_new(cls, args, kw)

    Py_TYPE(X(0)).tp_new = _trace_tp_new

    x = X(123)
    print(x)
    ```

    ```console
    (neo) (py3.venv) (g.env) kirr@deca:~/src/tools/go/pygolang$ cythonize -i x.pyx
    Compiling /home/kirr/src/tools/go/pygolang/x.pyx because it changed.
    [1/1] Cythonizing /home/kirr/src/tools/go/pygolang/x.pyx
    running build_ext
    building 'x' extension
    ...
    x86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -ffile-prefix-map=/build/python3.9-RNBry6/python3.9-3.9.2=. -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -ffile-prefix-map=/build/python3.9-RNBry6/python3.9-3.9.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/home/kirr/src/wendelin/venv/py3.venv/include -I/usr/include/python3.9 -c /home/kirr/src/tools/go/pygolang/x.c -o /home/kirr/src/tools/go/pygolang/tmpqkz1r96s/home/kirr/src/tools/go/pygolang/x.o
    x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fwrapv -O2 -Wl,-z,relro -g -fwrapv -O2 -g -ffile-prefix-map=/build/python3.9-RNBry6/python3.9-3.9.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /home/kirr/src/tools/go/pygolang/tmpqkz1r96s/home/kirr/src/tools/go/pygolang/x.o -o /home/kirr/src/tools/go/pygolang/x.cpython-39-x86_64-linux-gnu.so
    ```

    ```console
    (neo) (py3.venv) (g.env) kirr@deca:~/src/tools/go/pygolang$ python -c 'import x'
    Ошибка сегментирования (стек памяти сброшен на диск)
    ```

    ```console
    (neo) (py3.venv) (g.env) kirr@deca:~/src/tools/go/pygolang$ gdb python core
    ...
    Reading symbols from python...
    Reading symbols from /usr/lib/debug/.build-id/f9/02f8a561c3abdb9c8d8c859d4243bd8c3f928f.debug...
    [New LWP 218557]
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
    Core was generated by `python -c import x'.
    Program terminated with signal SIGSEGV, Segmentation fault.
    #0  _Py_INCREF (op=0x0) at /usr/include/python3.9/object.h:408
    408         op->ob_refcnt++;

    (gdb) bt 5
    #0  _Py_INCREF (op=0x0) at /usr/include/python3.9/object.h:408
    #1  __pyx_f_1x__trace_tp_new (__pyx_v_cls=0x7f5ce75e6880 <__pyx_type_1x_X>, __pyx_v_args=(123,), __pyx_v_kw=0x0) at /home/kirr/src/tools/go/pygolang/x.c:1986
    #2  0x000000000051dd7e in type_call (type=type@entry=0x7f5ce75e6880 <__pyx_type_1x_X>, args=args@entry=(123,), kwds=kwds@entry=0x0)
        at ../Objects/typeobject.c:1014
    #3  0x00007f5ce75df8d4 in __Pyx_PyObject_Call (func=<type at remote 0x7f5ce75e6880>, arg=(123,), kw=0x0) at /home/kirr/src/tools/go/pygolang/x.c:3414
    #4  0x00007f5ce75df276 in __pyx_pymod_exec_x (__pyx_pyinit_module=<optimized out>) at /home/kirr/src/tools/go/pygolang/x.c:3017
    (More stack frames follow...)

    (gdb) f 1
    #1  __pyx_f_1x__trace_tp_new (__pyx_v_cls=0x7f5ce75e6880 <__pyx_type_1x_X>, __pyx_v_args=(123,), __pyx_v_kw=0x0) at /home/kirr/src/tools/go/pygolang/x.c:1986
    1986      __Pyx_INCREF(__pyx_v_kw);
    ```

-> Change newfunc signature to use PyObject* instead of object to fix it.

With this fix, and test example updates to account for object -> PyObject* change as follows ...

    --- a/x.pyx.kirr
    +++ b/x.pyx
    @@ -1,5 +1,5 @@
     # cython: language_level=3
    -from cpython cimport newfunc, type as cpytype, Py_TYPE
    +from cpython cimport newfunc, type as cpytype, Py_TYPE, PyObject

     cdef class X:
         cdef int i
    @@ -10,8 +10,12 @@ cdef class X:

     cdef newfunc _orig_tp_new = Py_TYPE(X(0)).tp_new

    -cdef object _trace_tp_new(cpytype cls, object args, object kw):
    -    print('_trace_tp_new', cls, args, kw)
    +cdef object xobject(PyObject* x):
    +    return ""null""  if x == NULL  else \
    +           <object>x
    +
    +cdef object _trace_tp_new(cpytype cls, PyObject* args, PyObject* kw):
    +    print('_trace_tp_new', cls, xobject(args), xobject(kw))
         return _orig_tp_new(cls, args, kw)

     Py_TYPE(X(0)).tp_new = _trace_tp_new

... it works as expected without crashing:

    $ python -c 'import x'
    _trace_tp_new <type 'x.X'> (123,) null
    X(123)

Fixes: https://github.com/cython/cython/issues/4822",['Cython/Includes/cpython/object.pxd']
21a951f9d8e91ce9a6700ef9803dc4a6f74bcd4a,2022-07-04 08:29:07,Stefan Behnel,Merge branch '0.29.x',[]
c769c3295dec09fbbb607f249224ce385591dbcc,2022-07-04 08:28:15,Stefan Behnel,"Revert ""includes/cpython: Fix newfunc to use PyObject* for args/kwargs instead of object (#4823)""

This reverts commit 7c7890348625871e6442b4b1bbd6e3e0e7c38e73.",['Cython/Includes/cpython/object.pxd']
7c7890348625871e6442b4b1bbd6e3e0e7c38e73,2022-07-03 11:08:40,Kirill Smelkov,"includes/cpython: Fix newfunc to use PyObject* for args/kwargs instead of object (#4823)

object means the argument is always non-NULL valid Python object, while
PyObject* argument can be generally NULL. If the argument is indeed
passed as NULL, and we declare it as object, generated code will crash
while trying to incref it.

Quoting https://github.com/cython/cython/issues/4822:

    object.pxd currently declares `newfunc` as follows:

    ```pyx
    ctypedef object (*newfunc)(cpython.type.type, object, object)  # (type, args, kwargs)
    ```

    which implies that `args` and `kwargs` are always live objects and cannot be NULL.

    However Python can, and does, call tp_new with either args=NULL, or kwargs=NULL or both. And in such cases this leads to segfault in automatically-generated __Pyx_INCREF for args or kw.

    The fix is to change `object` to `PyObject*` for both args and kwargs.

    Please see below for details:

    ```cython
    # cython: language_level=3
    from cpython cimport newfunc, type as cpytype, Py_TYPE

    cdef class X:
        cdef int i
        def __init__(self, i):
            self.i = i
        def __repr__(self):
            return 'X(%d)' % self.i

    cdef newfunc _orig_tp_new = Py_TYPE(X(0)).tp_new

    cdef object _trace_tp_new(cpytype cls, object args, object kw):
        print('_trace_tp_new', cls, args, kw)
        return _orig_tp_new(cls, args, kw)

    Py_TYPE(X(0)).tp_new = _trace_tp_new

    x = X(123)
    print(x)
    ```

    ```console
    (neo) (py3.venv) (g.env) kirr@deca:~/src/tools/go/pygolang$ cythonize -i x.pyx
    Compiling /home/kirr/src/tools/go/pygolang/x.pyx because it changed.
    [1/1] Cythonizing /home/kirr/src/tools/go/pygolang/x.pyx
    running build_ext
    building 'x' extension
    ...
    x86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -ffile-prefix-map=/build/python3.9-RNBry6/python3.9-3.9.2=. -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -ffile-prefix-map=/build/python3.9-RNBry6/python3.9-3.9.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/home/kirr/src/wendelin/venv/py3.venv/include -I/usr/include/python3.9 -c /home/kirr/src/tools/go/pygolang/x.c -o /home/kirr/src/tools/go/pygolang/tmpqkz1r96s/home/kirr/src/tools/go/pygolang/x.o
    x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fwrapv -O2 -Wl,-z,relro -g -fwrapv -O2 -g -ffile-prefix-map=/build/python3.9-RNBry6/python3.9-3.9.2=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /home/kirr/src/tools/go/pygolang/tmpqkz1r96s/home/kirr/src/tools/go/pygolang/x.o -o /home/kirr/src/tools/go/pygolang/x.cpython-39-x86_64-linux-gnu.so
    ```

    ```console
    (neo) (py3.venv) (g.env) kirr@deca:~/src/tools/go/pygolang$ python -c 'import x'
    Ошибка сегментирования (стек памяти сброшен на диск)
    ```

    ```console
    (neo) (py3.venv) (g.env) kirr@deca:~/src/tools/go/pygolang$ gdb python core
    ...
    Reading symbols from python...
    Reading symbols from /usr/lib/debug/.build-id/f9/02f8a561c3abdb9c8d8c859d4243bd8c3f928f.debug...
    [New LWP 218557]
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
    Core was generated by `python -c import x'.
    Program terminated with signal SIGSEGV, Segmentation fault.
    #0  _Py_INCREF (op=0x0) at /usr/include/python3.9/object.h:408
    408         op->ob_refcnt++;

    (gdb) bt 5
    #0  _Py_INCREF (op=0x0) at /usr/include/python3.9/object.h:408
    #1  __pyx_f_1x__trace_tp_new (__pyx_v_cls=0x7f5ce75e6880 <__pyx_type_1x_X>, __pyx_v_args=(123,), __pyx_v_kw=0x0) at /home/kirr/src/tools/go/pygolang/x.c:1986
    #2  0x000000000051dd7e in type_call (type=type@entry=0x7f5ce75e6880 <__pyx_type_1x_X>, args=args@entry=(123,), kwds=kwds@entry=0x0)
        at ../Objects/typeobject.c:1014
    #3  0x00007f5ce75df8d4 in __Pyx_PyObject_Call (func=<type at remote 0x7f5ce75e6880>, arg=(123,), kw=0x0) at /home/kirr/src/tools/go/pygolang/x.c:3414
    #4  0x00007f5ce75df276 in __pyx_pymod_exec_x (__pyx_pyinit_module=<optimized out>) at /home/kirr/src/tools/go/pygolang/x.c:3017
    (More stack frames follow...)

    (gdb) f 1
    #1  __pyx_f_1x__trace_tp_new (__pyx_v_cls=0x7f5ce75e6880 <__pyx_type_1x_X>, __pyx_v_args=(123,), __pyx_v_kw=0x0) at /home/kirr/src/tools/go/pygolang/x.c:1986
    1986      __Pyx_INCREF(__pyx_v_kw);
    ```

-> Change newfunc signature to use PyObject* instead of object to fix it.

With this fix, and test example updates to account for object -> PyObject* change as follows ...

    --- a/x.pyx.kirr
    +++ b/x.pyx
    @@ -1,5 +1,5 @@
     # cython: language_level=3
    -from cpython cimport newfunc, type as cpytype, Py_TYPE
    +from cpython cimport newfunc, type as cpytype, Py_TYPE, PyObject

     cdef class X:
         cdef int i
    @@ -10,8 +10,12 @@ cdef class X:

     cdef newfunc _orig_tp_new = Py_TYPE(X(0)).tp_new

    -cdef object _trace_tp_new(cpytype cls, object args, object kw):
    -    print('_trace_tp_new', cls, args, kw)
    +cdef object xobject(PyObject* x):
    +    return ""null""  if x == NULL  else \
    +           <object>x
    +
    +cdef object _trace_tp_new(cpytype cls, PyObject* args, PyObject* kw):
    +    print('_trace_tp_new', cls, xobject(args), xobject(kw))
         return _orig_tp_new(cls, args, kw)

     Py_TYPE(X(0)).tp_new = _trace_tp_new

... it works as expected without crashing:

    $ python -c 'import x'
    _trace_tp_new <type 'x.X'> (123,) null
    X(123)

Fixes: https://github.com/cython/cython/issues/4822",['Cython/Includes/cpython/object.pxd']
2734237615aadf9603cae7f45679fde693843822,2022-07-03 10:24:28,da-woods,Merge branch '0.29.x',['tests/run/pep448_extended_unpacking.pyx']
1c0691f7720976a2ee9c471e071b6c8a0341eb7b,2022-07-03 10:23:34,da-woods,"Fix tuple*float test on PyPy

Test added in 5c900c59d03f23f7329d6e68e114e4a277112916

PyPy gives a slightly different error message for the unsupported operation",['tests/run/pep448_extended_unpacking.pyx']
edf38fcf5d57b6ac58be823d31e40f30a8b6f2fd,2022-07-03 09:15:30,da-woods,Update changelog,['CHANGES.rst']
c65b3d412f789f9d2ec9a854dd6829e08c97538f,2022-07-03 08:12:41,da-woods,Merge branch '0.29.x',['CHANGES.rst']
a70b9d3cde2a0f62f0ebf7a8a28f32af5de99e8c,2022-07-03 07:54:23,da-woods,Updated changelog,['CHANGES.rst']
a53fc5ce817c1201d45bf4d623f389d8e68c8110,2022-07-03 07:35:34,da-woods,Merge branch '0.29.x',"['Cython/Compiler/ExprNodes.py', 'tests/run/pep448_extended_unpacking.pyx']"
98cebe4dedb52550ce621cf9338283dd7262ea83,2022-07-03 07:23:31,Sebastian Berg,"BUG: Fortify object buffers against included NULLs (#4859)

* BUG: Fortify object buffers against included NULLs

While NumPy tends to not actively create object buffers initialized
only with NULL (rather than filled with None), at least older versions
of NumPy did do that.  And NumPy guards against this.

This guards against embedded NULLs in object buffers interpreting
a NULL as None (and anticipating a NULL value also when setting
the buffer for reference count purposes).

Closes gh-4858","['Cython/Compiler/ExprNodes.py', 'tests/buffers/bufaccess.pyx']"
eafc920f76e812613b09876bfb9b980651c60f31,2022-07-03 07:23:31,Sebastian Berg,"BUG: Fortify object buffers against included NULLs (#4859)

* BUG: Fortify object buffers against included NULLs

While NumPy tends to not actively create object buffers initialized
only with NULL (rather than filled with None), at least older versions
of NumPy did do that.  And NumPy guards against this.

This guards against embedded NULLs in object buffers interpreting
a NULL as None (and anticipating a NULL value also when setting
the buffer for reference count purposes).

Closes gh-4858","['Cython/Compiler/ExprNodes.py', 'tests/buffers/bufaccess.pyx']"
a79e447ea9faea118f39a94b54d0498baad8ad17,2022-06-29 07:11:55,da-woods,"Move linetracing functions into an ""exec"" to work around an issue in Py3.11 (GH-4851)

Thus fixing linetracing tests in Python 3.11 when the trace function raises an exception.

The issue we were seeing looked to be something to do with functions
defined within doctest docstrings. It was fixed by moving the
""defined-in-Python"" functions into an exec call instead.

See https://github.com/python/cpython/issues/94381",['tests/run/line_trace.pyx']
5c900c59d03f23f7329d6e68e114e4a277112916,2022-06-28 11:52:05,da-woods,"Fix tuple multiplication in MergedSequenceNode (GH-4864)

Fixes https://github.com/cython/cython/issues/4861","['Cython/Compiler/ExprNodes.py', 'tests/run/pep448_extended_unpacking.pyx']"
640b143fe00422971b6d5025efeb47efd5fa2fd4,2022-06-26 10:43:43,da-woods,Merge branch '0.29.x',['docs/src/userguide/sharing_declarations.rst']
530e370ff3d4d43e1969dcc821f65bf33a99f252,2022-06-26 10:42:31,da-woods,"Docs: don't say cdef functions exist in module dict (#4865)

Patch is against 0.29.x branch (to fix both versions of the
documentation).",['docs/src/userguide/sharing_declarations.rst']
36520e7c90b059777271c6e71d62af55f123a42b,2022-06-25 11:03:05,Matus Valo,"Docs: Migrate sharing_declarations.rst to pure python mode (#4544)

* Initial migration of examples

* Migrate text in sharing_declarations.rst

* Some fixes of examples and clarification

* Fix capitalization

* Apply suggestions from code review

Co-authored-by: da-woods <dw-git@d-woods.co.uk>

Co-authored-by: da-woods <dw-git@d-woods.co.uk>","['docs/examples/userguide/sharing_declarations/landscaping.py', 'docs/examples/userguide/sharing_declarations/lunch.py', 'docs/examples/userguide/sharing_declarations/lunch.pyx', 'docs/examples/userguide/sharing_declarations/restaurant.py', 'docs/examples/userguide/sharing_declarations/restaurant.pyx', 'docs/examples/userguide/sharing_declarations/setup_py.py', 'docs/examples/userguide/sharing_declarations/setup_pyx.py', 'docs/examples/userguide/sharing_declarations/shrubbing.py', 'docs/examples/userguide/sharing_declarations/shrubbing.pyx', 'docs/examples/userguide/sharing_declarations/spammery.py', 'docs/examples/userguide/sharing_declarations/spammery.pyx', 'docs/examples/userguide/sharing_declarations/volume.py', 'docs/src/tutorial/pure.rst', 'docs/src/userguide/sharing_declarations.rst']"
371b0a163a7ec9f87f5d478f2249ab69c4dc6785,2022-06-25 09:40:09,Matus Valo,"Docs: Migrate special_methods.rst to pure python (#4537)

* Migrate special_methods.rst to pure python

* Fix missing import in examples","['docs/examples/userguide/special_methods/total_ordering.py', 'docs/examples/userguide/special_methods/total_ordering.pyx', 'docs/src/userguide/special_methods.rst']"
8eca1d1c186b6505cc9f06e5d2b42647bce68836,2022-06-23 07:19:37,Jouke Witteveen,"Mention python3-dev requirement on Ubuntu/Debian (#4856)

Let's assume nobody who reads the quickstart documentation actually wants
python2-dev.",['docs/src/quickstart/install.rst']
579fcbc29bbc097af323a504447bebf6e2696231,2022-06-21 12:07:27,Stefan Behnel,Merge branch '0.29.x',[]
9fb8fae9295a9fa689bfe54a00f1f39642822d7c,2022-06-21 12:04:54,Lisandro Dalcin,Fix GCC -Wconversion warning in C utility code (GH-4854),['Cython/Utility/StringTools.c']
a118960f7643cd343f3a4bb7ef653a69ef16c13b,2022-06-21 12:04:54,Lisandro Dalcin,Fix GCC -Wconversion warnings in C utility code (GH-4854),"['Cython/Utility/CythonFunction.c', 'Cython/Utility/StringTools.c']"
6b6d5f20f04fb581a23effec5a14ec7a97b213fd,2022-06-21 06:39:01,da-woods,Fix code-style blank like at end of file,['tests/run/bytearray_iter.py']
705bd62c80a7fb0414b9632b7016f4ea77068e60,2022-06-21 06:21:37,da-woods,Merge branch '0.29.x',['tests/run/bytearray_iter.py']
c416c7cb2159cc43f9461d96721aeaaa8f9f4714,2022-06-21 06:18:12,Kenrick Everett,"Fix bytearray iteration in 0.29.x (#4108)

By explicitly setting the result type","['Cython/Compiler/ExprNodes.py', 'tests/run/bytearray_iter.py']"
a7d98eeafac9aaaa8825fd471be38172ee0b259c,2022-06-17 16:51:26,pfebrer,BUG: fused types not subscriptable in Cython.Shadow (#4842),['Cython/Shadow.py']
f753deecd09e011a1bc276b78ccc0f1c0ad67f09,2022-06-17 16:51:26,pfebrer,BUG: fused types not subscriptable in Cython.Shadow (#4842),['Cython/Shadow.py']
9341e73aceface39dd7b48bf46b3f376cde33296,2022-06-11 07:21:44,mwtian,"Always initialize `state` in __Pyx_WriteUnraisable (#4831)

Avoids error about uninitialized variables when compiling with ubscan",['Cython/Utility/Exceptions.c']
8e29b6d47f6f5b10ec1a37f06db440156ac2ac2e,2022-06-08 06:14:12,Víctor Molina García,Update Limited API preprocessor warning to be compatible with MSVC (#4826),['Cython/Compiler/Nodes.py']
ad2d1f7dd72b0dbdb9d9441e0b30936ebad1a2c4,2022-06-07 17:32:19,Thomas A Caswell,"MNT: always require va_start to have two arguments (#4820)

* MNT: always require va_start to have two arguments

https://github.com/python/cpython/pull/93215 chance CPython to always use the
2-input version of va_start and dropped defining HAVE_STDARG_PROTOTYPES.  This
resulted in the 1-argument version being used when compiling cython source
which fails

This makes cython also always use the 2-argument version.

* Remove blank line

* FIX: version gate 2-argument va_start checking to py311",['Cython/Utility/MemoryView_C.c']
4613ec04a10a240f56d81d052835870e409fd2a4,2022-06-07 17:32:19,Thomas A Caswell,"MNT: always require va_start to have two arguments (#4820)

* MNT: always require va_start to have two arguments

https://github.com/python/cpython/pull/93215 chance CPython to always use the
2-input version of va_start and dropped defining HAVE_STDARG_PROTOTYPES.  This
resulted in the 1-argument version being used when compiling cython source
which fails

This makes cython also always use the 2-argument version.

* Remove blank line

* FIX: version gate 2-argument va_start checking to py311",['Cython/Utility/MemoryView_C.c']
3c0afd9a4e9d8b9aea1702876b52b31f35992b51,2022-06-07 17:28:53,Till Hoffmann,"Add distributions to `libcpp.random`. (#4762)

* Add `uniform_int_distribution` to `libcpp`.

* Add `uniform_real_distribution` to `libcpp`.

* Add `bernoulli_distribution` to `libcpp`.

* Add `binomial_distribution` to `libcpp`.

* Add `geometric_distribution` to `libcpp`.

* Add range tests for distributions.

* Add `negative_binomial_distribution` to `libcpp`.

* Add `poisson_distribution` to `libcpp`.

* Add `exponential_distribution` to `libcpp`.

* Add `gamma_distribution` to `libcpp`.

* Add `weibull_distribution` to `libcpp`.

* Add `extreme_value_distribution` to `libcpp`.

* Add `normal_distribution` to `libcpp`.

* Add `lognormal_distribution` to `libcpp`.

* Add `chi_squared_distribution` to `libcpp`.

* Add `cauchy_distribution` to `libcpp`.

* Add `fisher_f_distribution` to `libcpp`.

* Increase `dof` for `fisher_f_distribution_test`.

* Add `student_t_distribution` to `libcpp`.

* Add docstring to `sample_or_range` helper function.

* Fix distribution range tests for different OSs.

* Show sample values and proba. of test passing.

* Test distribution call without checking values.","['Cython/Includes/libcpp/random.pxd', 'tests/run/cpp_stl_random.pyx']"
c5a418ac0f46ce797f9261c2b8de43630f9d71d8,2022-06-06 06:11:20,Thomas J. Fan,DOC Fixes link to init methods (#4824),['docs/src/userguide/extension_types.rst']
6ac2422b48b689b021a48dff9ee14095232baafe,2022-05-31 19:12:06,Stefan Behnel,Remove unused import from test file.,['tests/run/test_named_expressions.py']
d9a708221cebc431015ae640b31e14c10ec4fb4c,2022-05-31 19:11:32,Stefan Behnel,Fix test tag name.,['tests/run/test_named_expressions.py']
aaff13db6d4b8a6c812887dc50e1de9f180bc099,2022-05-31 19:05:06,Wenjun Si,"Add ""mt19973_64"" declarations to ""libcpp.random"" (GH-4818)","['Cython/Includes/libcpp/random.pxd', 'tests/run/cpp_stl_random.pyx']"
0159be918d7c83e145f4ec3ffc35b8d0e3d974dd,2022-05-30 07:38:59,da-woods,"Improve coercion rules on function pointer exception specification and add tests (GH-4811)

Closes https://github.com/cython/cython/issues/4689","['Cython/Compiler/PyrexTypes.py', 'tests/errors/cfuncptr.pyx', 'tests/run/cfuncptr.pyx']"
d0719998c441be752c4c28c5791ecfa305dc4322,2022-05-29 14:06:20,da-woods,"Replace fused ""__self__"" property function with slot memberdef (GH-4808)

It's a bit simpler, and it lets `hasattr` work correctly where-as the getset didn't: hasattr() returned true, but it still raised an error.","['Cython/Utility/CythonFunction.c', 'tests/run/function_self.py']"
b2792a3d1796effcfdeb41c6b495d176ad5d7239,2022-05-24 08:55:36,da-woods,"Remove unused ""saved_subexpr_nodes"" attribute (GH-4604)",['Cython/Compiler/ExprNodes.py']
66d1ee5ac43599967bc1bfce380cffb0d32d2fb2,2022-05-21 10:19:30,Max Bachmann,fix issue reference in changelog (#4802),['CHANGES.rst']
d9709b249f4a1dd73946f5077866a1b81ba0b128,2022-05-19 17:18:05,Yury Sokov,"dataclasses: enable kw_only dataclasses (#4794)

Covers `kw_only` as an argument to `@cython.dataclass` but not yet to `field`, or the `KW_ONLY` placeholder","['Cython/Compiler/Dataclass.py', 'tests/run/cdef_class_dataclass.pyx']"
91af73d98e8184f8b8b6e68947df377048489351,2022-05-17 16:56:47,Stefan Behnel,"Make it clear from the package headline that Cython is actually Python, just more.",['setup.py']
4c199dab5e16ff13bea1420bc497617140f702fa,2022-05-17 15:39:49,Stefan Behnel,Merge branch '0.29.x',['Cython/Compiler/ModuleNode.py']
c0dfb9c2f592b7e0ece90ec83fbadcf6e6da3d47,2022-05-17 15:39:12,Stefan Behnel,"Use encoded string since `ModuleNode.full_module_name` may originate from different sources.

See https://github.com/cython/cython/pull/4764",['Cython/Compiler/ModuleNode.py']
9a39eb487209ec0c8b662ecf119cb444a484130c,2022-05-17 14:54:30,Stefan Behnel,Add musllinux AArch64 wheen build.,"['.github/workflows/wheel-manylinux.yml', 'Makefile']"
5c1473073acb77faf5ad48a120445008455f131a,2022-05-17 14:41:18,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
18b19ad0914c5a33b733badf24578e693c48d7e3,2022-05-17 14:35:53,Stefan Behnel,Merge branch '0.29.29-reg' into 0.29.x,"['CHANGES.rst', 'Cython/Shadow.py']"
d0379466c6a81148bcef0e8b71dd4731f0354537,2022-05-17 10:45:51,Matti Picus,"Move from deprecated find_loader() to find_spec() for setting up the import time package path (GH-4764)

Closes https://github.com/cython/cython/issues/4763","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ImportExport.c']"
a6f04ef2430fb4e7383a068cd1ae9a115d7a78df,2022-05-17 14:33:38,Stefan Behnel,Prepare release of 0.29.30.,"['CHANGES.rst', 'Cython/Shadow.py']"
a428ead3a6bbfd22a05ebb0b6ed414bad015807f,2022-05-17 14:12:34,Stefan Behnel,"Revert ""Avoid acquiring the GIL at the end of nogil functions (GH-3556) (GH-4749)""

This reverts commit 74073417c4f7e616af0a139a55f790f1ec7fe728.","['Cython/Compiler/Code.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/trace_nogil.pyx']"
8ab1166c7bce3fe994f5f4c36fd8b70a3bab3aa8,2022-05-16 15:44:37,Stefan Behnel,typo,['CHANGES.rst']
da4f2492852dcb9b024ac300376f537276cfdb41,2022-05-17 14:22:16,Stefan Behnel,Merge branch '0.29.x',[]
7fbf5eeeb19983aa65938fd262508d8758f47da8,2022-05-17 14:12:34,Stefan Behnel,"Revert ""Avoid acquiring the GIL at the end of nogil functions (GH-3556) (GH-4749)""

This reverts commit 74073417c4f7e616af0a139a55f790f1ec7fe728.","['Cython/Compiler/Code.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/trace_nogil.pyx']"
0625a45ad2c86c565f389a6718c04c84634c57ba,2022-05-17 14:08:34,Stefan Behnel,Exclude Py3.12 from the CI builds again since it's not available yet.,['.github/workflows/ci.yml']
f64d87f554a504ea6c2cbee811c02a0bad79c04a,2022-05-17 10:48:04,Stefan Behnel,Merge branch '0.29.x',[]
aac58502a00cd52433cde9f83231e4f497b20f89,2022-05-17 10:45:51,Matti Picus,"Move from deprecated find_loader() to find_spec() for setting up the import time package path (GH-4764)

Closes https://github.com/cython/cython/issues/4763","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ImportExport.c']"
0afd8fdac9eb9a665768562ad9164a2979b6614a,2022-05-17 10:45:51,Matti Picus,"Move from deprecated find_loader() to find_spec() for setting up the import time package path (GH-4764)

Closes https://github.com/cython/cython/issues/4763","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ImportExport.c']"
18c70e9b9cad1ef78631efe4b0b2d482c2721abc,2022-05-17 10:27:31,Stefan Behnel,Modernise some code.,['Cython/Compiler/Main.py']
b4595a04a78b79dc59276a9f64aab7b884e945e8,2022-05-17 09:59:19,Stefan Behnel,Adapt PEP-623 support to latest Py3.12 which removes the wstr field in PyUnicode but kept the PyUnicode_*() macros around.,['Cython/Utility/ModuleSetupCode.c']
bca6b87590e2f201060f266a71bd40293fc018ec,2022-05-17 09:53:08,Stefan Behnel,Add Py3.12 to CI build targets.,['.github/workflows/ci.yml']
80a6af3a15fe7a1568282c53ed91e950c6939ad1,2022-05-16 19:09:14,Stefan Behnel,Update changelog.,['CHANGES.rst']
bbade72623c04933c348cd68fa273d3db6798446,2022-05-16 18:27:02,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
59e0f8903db832f2db4e015e6236ba90d5c95113,2022-05-16 15:44:37,Stefan Behnel,typo,['CHANGES.rst']
26ddc79c0b996fadf9c638953ccab969e932519a,2022-05-16 11:34:45,Stefan Behnel,Merge branch 'master' of git+ssh://github.com/cython/cython,"['Cython/Compiler/Nodes.py', 'tests/run/cfuncptr.pyx']"
246b3304a53d3d2052b06626bba250559ac1a614,2022-05-16 11:34:25,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Utility/CythonFunction.c', 'tests/run/cyfunction.pyx']"
84bf400d038a9bf6e2a7098278c9fa42bd908816,2022-05-16 11:32:02,Stefan Behnel,Prepare release of 0.29.29.,"['CHANGES.rst', 'Cython/Shadow.py']"
60f41054f79859e4dacb796652da12f2c40ff15a,2022-05-16 11:24:19,Stefan Behnel,Update changelog.,['CHANGES.rst']
c100f5e8245378aab8555d44f50c695567dc2417,2022-05-16 11:03:35,da-woods,"Remove "".__contains__"" -> ""PySequence_Contains"" slot mappings for known builtin types (GH-4792)

They prevent explicitly calling the base-class __contains__.

Closes https://github.com/cython/cython/issues/4785","['Cython/Compiler/Builtin.py', 'tests/run/builtin_subtype_methods_T653.pyx']"
4e23f3e44daf73153904d9599ed696cbf8ae704f,2022-05-16 10:22:46,Stefan Behnel,Update changelog.,['CHANGES.rst']
34640e263f4e4653ed43dc589baf95b4ec1b857c,2022-05-16 10:18:59,da-woods,"Fix version detection and compile/runtime Python version warning with double-digit versions such as Py3.10 (GH-4777)

See https://github.com/cython/cython/issues/2542#issuecomment-1121484721",['Cython/Utility/ModuleSetupCode.c']
5cd417c3613519dd295707460ba3be4ac92e6c4d,2022-05-16 11:15:31,da-woods,Change IndexError to TypeError when calling unbound CyFunctions (GH-4783),"['Cython/Utility/CythonFunction.c', 'tests/run/cyfunction.pyx']"
b67c9d3e43202bc2133a4dfa0b0d3beea032c061,2022-05-16 11:10:25,da-woods,"Preserve except* declaration on function pointer types (GH-4771)

Closes https://github.com/cython/cython/issues/4770","['Cython/Compiler/Nodes.py', 'tests/run/cfuncptr.pyx']"
0ad6b33065d2216cea3d52e14ce63eeef4e15d56,2022-05-16 11:03:35,da-woods,"Remove "".__contains__"" -> ""PySequence_Contains"" slot mappings for known builtin types (GH-4792)

They prevent explicitly calling the base-class __contains__.

Closes https://github.com/cython/cython/issues/4785","['Cython/Compiler/Builtin.py', 'tests/run/builtin_subtype_methods_T653.pyx']"
c82da6db9d2ee54783e6b1eb0420c27c129da5a2,2022-05-16 10:52:31,da-woods,"Remove unused ""cdef extern"" declarations from Memoryview utility code (GH-4778)","['Cython/Utility/MemoryView.pyx', 'tests/compile/fused_redeclare_T3111.pyx']"
c9597fce4374ab03a8f80feb13598373a7396dee,2022-05-16 10:50:25,da-woods,"Remove 'goto error' from numpy cimport guard code (GH-4773)

The label it was using was unrelated to the place where the utility
code was actually appearing, and it was essentially luck that it
seemed to work (largly because it was always going to `__pyx_L1_error`
label).

It's guarded anyway because of
`writer.putln(writer.error_goto_if_PyErr(output.module_pos))`
which is added after every block of utility code in the init
section.

The only thing we lose is a position that links it back to the
""cimport numpy"" line.","['Cython/Compiler/Nodes.py', 'Cython/Utility/NumpyImportArray.c']"
a9a84bc571913700139d0186d25af0481c18c10b,2022-05-16 10:18:59,da-woods,"Fix version detection and compile/runtime Python version warning with double-digit versions such as Py3.10 (GH-4777)

See https://github.com/cython/cython/issues/2542#issuecomment-1121484721",['Cython/Utility/ModuleSetupCode.c']
b27f0a262c1f0c32369a5c1928624bd7b3be5c29,2022-05-15 17:45:45,da-woods,Fixed comment in cdef_class_dataclass test,['tests/run/cdef_class_dataclass.pyx']
12a12db7b5e2514f05e7955983fdd672d8c1302b,2022-05-14 16:01:12,samaingw,"Test for cppclass docstrings (added in #3183) (#3220)

Co-authored-by: Gwenael Samain <gwenael.samain@nexedi.com>","['tests/run/cpp_classes.pyx', 'tests/run/cpp_classes_def.pyx', 'tests/run/shapes.h']"
e92277f99e3c754719aaabcd82ba2132c697da9e,2022-05-14 15:57:13,Elisha Hollander,"Replace `NotImplemented` with `NotImplementedError` (#4786)

`raise NotImplemented()` gives `TypeError` instead of `NotImplementedError` since `NotImplemented`'s type is `NotImplementedType`",['Cython/Compiler/TypeSlots.py']
b3041fe549113441cafdb499b867ebe26219ffb1,2022-05-14 15:53:55,da-woods,"Update MACOSX_DEPLOYMENT_TARGET for fix test failure (#4793)

It looks like Python 3.8 now needs MACOSX_DEPLOYMENT_TARGET=10.15",['.github/workflows/ci.yml']
1be9e6c990ac67a32b532fb53fb378283344c3b0,2022-05-13 16:08:55,da-woods,"Mark reverse operators with METHOD_COEXIST (GH-4754)

This means that reverse operators (e.g. `__radd__`) won't be
hidden by the automatic wrapper that PyType_Ready() produces if
the forward method exists. Although they won't work as
in Python, they will be possible to look up and call explicitly.
This should make it easier to write code that's compatible with
Cython 0.29.x and Cython 3 (where reverse operators will be
full supported).

Adjusted to work on Cython 3.0.

Based on https://github.com/cython/cython/pull/4753
Closes https://github.com/cython/cython/issues/4750","['Cython/Compiler/Code.py', 'Cython/Compiler/TypeSlots.py']"
bd2df54a9359d3f270b8701488cc6a8f558cb786,2022-05-13 09:37:35,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
28857fd661946646364616073008d8e5a80ab622,2022-05-13 09:36:40,Stefan Behnel,Fix credited author name in changelog.,['CHANGES.rst']
89591f7c85f6b8eb580ac8f3a00014f28c61a139,2022-05-11 21:58:43,Stefan Behnel,Merge branch '0.29.x',[]
f71d5c0079caf33a2ffcc61d5a668fead0edafd0,2022-05-11 21:50:21,Stefan Behnel,Merge branch 0.29.x,"['CHANGES.rst', 'Cython/Compiler/Code.py', 'Cython/Compiler/TypeSlots.py', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/modop.pyx', 'tests/run/special_methods_T561.pyx', 'tests/run/trace_nogil.pyx']"
6bf9d441c5f2c46ae72b6bb3e4ac6175d3a3474b,2022-05-10 11:05:32,Ewout ter Hoeven,"CI: Update versions of used actions, allow manual ""workflow_dispatch"" (GH-4776)

- Updates the used actions to their latest versions (v3)
- Allow triggering a run manually from the GitHub UI by adding workflow_dispatch
- Run pycoverage job with Python 3.10",['.github/workflows/ci.yml']
812585935131125f8988c38417bb73bfd5a81c05,2022-05-09 04:36:36,Ewout ter Hoeven,"manylinux CI: Update used actions, use Python 3.10 (GH-4774)

- Update actions/checkout to v3, actions/setup-python to v3 and actions/upload-artifact to v3. Those version are currently maintained and use NodeJS 16.
- Use Python 3.10 for sdist and wheel building jobs.",['.github/workflows/wheel-manylinux.yml']
2bcfca727ba340f6a656c4f8c0a4022d79533ba1,2022-05-09 04:30:16,da-woods,"Make 'tags' an error in runtests.py (GH-4772)

We've now got rid of all legacy uses of ""tags"". Therefore make it an error instead of a warning to avoid new uses sneaking in.",['runtests.py']
d4cbe45b38695cd27c56ea0b786c52caa4e164de,2022-05-08 09:46:37,da-woods,"""tags"" -> ""tag"" in cpp_stl_algo_sample

Because ""WARNING: test tags use the 'tag' directive, not 'tags'""",['tests/run/cpp_stl_algo_sample.pyx']
2795a45f24f6d47016d55e2bee626256173cecae,2022-05-07 11:48:22,da-woods,CI: Change MACOSX_DEPLOYMENT_TARGET in Py3.7 to repair a CI test failure (GH-4769),['.github/workflows/ci.yml']
d05cfb8c0f4dde88d15494f19d4274ea3aa1f7c8,2022-05-06 21:16:16,Ivan Kapeykin,"Correct typo in the word ""decorator"" (#4768)",['docs/src/userguide/source_files_and_compilation.rst']
a0993fa49405a3583860c95678a48a8cf8853e04,2022-05-05 16:37:20,Max Bachmann,"move c++11 specific tests into separate files (#4748)

Small fix to https://github.com/cython/cython/pull/4530","['tests/run/cpp_stl_list.pyx', 'tests/run/cpp_stl_list_cpp11.pyx', 'tests/run/cpp_stl_vector.pyx', 'tests/run/cpp_stl_vector_cpp11.pyx']"
ac29e8976d34a6d48ba6737f44b7002e2eca6c30,2022-05-03 13:36:24,Stefan Behnel,Update changelog.,['CHANGES.rst']
f143148e21894d316b584013c9c8a196befa925f,2022-05-03 13:22:14,Stefan Behnel,"Adapt doctest to new exception messages in Py3.11 (says ""modulo"" instead of ""division"").",['tests/run/modop.pyx']
74073417c4f7e616af0a139a55f790f1ec7fe728,2022-05-03 21:53:57,Oleksandr Pavlyk,"Avoid acquiring the GIL at the end of nogil functions (GH-3556) (GH-4749)

Closes https://github.com/cython/cython/issues/4637
See See https://github.com/cython/cython/issues/3556

* Acquire the GIL in nogil functions only when strictly needed on function exit, e.g. for cleaning up temp variables from with-gil blocks or adding tracebacks.

See https://github.com/cython/cython/issues/3554

* Make the GIL-avoidance in 7d99b0f0 actually work in nogil functions and not just nogil sections.

See https://github.com/cython/cython/issues/3558","['Cython/Compiler/Code.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/trace_nogil.pyx']"
04934f5db17ac782de08b8f8595e38b59e445e2b,2022-05-03 21:47:02,jakirkham,Add `tp_methods` field to `PyTypeObject` declarations (GH-4699),['Cython/Includes/cpython/object.pxd']
fe98838ca28dff29d6b6d8c074c43290c9554ead,2022-05-03 13:26:52,da-woods,"Mark reverse operators with METHOD_COEXIST (GH-4753)

This means that reverse operators (e.g. `__radd__`) won't be
hidden by the automatic wrapper that `PyType_Ready()` produces if
the forward method exists. Although they won't work as
in Python, they will be possible to look up and call explicitly.
This should make it easier to write code that's compatible with
Cython 0.29.x and Cython 3 (where reverse operators will be full supported).

Closes https://github.com/cython/cython/issues/4750","['Cython/Compiler/Code.py', 'Cython/Compiler/TypeSlots.py', 'tests/run/special_methods_T561.pyx']"
dc5f0de75638c7b39650c7542ad0779e5eddb38b,2022-05-02 14:51:05,Stefan Behnel,Avoid an ambiguous function signature spelling in the documentation. Signatures with unnamed (type-only) arguments are generally more difficult to read.,['docs/examples/userguide/sharing_declarations/volume.pxd']
2a80e61e81fc455b250a5f02ebb6fbb3e388c41c,2022-04-24 19:24:59,Stefan Behnel,Update changelog.,['CHANGES.rst']
d48d0a038e2838d3bd2981e2687557a86936076b,2022-04-21 13:49:46,Till Hoffmann,Add C++ STL `sample` for sampling without replacement. (GH-4751),"['Cython/Includes/libcpp/algorithm.pxd', 'tests/run/cpp_stl_algo_sample.pyx']"
2a93f02acdbda49df10c2e2cabf092489bc0bfd9,2022-04-21 09:54:08,Stefan Behnel,Merge branch 'master' of git+ssh://github.com/cython/cython,['tests/run/unicodemethods.pyx']
0ee4a655f2d6db29a80ca97c6ce38906e0cc01d8,2022-04-21 09:52:55,Stefan Behnel,Update changelog.,['CHANGES.rst']
e4cd5f18224627096a7b3ff58b1e6f8f185c6bc6,2022-04-21 09:45:13,Kirill Smelkov,"Add tests for 'None' value argument in optimised string methods. (GH-4743)

Also refactor the tests to (always) use a direct comparison between the Python generated result and the result from the optimised Cython code.

Adds tests for https://github.com/cython/cython/pull/4740
See https://github.com/cython/cython/issues/4737",['tests/run/unicodemethods.pyx']
5bc42067801956bb817167ec8aa5f7ae9cd1c694,2022-04-21 08:46:12,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
4060346cf79cf05cdc1b40a43b7c940d376afbce,2022-04-21 08:44:32,Stefan Behnel,Update changelog.,['CHANGES.rst']
b6ca1a2e20a4f6e38bf8d9796e91ff3ab22b8971,2022-04-20 20:30:01,Stefan Behnel,"Fix list of warnings in test after fixing the ""'DEF' statement is deprecated"" warning in MemoryView.pyx.",['tests/compile/fused_redeclare_T3111.pyx']
a63fe91114d47ce844295071b2f1ed25751c68c3,2022-04-20 20:14:23,Stefan Behnel,"Configure THREAD_LOCKS_PREALLOCATED in MemoryView.pyx via Tempita code generation rather than a DEF statement (as we ask users to do as well).

See https://github.com/cython/cython/issues/4310","['Cython/Compiler/MemoryView.py', 'Cython/Utility/MemoryView.pyx']"
90cd6add5f3de6c9d8d68c5f8aa23157f46cf118,2022-04-20 12:06:41,Till Hoffmann,Add mt19937 random number generator to libcpp. (GH-4746),"['Cython/Includes/libcpp/random.pxd', 'tests/run/cpp_stl_random.pyx']"
169876872f3cb6198971a1db07e5b8a9d12b3dac,2022-04-19 16:30:55,Max Bachmann,"Add missing C++ STL iterator declarations and correct their const/non-const behaviour. (GH-4528)

The current implementation of iterators had the following bugs:

- it was possible to assign `const_iterator` to `iterator`
- it was not possible to assign `iterator` to `const_iterator`
- operator* did not always return `value_type` e.g. for
  `const_iterator` this often returned `T&` instead of
  `const value_type&`
- increment operators always returned `iterators`. This caused
  e.g. `const_iterator + 1` to result in a `iterator` instead of
  a `const_iterator`
- comparision operators could not be used to compare
  `iterators` and `const_iterators` (`const_iterator == iterator`)","['Cython/Includes/libcpp/deque.pxd', 'Cython/Includes/libcpp/forward_list.pxd', 'Cython/Includes/libcpp/list.pxd', 'Cython/Includes/libcpp/map.pxd', 'Cython/Includes/libcpp/set.pxd', 'Cython/Includes/libcpp/string.pxd', 'Cython/Includes/libcpp/unordered_map.pxd', 'Cython/Includes/libcpp/unordered_set.pxd', 'Cython/Includes/libcpp/vector.pxd', 'tests/errors/cpp_no_const_iterator_conversion.pyx', 'tests/run/cpp_iterators.pyx', 'tests/run/cpp_stl_map.pyx', 'tests/run/cpp_stl_set.pyx']"
c137fc1dc879a2ec4bc9cf43d8aace83de956320,2022-04-18 20:54:44,Stefan Behnel,"Lists of ""negative"" length are also empty, and that's the case we special-case later in an inline function, so use the same condition for consistency and easy C compiler optimisation.

See https://github.com/cython/cython/pull/4734",['Cython/Utility/ObjectHandling.c']
969deb4d73333cba86a5272877d12ea1c87a2a74,2022-04-18 20:45:26,Richard Barnes,"Avoid nullptr math undefined behaviour in __Pyx_PyList_GetSlice() utility function (GH-4734)

Some code I have uses lxml. When I compile and run lxml with LLVM-12's undefined behaviour sanitizer, I see this:
```
lxml/4.6.3/cython_parts=etree.c/etree.c:191228:65: runtime error: applying zero offset to null pointer
    #0 0x7faedc799e7c in __Pyx_PyList_GetSlice lxml/4.6.3/cython_parts=etree.c/etree.c:191228
    #1 0x7faedc6b3723 in __pyx_f_4lxml_5etree_9_ErrorLog_copy lxml/4.6.3/cython_parts=etree.c/etree.c:38092
    #2 0x7faedc77636e in __pyx_f_4lxml_5etree___copyGlobalErrorLog lxml/4.6.3/cython_parts=etree.c/etree.c:40203
    #3 0x7faedc775a5c in __pyx_pf_4lxml_5etree_9LxmlError___init__ lxml/4.6.3/cython_parts=etree.c/etree.c:21080
    #4 0x7faedc774dff in __pyx_pw_4lxml_5etree_9LxmlError_1__init__ lxml/4.6.3/cython_parts=etree.c/etree.c:21019
```
which implies that Cython's generating undefined behaviour.

Making an early exit from the modified function (essentially by hoisting an early exit from one level lower in the stack) avoids this.",['Cython/Utility/ObjectHandling.c']
b86250774239a31b7a1ac9097fd0e2d93f27da4f,2022-04-18 20:37:27,Stefan Behnel,CI: Use same capital case package name spelling as other dependencies do. Seems like pip can get confused about this (maybe just temporarily).,['doc-requirements.txt']
4d79a24a596768f9b4f7a57efd981cc041268aa2,2022-04-18 20:35:11,Stefan Behnel,docs: rst formatting.,['docs/src/userguide/source_files_and_compilation.rst']
85cf296dfca2cc51e000d35b99b69752ee4692e2,2022-04-18 19:58:06,Stefan Behnel,Add W292 code style checker: newline at end of file.,['setup.cfg']
ad24a17ce40b9b2fc35318ce48574d1842e3d6a4,2022-04-18 13:05:46,scoder,"Allow None to coerce to C types separately from other object values. (GH-4740)

This is used by some optimisations for builtins that call C-API functions directly but need to convert None arguments to NULL or special integer values in order to mimic the original Python interface.

Also add and backport the CPython macros for None checks (and True/False, while we're at it):
https://docs.python.org/3/c-api/structures.html#c.Py_Is

Closes https://github.com/cython/cython/issues/4737
See https://github.com/cython/cython/issues/4706","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/unicodemethods.pyx']"
69cb05b390c90f4c9a9692176cbc62157b3e9b73,2022-04-18 12:53:30,Stefan Behnel,Merge branch '0.29.x',['Cython/Utility/ExtensionTypes.c']
60ca7eb7497bd5be93e616666e3ce04ae0f27fd2,2022-04-18 12:50:02,da-woods,"Avoid error if type doesn't have ""__getstate__"" when setting up pickle support. (GH-4739)

Fixes a bug introduced by https://github.com/cython/cython/commit/ae4ade8daeae206db68583f2f4b9c1cbce9cba75 for PyPy.",['Cython/Utility/ExtensionTypes.c']
bbcb924e0852da8772106e016de4788327489306,2022-04-16 06:28:24,Stefan Behnel,Merge branch '0.29.x',[]
c24aa3d80e7c14d5d3f70b6512468a32b5d61070,2022-04-16 06:26:28,scoder,"Revert ""Avoid acquiring the GIL at the end of nogil functions (GH-3556) (GH-4703)"" (GH-4742)

PR 4703 was an incomplete backport of the changes needed for #3554 and generates incorrect C code.

See https://github.com/cython/cython/issues/3554
Reverts https://github.com/cython/cython/pull/4703

This reverts commit d395a56f8e68ee563f866d0dec5a31a37f77df9e.","['Cython/Compiler/Code.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Utility/ModuleSetupCode.c']"
57582f6277bf1cad730cd3050f4c8f5a77fb1cf1,2022-04-15 16:09:46,Max Bachmann,Add cbegin/cend/crbegin/crend to C++ STL container declarations (GH-4530),"['Cython/Includes/libcpp/deque.pxd', 'Cython/Includes/libcpp/list.pxd', 'Cython/Includes/libcpp/map.pxd', 'Cython/Includes/libcpp/set.pxd', 'Cython/Includes/libcpp/string.pxd', 'Cython/Includes/libcpp/unordered_map.pxd', 'Cython/Includes/libcpp/unordered_set.pxd', 'Cython/Includes/libcpp/vector.pxd', 'tests/run/cpp_stl_list.pyx', 'tests/run/cpp_stl_map.pyx', 'tests/run/cpp_stl_multimap.pyx', 'tests/run/cpp_stl_multiset.pyx', 'tests/run/cpp_stl_set.pyx', 'tests/run/cpp_stl_vector.pyx']"
f212c3e41b3e7a670e2e5465bc60b8be390ff7af,2022-04-15 14:54:50,Stefan Behnel,Remove dead Py2.5 code from test.,['tests/run/unicodemethods.pyx']
2604107eaf490841cbe7f477fe7bbfe6e6496d7e,2022-04-15 14:25:31,Stefan Behnel,"Use ""\x20"" instead of a plain space at the end of a doctest output line to make it easier to edit. Some editors strip off trailing whitespace.",['tests/run/unicodemethods.pyx']
811e5adb34160d8a70a83d8fb64feab3252f05db,2022-04-15 09:13:32,Stefan Behnel,Merge branch '0.29.x',[]
5c6cf78b73d956588c69b03a5111909af1e04845,2022-04-15 09:12:25,da-woods,"Disable CYTHON_FAST_PYCALL on Py3.10 (0.29.x)  (GH-4735)

It causes issues while profiling or debugging where global variables can end up inadvertently changed.

Fixes https://github.com/cython/cython/issues/4609","['Cython/Utility/ModuleSetupCode.c', 'tests/run/call_trace_gh4609.srctree']"
d2d2ea33a21e1915a52790ef64fdd1f28867854c,2022-04-12 18:52:10,Stefan Behnel,Merge branch '0.29.x',['Cython/Utility/ExtensionTypes.c']
35ab49071448a857565573a16af76dfed298a734,2022-04-10 18:03:29,da-woods,docs: fix code quoting error (GH-4729),['docs/src/userguide/extension_types.rst']
5db0e66d5bb26f6cf4030b4f8a6a5c6304a7b508,2022-04-12 18:48:51,Jordan Brière,"Fix UnionType.__setattr__ in Shadow.py (GH-4727)

The condition should only evaluate to True when assigning __dict__, but it currently does for _, d, i, etc. as well as resulting in the following potential issues:

* Non-member are being assigned to the object instead of raising.
* The one-field rule can be bypassed.
* Valid members that pass the condition are being assigned raw and are never cast to the specified type.",['Cython/Shadow.py']
54546b9019b9540cbcb031da8291a561847222e4,2022-04-12 18:48:51,Jordan Brière,"Fix UnionType.__setattr__ in Shadow.py (GH-4727)

The condition should only evaluate to True when assigning __dict__, but it currently does for _, d, i, etc. as well as resulting in the following potential issues:

* Non-member are being assigned to the object instead of raising.
* The one-field rule can be bypassed.
* Valid members that pass the condition are being assigned raw and are never cast to the specified type.",['Cython/Shadow.py']
ae4ade8daeae206db68583f2f4b9c1cbce9cba75,2022-04-12 18:43:37,da-woods,"Test for object.__getstate__ (new in Py3.11) in auto-pickling code (GH-4732)

The presence of this generic special method should not prevent Cython from making a class pickleable.

Fixes https://github.com/cython/cython/issues/4730",['Cython/Utility/ExtensionTypes.c']
9cff140813b0ede6d107ed7031052513df251ed9,2022-04-10 18:03:29,da-woods,docs: fix code quoting error (GH-4729),['docs/src/userguide/extension_types.rst']
f2dafd13fd52f2c4f118327a1ebbc128572f2c1d,2022-04-10 17:56:12,da-woods,"Use an EncodedString on dataclass types when creating a StringNode (GH-4728)

Closes https://github.com/cython/cython/issues/4704","['Cython/Compiler/Dataclass.py', 'tests/run/cdef_class_dataclass.pyx']"
18eb280aa2488ba14889538e157281b4175da25b,2022-04-07 20:54:57,Stefan Behnel,Merge branch '0.29.x',[]
569a06370db2f5367df6a530fce116da172d7b91,2022-04-07 20:54:03,Jakub Kulík,"Prevent Python call with exception set in __Pyx_AddTraceback() (GH-4723)

Closes https://github.com/cython/cython/issues/4722",['Cython/Utility/Exceptions.c']
22602c2e6884ff49b0031052ea6b0321a9be9e8f,2022-04-07 20:54:03,Jakub Kulík,"Prevent Python call with exception set in __Pyx_AddTraceback() (GH-4723)

Closes https://github.com/cython/cython/issues/4722",['Cython/Utility/Exceptions.c']
a7bee4dc1c3271e3903fae1502366fba3f6d1229,2022-04-07 08:32:02,Stefan Behnel,Merge branch '0.29.x',['Cython/Utility/StringTools.c']
94f409ed1164e3c85ebd829a264ae325b05ab1e6,2022-04-07 08:30:34,Stefan Behnel,"Disable ""CYTHON_UPDATE_DESCRIPTOR_DOC"" for Pyston. It was previously only enabled for CPython and should only have been enabled additionally for recent PyPy versions.",['Cython/Utility/ModuleSetupCode.c']
4ffcaa2f5e856ada3886cf248af1ea08a0d8f63e,2022-04-07 08:24:38,Stefan Behnel,"Stop using ""PyBytesObject.ob_shash"" in Py3.11, where it is deprecated. It was just an optimisation that isn't very important for byte strings any more.

Closes https://github.com/cython/cython/issues/4721",['Cython/Utility/StringTools.c']
ce5ca29d27f4c0e538f82823ef822840102bfea2,2022-04-06 17:11:20,Matus Valo,Fix typo in unittests (GH-4715),['tests/build/cythonize_cython.srctree']
786e9747d78cea39cb530221dd9b2592dfc4bca4,2022-04-05 07:43:25,Robert Bradshaw,"Merge pull request #4710 from jjerphan/stack-pop-exception-handling

Add exception handling for `libcpp::stack::push`",['Cython/Includes/libcpp/stack.pxd']
ebe515578cb4167c101baeb0ef7f4e3f6b2c6432,2022-04-01 16:15:21,Matti Picus,Allow setting descriptor docstring on PyPy>v7.3.9 (GH-4701),"['Cython/Compiler/Nodes.py', 'Cython/Utility/ModuleSetupCode.c']"
27dd4ee206723812db79672080bf5716acda67c7,2022-04-01 13:47:24,Matti Picus,docs: pin jinja2 version since 3.1.1 fails to work with our Sphinx version (GH-4700),['doc-requirements.txt']
2a9fc659cbb633641d32c83bdf11806379c1e372,2022-04-01 13:44:52,Stefan Behnel,Merge branch 0.29.x,[]
8b383d44a11b8b874df6ed15757c6ad1bf7c385e,2022-04-01 13:42:17,Stefan Behnel,Prevent newer setuptools versions from entering into CI at later pip-install steps.,"['test-requirements-cpython.txt', 'test-requirements.txt']"
220e78b8d74ab5f4266a927bc0c70156dbd9fddf,2022-04-01 08:38:34,Julien Jerphanion,Add exception handling for libcpp::stack::push,['Cython/Includes/libcpp/stack.pxd']
a6c5bad810dddd0c8dfbc22e1385e4c556caf0cd,2022-03-31 19:46:44,da-woods,"Add a warning to use the ""cpython.*"" submodules instead of ""cimport cpython"" (GH-4708)

Since cimporting directly from ""cpython"" has long been deprecated.

e.g. https://github.com/cython/cython/issues/4707",['docs/src/userguide/external_C_code.rst']
d395a56f8e68ee563f866d0dec5a31a37f77df9e,2022-03-31 19:46:07,Oleksandr Pavlyk,"Avoid acquiring the GIL at the end of nogil functions (GH-3556) (GH-4703)

Acquire the GIL in nogil functions only when strictly needed on function exit, e.g. for cleaning up temp variables from with-gil blocks or adding tracebacks.

Closes GH-3554
Closes GH-4637","['Cython/Compiler/Code.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Utility/ModuleSetupCode.c']"
fdea2d6bed8260a92fbabb43bec4c53996566dfe,2022-03-31 09:46:49,Stefan Behnel,"Add SVG version of Cython logo.
The license follows that of the official Python logo, which it is derived from.","['docs/_static/cython-logo-C.svg', 'docs/_static/cython-logo.svg']"
c23195ddc3bf4c139e85439c06de9b87c7bc752c,2022-03-27 18:31:06,Matti Picus,Allow setting descriptor docstring on PyPy>v7.3.9 (GH-4694),"['Cython/Compiler/Nodes.py', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/TypeConversion.c']"
b3936069c42878587772703bfd3260bbaa077b64,2022-03-27 07:46:30,Stefan Behnel,Fix typo in changelog.,['CHANGES.rst']
d85cbf676dd7bec80fbfc23d038575a21859ac87,2022-03-21 22:26:46,Stefan Behnel,Merge branch '0.29.x',[]
ef14c148ca2774e34350a270f52049142fcb1e1a,2022-03-21 22:21:09,Yuriy Chernyshov,"Do not redefine _USE_MATH_DEFINES in generated code (GH-4690)

Unconditionally adding `/D_USE_MATH_DEFINES` via cmdline triggers `-Wmacro-redefined` in cython-generated code.",['Cython/Utility/ModuleSetupCode.c']
a1b6dae02b08e67196909ab4bb42ee86f3156d9d,2022-03-21 22:21:09,Yuriy Chernyshov,"Do not redefine _USE_MATH_DEFINES in generated code (GH-4690)

Unconditionally adding `/D_USE_MATH_DEFINES` via cmdline triggers `-Wmacro-redefined` in cython-generated code.",['Cython/Utility/ModuleSetupCode.c']
518cbac89898a1b8c3390c82104c1b250a60a259,2022-03-17 21:27:06,da-woods,"Remove obselete memoryview getbuffer fallback code (GH-4685)

It appears to have been be used for Python < 2.6 (which didn't have the new buffer protocol).
Most of the mechanism had already been removed, but the capsule attributes that it relied on were still generated.

Also removed some utility code that was only used for this feature.","['Cython/Compiler/MemoryView.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Utility/Capsule.c', 'Cython/Utility/MemoryView.pyx', 'tests/compile/fused_redeclare_T3111.pyx']"
7846cbbc57dc99b1ffc485972a9097db97b8e658,2022-03-15 10:34:24,da-woods,"Include return type in fused types of function pointers (GH-4678)

For fused functions it makes sense that the return type is ignored
(a function can't be specialized based on return type alone) but
for function pointers the return type should be included (since
such a pointer might be an argument to a fused function)

Fixes https://github.com/cython/cython/issues/4644","['Cython/Compiler/PyrexTypes.py', 'tests/run/fused_types.pyx']"
0b3ccd7fc8de6bce50a9ca990f2e5db95a1100d8,2022-03-15 10:08:52,da-woods,"Allow None to be passed into arguments annotated as type ""object"" (GH-4669)","['Cython/Compiler/Nodes.py', 'tests/run/ext_type_none_arg.pyx']"
23eb27c6b5750be4d6463900bd14f1a81093594d,2022-03-14 14:28:03,Stefan Behnel,Merge branch '0.29.x',['tests/run/reduce_pickle.pyx']
2e38e2386b376bc2690df1da149e483cb824fea8,2022-03-14 14:26:21,Stefan Behnel,Fix test again: 'str' doesn't pickle well across the Py2/3 boundary.,['tests/run/reduce_pickle.pyx']
861cb81588b631c6e2420274f24c67efc2c2b744,2022-03-14 13:53:23,Stefan Behnel,Merge branch '0.29.x',"['Cython/Compiler/ParseTreeTransforms.py', 'tests/run/reduce_pickle.pyx']"
685f7a7e4b4578f4c74f88185b99f5ede97bd42c,2022-03-14 13:51:29,Stefan Behnel,Make the pickle test actually test that auto-pickling uses the right checksum (and not a user implemented reduce method that uses no checksums at all).,['tests/run/reduce_pickle.pyx']
d3b277ea5c1d0048b0cdf497fed72f040849515a,2022-03-14 13:49:26,Stefan Behnel,"Make error message more readable by using hex integer values for all presented checksums, not just the compile time ones.",['Cython/Compiler/ParseTreeTransforms.py']
dc56dec89500b7d113f8f9e54ea28ad27d72f9fc,2022-03-14 12:57:08,Stefan Behnel,Merge branch '0.29.x',[]
5fc919e3f8bda8d1e07e66701b61e16511b0ec01,2022-03-14 12:33:55,Stefan Behnel,"For the auto-pickle checksum, allow SHA-1 and SHA-256 which are used by Cython 3.x pickles now. Otherwise stick to MD5 since that was used before.

Closes https://github.com/cython/cython/issues/4680","['Cython/Compiler/ParseTreeTransforms.py', 'tests/run/reduce_pickle.pyx']"
90159e19b7dc974826c3e5bac2d696265e668e27,2022-03-14 12:33:55,Stefan Behnel,"For the auto-pickle checksum, allow MD5 again since it was used by Cython 0.x pickles. Otherwise switch to SHA-256 since that should be safe enough to stay available in Python's hashlib module for another while.

Closes https://github.com/cython/cython/issues/4680","['Cython/Compiler/ParseTreeTransforms.py', 'tests/run/reduce_pickle.pyx']"
33fea7bff83b4353f558965f97ffa42b90fe7676,2022-03-13 17:38:40,Stefan Behnel,Merge branch '0.29.x',['tests/run/tryexcept.pyx']
afc00fc3ba5d43c67151c0039847a526e7b627a5,2022-03-12 11:05:59,Thomas A Caswell,"Import internal CPython frame header file in Python 3.11 (GH-4667)

In https://github.com/python/cpython/pull/31530
https://bugs.python.org/issue46836

the `_frame` struct was moved to an internal header, however the public API is
primarily read-only, and Cython needs to build PyFrameObjects so still import
the internal headers.

Also sets the Py_BUILD_CORE define for py311a6, trying to restrict it to the frame header.","['Cython/Utility/Coroutine.c', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Profile.c']"
c7aed3283efdc1a0662bd8716abd9f7b1868488d,2022-03-12 11:08:33,Stefan Behnel,Add a test.,['tests/run/tryexcept.pyx']
7537910a2d2e3892359ef639fe9262f017634461,2022-03-12 11:05:59,Thomas A Caswell,"Import internal CPython frame header file in Python 3.11 (GH-4667)

In https://github.com/python/cpython/pull/31530
https://bugs.python.org/issue46836

the `_frame` struct was moved to an internal header, however the public API is
primarily read-only, and Cython needs to build PyFrameObjects so still import
the internal headers.

Also sets the Py_BUILD_CORE define for py311a6, trying to restrict it to the frame header.","['Cython/Utility/Coroutine.c', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Profile.c']"
024dcf63a8cb37f2d0ad9035a3d3420cc0b444c8,2022-03-12 10:58:51,da-woods,Issue tracker: Try to direct to cython-users before the issue template (GH-4665),['.github/ISSUE_TEMPLATE/config.yml']
db5d2c41de4426051cc616b91aaae0332c60f516,2022-03-08 09:45:57,Stefan Behnel,Clarify error message.,['Cython/Compiler/Nodes.py']
325641c5067163d5d20f3846e091a8cf18f1bfeb,2022-03-04 12:48:05,0dminnimda,"Make ctypedefed bint behave like normal bint (GH-4660)

Closes https://github.com/cython/cython/issues/3066","['Cython/Compiler/PyrexTypes.py', 'tests/run/ctypedef_bint.pyx']"
756b795532151f0a8bda7960fd91f4c663385ecf,2022-02-28 21:35:46,Stefan Behnel,Fix minimal compile mode. FlowControl.py also needs to be compiled since it depends on the C level interface of Visitor.py.,['setup.py']
11a9e73a4e67b162b10d3db70b513b4d14bb7a43,2022-02-26 20:17:04,0dminnimda,docs: Fix typo in external_C_code.rst (GH-4666),['docs/src/userguide/external_C_code.rst']
a40f34e01bdc1e6a67d85a5e1862b319e90d065b,2022-02-26 20:12:21,da-woods,"Fix reference counting in loops over memoryviews (GH-4663)

Memoryview temps weren't being properly incremented (at the start
of the loop) or decremented (at the end of the loop). They were,
however, decremented in the exception handling case.

Long-term I think we really should unify reference counting for
memoryviews further. It's *slightly* different from PyObjects
(mainly that it happens in wrapper functions rather than the
main function) and that leads to a large chance that it just
gets missed.

Fixes https://github.com/cython/cython/issues/4662","['Cython/Compiler/UtilNodes.py', 'tests/memoryview/memslice.pyx']"
612e985fa8dafbc7d7431ac8e50fd2de09b01318,2022-02-25 21:50:15,Stefan Behnel,Improve the bug/feature templates to provide a clearer hint why cython-users is a better place to get help than the bug tracker.,"['.github/ISSUE_TEMPLATE/bug_report.md', '.github/ISSUE_TEMPLATE/feature_request.md']"
759ea2c45c361f4934244c78652f7f1535b8682d,2022-02-25 21:42:37,Stefan Behnel,"Fix test by adding ""expected"" warnings. These should rather be avoided, but this is the easiest fix for now (and it's not the only ones).",['tests/compile/fused_redeclare_T3111.pyx']
a02b0842ccd2d39b753128fc8c7d58b178c58a08,2022-02-25 20:30:46,Stefan Behnel,"Also add a deprecation warning for the compile time DEF statement.

See https://github.com/cython/cython/issues/4310","['Cython/Compiler/Parsing.py', 'tests/run/ct_DEF.pyx', 'tests/run/ct_IF.pyx', 'tests/run/public_enum.pyx']"
eadc9bd042ba935bb45795c8a9ae3bfba5492efc,2022-02-25 08:06:45,Stefan Behnel,Add a comment about the way the Coverage plugin finds out what to report to coverage.py.,['Cython/Coverage.py']
b7ff8224f56af256245d691af589ab10126126d3,2022-02-25 15:45:28,0dminnimda,Turn the redeclaration of attributes as C methods into an error since it currently leads to difficult to predict behaviour. (#4661),"['Cython/Compiler/Symtab.py', 'tests/errors/redeclaration_of_var_by_cfunc_T600.pyx']"
97b8a0b9e9d9599f52d810b6f1ed52ebc1796918,2022-02-25 07:41:02,Stefan Behnel,Reorder a condition to move a potentially more selective (and simpler) one first.,['Cython/Compiler/ExprNodes.py']
ab03eb164c9bac4c27b7e0082dbfadaa2eb8b8e6,2022-02-24 18:23:00,Stefan Behnel,Merge branch '0.29.x',"['tests/run/cpdef_enums.pyx', 'tests/run/hasattr.pyx', 'tests/run/test_unicode.pyx']"
6a573cd8fc169f5e53ea7090dec7fe6512a3ff6a,2022-02-24 18:22:46,Stefan Behnel,Resolve some doctest issues in Python 3.11.,"['tests/run/cpdef_enums.pyx', 'tests/run/hasattr.pyx', 'tests/run/test_unicode.pyx']"
5eb78ca90d6f6b0eef405a6983ef3c633455e844,2022-02-24 16:13:43,Stefan Behnel,"Remove Stackless hack for looking up ""PyFrameObject.f_localsplus"" from Stackless 3.8 on. CPython never needed this.

Closes https://github.com/cython/cython/issues/4329","['.github/workflows/ci.yml', 'Cython/Utility/ObjectHandling.c']"
10621a0525ba58a87a31d9a2045732806eaf9fa0,2022-02-24 17:43:05,Stefan Behnel,"docs: Add an example on how to use verbatim C code to work around version specific struct fields.

See https://github.com/cython/cython/issues/4310","['docs/examples/userguide/external_C_code/struct_field_adaptation.h', 'docs/examples/userguide/external_C_code/struct_field_adaptation.pyx', 'docs/src/userguide/external_C_code.rst']"
bc43abf7bd2618543770d37597a527541795eb6b,2022-02-24 17:41:46,Stefan Behnel,"Add a deprecation warning to usages of the compile time ""IF"" statement.
See https://github.com/cython/cython/issues/4310","['Cython/Compiler/Parsing.py', 'tests/run/ct_IF.pyx']"
76e888e267f177126799c3b1981d62bc73204415,2022-02-24 15:48:27,Stefan Behnel,Merge branch '0.29.x',[]
01bca8285cb2f5caf9ddf49a8ec33a2581898402,2022-02-24 15:41:21,da-woods,"Correctly generate function definions in finally clauses (GH-4652)

This creates two copies of the function, one for the exception
case and one for the non-exception case. It's probably inefficient
but the simplest solution.

Fixes https://github.com/cython/cython/issues/4651.","['Cython/Compiler/Nodes.py', 'tests/run/tryfinally.pyx']"
bd487b7d5d69665aa87360bc935393e1504e3e1b,2022-02-24 15:41:21,da-woods,"Correctly generate function definions in finally clauses (GH-4652)

This creates two copies of the function, one for the exception
case and one for the non-exception case. It's probably inefficient
but the simplest solution.

Fixes https://github.com/cython/cython/issues/4651.","['Cython/Compiler/Nodes.py', 'tests/run/tryfinally.pyx']"
0ed163b311efa9ecb2071602c260853a8e02e250,2022-02-23 23:12:02,Matus Valo,docs: Explain GIL handling in pure.rst (#4650),['docs/src/tutorial/pure.rst']
c7792c1fcb2ce1e56758883746efd02bf1cda30d,2022-02-23 12:29:08,Stefan Behnel,"Fix indentation.

Closes https://github.com/cython/cython/issues/4655",['setup.py']
d1b9dda73b03b3e49af535a928900a576a79e1e1,2022-02-22 19:34:45,Stefan Behnel,"Add a ""minimal compile"" build mode that speeds up the compiler somewhat but keeps the number of compiled modules low.",['setup.py']
3b721b32380529360106071c89ce9b75120aa968,2022-02-19 14:17:51,Stefan Behnel,Try to fix test on Windows.,['tests/build/depfile_package.srctree']
8b3c37332a8be50233effd7fc0cba17279be4d5f,2022-02-19 14:17:51,Stefan Behnel,Try to fix test on Windows.,['tests/build/depfile_package.srctree']
11c943fbe919bd77501984d4c714feec0b022c2f,2022-02-19 14:08:27,Stefan Behnel,Simplify test command.,['tests/build/depfile_package.srctree']
a0777b2f984d3d1902886b4b61e19f5035cb284d,2022-02-19 13:09:30,Stefan Behnel,Remove dead code.,['Cython/Compiler/TypeSlots.py']
8a59142db687b733b4ffe55c40fa03dc132122c6,2022-02-16 23:21:13,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'runtests.py', 'tests/build/depfile_package.srctree']"
27b6709241461f620fb25756ef9f1192cc4f589a,2022-02-16 23:08:35,Stefan Behnel,Fix release date.,['CHANGES.rst']
d8d9606da77b1a6e881bfaebe7e7cf1a6a75504f,2022-02-16 23:05:08,Stefan Behnel,runtests: Print shard number also for each command in the EndToEnd test error output to make it easy to find in the logs.,['runtests.py']
62b7ac532d9201b5caf0f34471d5f4892b8a1b8c,2022-02-16 23:03:54,Stefan Behnel,Fix test on Windows.,['tests/build/depfile_package.srctree']
b6f927e4578ffe74339b53b1a31aa0a9d1206480,2022-02-16 22:53:45,Stefan Behnel,runtests: print the shard number in front of the test name to show which was the last test in case it hangs.,['runtests.py']
808fd6844132603765ad9568af0250bd6e148a95,2022-02-16 22:00:29,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'runtests.py', 'tests/build/depfile.srctree', 'tests/build/depfile_numpy.srctree', 'tests/build/depfile_package.srctree']"
6e2c8d0cddfc626e74728ece87b3974c4ffd5536,2022-02-16 20:52:40,Stefan Behnel,runtests: Improve exception output.,['runtests.py']
9494ec3b00dd07932571742c5aceb991a6fd6050,2022-02-16 20:43:06,Stefan Behnel,"runtests: Keep failing on test runner exceptions, because we can't continue without a test result.",['runtests.py']
2cf17f195c746ae0e9fd13840bec8d4a2f1afb23,2022-02-16 18:55:23,Stefan Behnel,Enable faulthandler around the test runs to get a notice on shard crashes.,['runtests.py']
f61e759dcc2fb5ab3e9398a43468d44b7a9a6818,2022-02-16 12:19:53,Stefan Behnel,Fix depfile tests on Windows.,"['tests/build/depfile.srctree', 'tests/build/depfile_numpy.srctree', 'tests/build/depfile_package.srctree']"
5ba24b45a3e4d5b49c0fb9590c3e36d12c54d174,2022-02-16 11:53:32,Stefan Behnel,Prepare release of 0.29.28.,"['CHANGES.rst', 'Cython/Shadow.py']"
6e56db7e7d75d05a699460419ccc0a978956a4b5,2022-02-15 20:34:23,Matus Valo,Remove unused imports (GH-4643),"['Cython/Build/Dependencies.py', 'Cython/Build/IpythonMagic.py', 'Cython/CodeWriter.py', 'Cython/Compiler/Builtin.py', 'Cython/Compiler/Code.py', 'Cython/Compiler/Dataclass.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Tests/TestTreeFragment.py', 'Cython/Compiler/Tests/TestTreePath.py', 'Cython/Debugger/Tests/test_libpython_in_gdb.py', 'Cython/Distutils/extension.py']"
4370a0bcb1d050b29f12a3949bc5a33043c795ef,2022-02-13 22:16:57,Stefan Behnel,docs: Fix some issues in the glossary.,['docs/src/userguide/glossary.rst']
f581ff4f33b9a65a514a580c78fd944e92e83ae2,2022-02-13 22:15:55,Stefan Behnel,docs: move the link to the glossary to the front page rather than hiding it in the user guide.,"['docs/index.rst', 'docs/src/userguide/index.rst']"
a8689df84bfb040ece30a408dffc36ae35b2105d,2022-02-11 17:56:18,Stefan Behnel,"docs: Make the ""dev version"" banner less intrusive. We *want* users to try it, after all.

See https://github.com/cython/cython/pull/4583#issuecomment-1036452181",['docs/_templates/layout.html']
4da1a1434ae7167f85624c159bf231b0fdd946b0,2022-02-11 17:58:45,0dminnimda,"Avoid reassignment to the `html_context` in docs/conf.py - fixes the look of the ""tabs"". (GH-4634)",['docs/conf.py']
827e5188cadb006d85b31702e32993c70f909bc2,2022-02-10 22:22:09,da-woods,"Stop cfunc/ccall/class applying to inner funcs/classes (GH-4575)

Fixes https://github.com/cython/cython/issues/4092

Nested cdef classes are not tested because they don't officially work
at this stage (see https://github.com/cython/cython/issues/4572).
It should be tested if/when they're fully supported.","['Cython/Compiler/Options.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Visitor.py', 'tests/run/pure_py.py']"
e190d8a827f6b034ced56c024a14f6418506aad0,2022-02-10 13:37:11,Stefan Behnel,"Limited API: Fix line number reporting in tracebacks that accidentally used 'c_line' instead of 'py_line'. In fact, we cannot currently show the C line, so disable C line reporting completely here.","['Cython/Utility/Exceptions.c', 'Cython/Utility/ModuleSetupCode.c']"
b1b23de4c7bb90db47353de04ba87c9bdb149890,2022-02-10 13:07:53,Stefan Behnel,"Follow PEP-484 and warn about ""func(x: list = None)"" without an explicit ""typing.Optional[]"" declaration.

See https://github.com/cython/cython/issues/3883","['Cython/Compiler/Nodes.py', 'tests/run/annotation_typing.pyx']"
a34d50d673dc91803e91022f7fe6a84b3685633b,2022-02-10 12:41:45,Stefan Behnel,Remove an unused function argument.,['Cython/Compiler/Nodes.py']
334a73833dae30cd8ff2a82c1574178e64c02016,2022-02-10 09:03:14,Stefan Behnel,Remove a dead Py<2.6 workaround for tuples previously not having an .index() method.,['Cython/Compiler/PyrexTypes.py']
366f49a0f07709687410231b7cdd4a2b82aa91c8,2022-02-09 18:34:31,Stefan Behnel,"Avoid an unnecessary inefficiency in a regex, although it is not relevant in practice since the regex is only applied to Cython's only C code.
Found by GitHub CodeQL.",['Cython/Compiler/Code.py']
3c19a9ca71f2888ed55a25c5efab6d8bb0ada2bd,2022-02-09 10:19:47,Stefan Behnel,"docs: More fixes, add a note about @auto_pickle() and ""__cinit__""","['docs/src/userguide/extension_types.rst', 'docs/src/userguide/special_methods.rst']"
48dbdf8e9642c1e0fcb3dd125892bb03568d4173,2022-02-09 10:06:17,Stefan Behnel,docs: Fix a typo.,['docs/src/userguide/special_methods.rst']
ef90eded8bc6e19d68c2163480c963fff3765cff,2022-02-09 10:05:58,Stefan Behnel,"docs: Reference the new section about ""__cinit__"" in a place where knowing the difference can help.",['docs/src/userguide/extension_types.rst']
01f291a8ca57d9ca91ca309839beb6449f9952ac,2022-02-09 09:58:47,Stefan Behnel,"Rewrite the section that describes the differences between __cinit__() and __init__(), to make it clearer when to use which.",['docs/src/userguide/special_methods.rst']
2a304b0f9e6c9a98f2a8a38d80404a34e6623cd8,2022-02-06 11:00:30,Matti Picus,Use context manager when opening files instead of leaving a file dangling open. (GH-4621),"['Cython/Parser/ConcreteSyntaxTree.pyx', 'pyximport/pyximport.py', 'pyximport/test/test_pyximport.py', 'pyximport/test/test_reload.py', 'runtests.py', 'tests/build/common_include_dir.srctree', 'tests/run/cpdef_pickle.srctree']"
2c7c53b4c7719b390e6c62ad945e0b27ef3551f4,2022-02-04 12:56:21,Matus Valo,"Add a ""dev version"" warning banner to the latest version of documentation (GH-4583)","['docs/_templates/layout.html', 'docs/conf.py']"
da6316769225f70c23cbcfd30e6718950c461bfe,2022-02-04 10:12:00,Stefan Behnel,Merge branch '0.29.x',[]
2d287a6191bbba1e120ba9240b24ce364c443204,2021-06-17 17:57:51,Matti Picus,"Restore old PyEval_EvalCode() signature for older versions of PyPy (GH-4236)

Partially reverts https://github.com/cython/cython/commit/1027db04fb7c5bbfea2b9bcdfce0b1f384e26a93",['Cython/Utility/Builtins.c']
21059e9b69105c239ca488d93d709ef634af23fe,2022-02-03 14:33:15,Stefan Behnel,"Make the extension types tutorial actually understandable by itself, without referring to obscure ""previous code"" and ""our integration example"" that come out of nowhere.",['docs/src/tutorial/cdef_classes.rst']
81212165bd61e9eaa1ed20903db693fcef3d60cc,2022-02-03 14:02:19,Stefan Behnel,Minor doc cleanups.,"['docs/src/tutorial/cdef_classes.rst', 'docs/src/userguide/language_basics.rst']"
b859cf2bd72d525a724149a6e552abecf9cd9d89,2022-02-02 22:41:45,Stefan Behnel,"Allow globally forcing C file regeneration by setting the env var CYTHON_FORCE_REGEN=1, e.g. from external build systems.","['CHANGES.rst', 'Cython/Build/Dependencies.py', 'tests/build/cythonize_newer_files.srctree']"
14150abda758ce19b6387fa877063f6d5f9a4584,2022-02-02 17:16:24,0dminnimda,"docs: pythonise ""Working with Python arrays"" (array.rst) (GH-4431)","['docs/examples/tutorial/array/clone.py', 'docs/examples/tutorial/array/overhead.py', 'docs/examples/tutorial/array/overhead.pyx', 'docs/examples/tutorial/array/resize.py', 'docs/examples/tutorial/array/safe_usage.py', 'docs/examples/tutorial/array/unsafe_usage.py', 'docs/src/cimport-warning', 'docs/src/tutorial/array.rst']"
ee041e75000aa5c53b86503a6e3b467e55cfb5e7,2022-02-02 02:30:56,Stefan Behnel,Update changelog.,['CHANGES.rst']
361467213819d2c24f4b16b0183abd0ef7c385aa,2022-02-02 02:24:45,Stefan Behnel,Merge branch '0.29.x',[]
79637b23da77732e753b1e1ab5669b3e29978be3,2022-02-02 02:23:34,Stefan Behnel,Always regenerate .c/cpp output files when changing the Cython version. This is probably what users expect since silently keeping outdated files is error prone.,"['Cython/Build/Dependencies.py', 'Cython/Compiler/Code.py', 'Cython/Utils.py', 'tests/build/cythonize_newer_files.srctree']"
bbac8b5476b1b97afcbac69e3079c11223911908,2022-02-02 01:49:46,da-woods,"Fix a large chunk of exc_info changes on 0.29.x (GH-4610)

By disabling ""CYTHON_FAST_THREAD_STATE"" and ""CYTHON_USE_EXC_INFO_STACK""

I think this still leaves some breakage in Coroutines.c but it's enough of a fix that Cython succeeds in building itself. Therefore I think it's worth doing now even if it doesn't fix everything.

Related to https://github.com/cython/cython/issues/4500",['Cython/Utility/ModuleSetupCode.c']
5a76c404c803601b6941525cb8ec8096ddb10356,2022-01-31 11:29:34,Stefan Behnel,Cleanup a Py2.6 relic.,['Cython/Compiler/Symtab.py']
f2e8333458df820eaa51e21a6493eb1198dc71bd,2022-01-31 10:18:46,Stefan Behnel,Add Cython.Utils to the list of compiled modules and include a faster @contextmanager for try-finally cases.,"['Cython/Tests/TestCythonUtils.py', 'Cython/Utils.pxd', 'Cython/Utils.py', 'setup.py']"
47c1d85d2b3eaa2d578ed0ca1a03ce26ffadf8b7,2022-01-30 19:53:25,Stefan Behnel,"Revert ""Fix some typos in apparently unused code.""

This reverts commit aaba122938f0837869d16a1fc8f5d8859d54bc62.",['Cython/Compiler/PyrexTypes.py']
0475c0729be7e3d4102a1055ea1b1375f00eedd2,2022-01-30 19:53:24,Stefan Behnel,"Revert ""Check for ""Optional[ctype]"" earlier because we need to make sure that ""Optional[int]"" etc. interprets ""int"" as (valid) Python int type and not (invalid) C int type.""

This reverts commit f73108cc1d459486a8040796ae2a3e7fc2964ff3.","['Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/errors/e_typing_optional.py']"
035690ca30e0d386a8f325e91471c3fe4aabed45,2022-01-30 19:53:22,Stefan Behnel,"Revert ""Allow any type in dataclasses.InitVar() again.""

This reverts commit cd5fb480975ccee61ea5e1a0e9a85b9469b36e4b.",['Cython/Compiler/Nodes.py']
e0436129d5264bb7f423f6d5ac4e1f19f246be5f,2022-01-30 19:53:18,Stefan Behnel,"Revert ""Fix refactor-after-test bug.""

This reverts commit 7914e3b3118c4298bfd8b3ed8343f977a91f59e5.",['Cython/Compiler/Nodes.py']
7914e3b3118c4298bfd8b3ed8343f977a91f59e5,2022-01-30 12:47:13,Stefan Behnel,Fix refactor-after-test bug.,['Cython/Compiler/Nodes.py']
cd5fb480975ccee61ea5e1a0e9a85b9469b36e4b,2022-01-30 12:32:47,Stefan Behnel,Allow any type in dataclasses.InitVar() again.,['Cython/Compiler/Nodes.py']
f73108cc1d459486a8040796ae2a3e7fc2964ff3,2022-01-30 11:59:19,Stefan Behnel,"Check for ""Optional[ctype]"" earlier because we need to make sure that ""Optional[int]"" etc. interprets ""int"" as (valid) Python int type and not (invalid) C int type.

See https://github.com/cython/cython/issues/3883","['Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/errors/e_typing_optional.py']"
aaba122938f0837869d16a1fc8f5d8859d54bc62,2022-01-30 11:09:51,Stefan Behnel,Fix some typos in apparently unused code.,['Cython/Compiler/PyrexTypes.py']
4225d7cc978e193b9eade24a1f51c0abf3355026,2022-01-29 23:57:33,Stefan Behnel,"Improve the error message for ""Optional[ctype]"". Previously, it failed complaining about ""or None"", which wasn't the actual syntax construct on user side.

See https://github.com/cython/cython/issues/3883","['Cython/Compiler/Nodes.py', 'tests/errors/e_typing_optional.py']"
a32e3fc45194e0d72e572ce27b0557ab2d011123,2022-01-29 23:23:21,Stefan Behnel,Update changelog.,['CHANGES.rst']
13f8cd750a2f66a5be3f48789cd966d3a1d471d1,2022-01-29 22:29:39,Stefan Behnel,"Give ""func(x: list = None)"" the same ""type allows None"" meaning as ""func(x: Optional[list])"".

See https://github.com/cython/cython/issues/3883","['Cython/Compiler/Nodes.py', 'tests/run/annotation_typing.pyx']"
102366d162e2c54ec628023bab8b1e7f836a3b6f,2022-01-29 16:06:55,da-woods,"Implement cdef dataclasses (GH-3400)

New decorator/function ""@cython.dataclasses.dataclass"" and ""cython.dataclasses.field()"" to mark dataclasses and their fields.

Tries to match the interface provided by a regular dataclass as much as possible.
This means taking the types from the dataclasses module if available (so they match exactly) or a fallback Python version that just implements the core parts (executed with ""PyRun_String()"" in the C source).

Use of placeholders in generated ""__init__"" code means the code in the C file isn't hugely readable. Probably not a huge issue, but don't really see a way round that.

As part of this I've also also implemented a Cython version of ""typing.ClassVar"". Although really designed for use with dataclasses it behaves sensibly when used in types in a normal cdef class. This is worth documenting more thoroughly.

Closes https://github.com/cython/cython/issues/2903","['Cython/Compiler/Builtin.py', 'Cython/Compiler/CythonScope.py', 'Cython/Compiler/Dataclass.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Naming.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Shadow.py', 'Cython/Utility/CommonStructures.c', 'Cython/Utility/Dataclasses.c', 'Cython/Utility/Dataclasses.py', 'docs/examples/userguide/extension_types/dataclass.pyx', 'docs/src/tutorial/pure.rst', 'docs/src/userguide/extension_types.rst', 'tests/errors/dataclass_e1.pyx', 'tests/errors/dataclass_e2.pyx', 'tests/errors/dataclass_e3.pyx', 'tests/errors/dataclass_e4.pyx', 'tests/run/cdef_class_dataclass.pyx', 'tests/run/ext_type_none_arg.pyx', 'tests/run/pep526_variable_annotations.py', 'tests/run/pep526_variable_annotations_cy.pyx', 'tests/run/pure_cdef_class_dataclass.py', 'tests/run/typing_module.py', 'tests/run/typing_module_cy.pyx']"
07f45205f46a6ab04e01f7c8244577fe41a0652f,2022-01-28 15:55:29,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
229a4531780863c8a5c311d6b3c70a545988f85f,2022-01-28 15:54:03,Stefan Behnel,Prepare release of 0.29.27.,"['CHANGES.rst', 'Cython/Shadow.py']"
e054ca10e49ca62d2116d975859aef3a7ccf0e61,2022-01-28 12:05:04,Stefan Behnel,Update changelog.,['CHANGES.rst']
addf39660d618590005c784da6bd9f1f757606d0,2021-12-18 19:58:03,Stefan Behnel,Remove test code that fails to compile in Py3.11 (and that isn't really worth testing).,['tests/run/longintrepr.pyx']
546765d8d070e824fe61e6137b01e0693952885d,2021-12-20 10:44:13,Stefan Behnel,Fix division-by-zero crash in tests when the C ompiler discards the computational body of a Cython coroutine.,['tests/run/line_profile_test.srctree']
cdad82d01479408701d6f29c6a8e271cb5169b36,2022-01-28 11:50:32,Evgeni Burovski,"Backport GH-4563 : generate dependency files (GH-4576)

Add a new command line option so that
$ cythonize -M foo.pyx
produces a file `foo.c.dep` with the dependencies of foo.pyx, in addition to `foo.c`.
Try to write relative paths as much as possible.

Backport of https://github.com/cython/cython/pull/4563","['Cython/Build/Cythonize.py', 'Cython/Build/Dependencies.py', 'tests/build/depfile.srctree', 'tests/build/depfile_numpy.srctree', 'tests/build/depfile_package.srctree']"
e30913d738d5d0d04379396ce98587f75b2bab1b,2022-01-15 21:02:02,Stefan Behnel,"Make the test files that depend on ""cythonarrayutil.pxi"" compilable by themselves, without the search directory setup of the test runner.","['tests/memoryview/cythonarray.pyx', 'tests/memoryview/memslice.pyx', 'tests/memoryview/numpy_memoryview.pyx', 'tests/run/fused_types.pyx']"
60d6e64a5bdb1b2e46b0a4819322492325696e43,2022-01-20 17:47:25,Stefan Behnel,Minot test cleanup.,['tests/run/exceptionrefcount.pyx']
7d95dd2ed8af5849cb8710761d4e5b5f922565c9,2022-01-22 16:12:40,Stefan Behnel,"Keep utility code names across type specialisations and show it in the C file instead of ""None"".",['Cython/Compiler/Code.py']
9f28d7d3693941f36ad637cbed651d23f832e8df,2022-01-23 21:45:32,Stefan Behnel,Remove imports and @asyncio.coroutine decorators from test that are gone in Python 3.11.,['tests/run/asyncio_generators.srctree']
7494be698b9f940b90919c5f5c3ca776ccb269f3,2022-01-25 11:17:50,Stefan Behnel,"Use ""Py_ssize_t"" instead of ""int"" for a node counter variable to avoid uselessly limiting its value range.",['Cython/Compiler/Visitor.py']
ad6dc605d85a9f2afedd478ee568920d2d4c03f1,2022-01-28 11:42:09,Stefan Behnel,Update changelog.,['CHANGES.rst']
1f5e17aac74f7846ea72ea035072493c30c8043a,2022-01-27 17:27:25,Stefan Behnel,Merge branch '0.29.x',[]
fe0eeeb3806e3e70670779b8fb3c7bc4f340e0b1,2022-01-27 00:34:32,da-woods,"Implement PEP 572: Named/Assignment Expressions (GH-3691)

Closes https://github.com/cython/cython/issues/2636","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FlowControl.py', 'Cython/Compiler/Lexicon.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/Symtab.py', 'tests/run/extra_walrus.py', 'tests/run/test_fstring.pyx', 'tests/run/test_named_expressions.py']"
cf88658ebb9a19716b2bd68fd8e2f52381ebbe0a,2022-01-26 12:52:38,Stefan Behnel,"Make it clear in the documentation how initial assignments work for local and global variables.

See https://github.com/cython/cython/issues/4594#issuecomment-1022092245",['docs/src/userguide/language_basics.rst']
a460542f4ffeccd39b0a57b7444470452534354a,2022-01-25 11:50:24,Stefan Behnel,"Disable parallel builds in the 0.29.x branch since they currently misbehave and fail in CI, trying to rebuild everything multiple times in parallel.",['Tools/ci-run.sh']
44b5b0d14d0f0d91f7826791d142d95906c74643,2022-01-25 11:40:01,Stefan Behnel,"Move the option to ""exclude"" children from the tree traversal from the ""VisitorTransform"" class up to its parent ""TreeVisitor"" class.","['Cython/Compiler/FlowControl.py', 'Cython/Compiler/Visitor.pxd', 'Cython/Compiler/Visitor.py']"
36e918fce7e130293e3da2795730d632aaa28372,2022-01-25 11:17:50,Stefan Behnel,"Use ""Py_ssize_t"" instead of ""int"" for a node counter variable to avoid uselessly limiting its value range.",['Cython/Compiler/Visitor.py']
776957022d062ed24edea192b719720118ee3576,2022-01-23 21:53:44,scoder,"Adapt to ""exc_info"" changes in CPython 3.11a4 (GH-4584)

Adapt to ""exc_info"" changes in CPython 3.11a4, where ""->exc_type"" and ""->exc_traceback"" are gone and now get inferred from ""->exc_value"".

Closes https://github.com/cython/cython/issues/4500","['Cython/Utility/Coroutine.c', 'Cython/Utility/Exceptions.c']"
9d038fb371ed7aeaea86347c9509610f6ad5d6f0,2022-01-23 21:45:32,Stefan Behnel,Remove imports and @asyncio.coroutine decorators from test that are gone in Python 3.11.,['tests/run/asyncio_generators.srctree']
dbb9aca0f1b5f841611bd3c2ad40bd2d31aa23a6,2022-01-22 16:12:40,Stefan Behnel,"Keep utility code names across type specialisations and show it in the C file instead of ""None"".",['Cython/Compiler/Code.py']
ca8ca6d8d7b52b676e11660a622628923fb8ea7f,2022-01-21 07:57:05,Stefan Behnel,Merge branch '0.29.x',[]
70c37a028a2aa0bcf4c3188ea486aa324c0cf054,2022-01-21 07:54:52,Stefan Behnel,"Avoid C compiler warning about uninitialised ""am_send"" slots in Py3.10+.","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c']"
310a631387332e105108ca84e51a29309f3d61c1,2022-01-21 07:54:52,Stefan Behnel,"Avoid C compiler warning about uninitialised ""am_send"" slots in Py3.10+.","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c']"
293fa610efae4478ae26228525b5286b86925fde,2022-01-20 17:47:25,Stefan Behnel,Minot test cleanup.,['tests/run/exceptionrefcount.pyx']
a448db45c9f638c384f869ec726ca8bc6e85a1ec,2022-01-16 10:16:57,Stefan Behnel,Merge branch '0.29.x',[]
b69c9efdf6f90fe39c9bf9ff7acce6a700d74407,2022-01-05 16:26:30,Stefan Behnel,"Make sure that we raise a TypeError for invalid numbers of arguments for range().
Cython incorrectly generated (optimised) range code for ""for i in range(1,2,3,4)"" as if it saw ""for i in range(1,2,3)"".
This PR deactivates this optimization when too many arguments are provided, to match the behavior of Python.
Original patch by Max Bachmann.

Closes https://github.com/cython/cython/pull/4550","['Cython/Compiler/Optimize.py', 'tests/run/for_in_iter.py']"
e4d9821fb417d08a3845f18ced5916ae29827dc4,2022-01-15 23:33:03,Stefan Behnel,"Remove outdated warning about OpenMP < 3.0. Even the now-EOL Docker images for manylinux2010 had that.

Closes https://github.com/cython/cython/issues/4574",['Cython/Compiler/Nodes.py']
79dd47049310c475ec24df9bd18928f6f52821a2,2022-01-15 23:33:03,Stefan Behnel,"Remove outdated warning about OpenMP < 3.0. Even the now-EOL Docker images for manylinux2010 had that.

Closes https://github.com/cython/cython/issues/4574",['Cython/Compiler/Nodes.py']
063a1661fa202a1f37c42dfc290d3a577a708ae6,2022-01-15 21:02:02,Stefan Behnel,"Make the test files that depend on ""cythonarrayutil.pxi"" compilable by themselves, without the search directory setup of the test runner.","['tests/memoryview/cythonarray.pyx', 'tests/memoryview/memslice.pyx', 'tests/memoryview/numpy_memoryview.pyx', 'tests/run/fused_types.pyx']"
a52b16bb9fe2c5ee6d4f15e4053654e2947d11e8,2022-01-15 20:58:44,Stefan Behnel,"Disable the ""dotted names not allowed"" warning for include files, which may contain arbitrary directory paths and not just plain module names.",['Cython/Compiler/Main.py']
9db1fc39b31b7b3b2ed574a79f5f9fd980ee3be7,2022-01-14 21:16:51,Evgeni Burovski,"Add depfile generation support to cythonize (GH-4563)

Add a new command line option so that
$ cythonize -M foo.pyx
produces a file `foo.c.dep` with dependencies of foo.pyx, in addition to `foo.c`.
Try to write relative paths as much as possible.

Closes https://github.com/cython/cython/issues/1214","['Cython/Build/Cythonize.py', 'Cython/Build/Dependencies.py', 'tests/build/depfile.srctree', 'tests/build/depfile_numpy.srctree', 'tests/build/depfile_package.srctree']"
96012f6186b6a2284853e90e87d2abe9399ebc44,2022-01-11 15:19:16,Stefan Behnel,Avoid misleading the C code formatter into adding an additional indentation level due to excess opening braces.,['Cython/Utility/Embed.c']
99ba29515d99b8ef20aa1c9d9960527058141a94,2022-01-09 18:48:22,Stefan Behnel,Avoid misleading the C code formatter into adding an additional indentation level due to an excess opening brace.,['Cython/Utility/Optimize.c']
1a31aadd98f50dfd63c2947cdffc9772b9e54390,2022-01-07 09:07:03,Stefan Behnel,Make it easier to report errors from srctree tests by adding the last output to the reported AssertionError.,['runtests.py']
ddaaa7b8bfe9885b7bed432cd0a5ab8191d112cd,2022-01-06 19:43:25,Stefan Behnel,"appveyor: Prevent the compiled Cython modules from being picked up during the build already by first compiling them completely before putting them into the source tree. On fork()-less Windows, late starting build processes could otherwise end up with partially compiled source trees.",['appveyor.yml']
642654c971c72f598c29838ea5b5cde243b8cf5c,2022-01-06 19:08:14,Stefan Behnel,Provide better debug output if a pyximport fails.,['pyximport/pyximport.py']
540a74f7eb4b456237065b55d13868339c302d1d,2022-01-06 19:04:58,Stefan Behnel,"Make the pyximport-pyimport tests more robust by testing that the file is compiled instead of looking at the ""__file__"" attribute.","['tests/pyximport/pyximport_pyimport.srctree', 'tests/pyximport/pyximport_pyimport_only.srctree']"
c60f7e253c01d5e877167ee452714f21de031553,2022-01-06 19:03:41,Stefan Behnel,Provide debug output in the pyximport tests.,"['tests/pyximport/pyximport_basic.srctree', 'tests/pyximport/pyximport_errors.srctree', 'tests/pyximport/pyximport_namespace.srctree', 'tests/pyximport/pyximport_pyimport.srctree', 'tests/pyximport/pyximport_pyimport_only.srctree', 'tests/pyximport/pyximport_pyxbld.srctree']"
ec54cccaaea97debf863a8514b526e0b7730191e,2022-01-06 18:49:36,Stefan Behnel,Avoid a circular import of the (compiled) FlowControl module.,['Cython/Compiler/FlowControl.py']
de9f7614962d77ad4115461750f5f167f97640d0,2022-01-06 18:33:35,Stefan Behnel,Update release date.,['CHANGES.rst']
46d7d9ce9098c87e9ef29300f68f440bbc24f40e,2022-01-06 18:07:14,Stefan Behnel,Prepare release of 3.0.0a10.,['Cython/Shadow.py']
040bc37f85bae003c989260671510c5580126dc5,2022-01-06 18:06:53,Stefan Behnel,Update changelog.,['CHANGES.rst']
0863210724064bb4397f694f3b637ac29f7d7d2f,2022-01-06 17:05:58,Stefan Behnel,Minor code simplification.,['Cython/Compiler/Pipeline.py']
e7a191e0adb403145835301f6532152e6e177c0c,2022-01-06 16:44:55,Stefan Behnel,"Avoid some useless overhead in ""inject_utility_code_stage"".",['Cython/Compiler/Pipeline.py']
e1e2b3bbc8bcbf5b88992a21fdcdb3c98b58bb74,2022-01-06 16:35:56,Stefan Behnel,"Revert ""Avoid some useless overhead in ""inject_utility_code_stage"".""

This reverts commit e9435cd92d3a060c1a204f57b9ee2ebb3a46988c.",['Cython/Compiler/Pipeline.py']
43b245137e141f9c35dc3d59a41aad426247d508,2022-01-05 16:26:30,Stefan Behnel,"Make sure that we raise a TypeError for invalid numbers of arguments for range().
Cython incorrectly generated (optimised) range code for ""for i in range(1,2,3,4)"" as if it saw ""for i in range(1,2,3)"".
This PR deactivates this optimization when too many arguments are provided, to match the behavior of Python.
Original patch by Max Bachmann.

Closes https://github.com/cython/cython/pull/4550","['Cython/Compiler/Optimize.py', 'tests/run/for_in_iter.py']"
ac0bf9e556947fe2ed3e6f28ee5a5e920d986d6b,2022-01-05 10:35:53,Stefan Behnel,Update changelog.,['CHANGES.rst']
e9435cd92d3a060c1a204f57b9ee2ebb3a46988c,2022-01-05 10:14:50,Stefan Behnel,"Avoid some useless overhead in ""inject_utility_code_stage"".",['Cython/Compiler/Pipeline.py']
f52c0a6a41563d9384e137fdb201099cc1861878,2022-01-05 09:18:41,Stefan Behnel,A function that is supposed to return something should return something.,['Cython/Compiler/Code.py']
87af081ce9465693fea441514ce57f8a94941dbb,2022-01-04 01:20:57,Stefan Behnel,Simplify some code.,['Cython/Compiler/Pipeline.py']
4cb7c99f8766be7317b74361c595b9e848c59cd1,2022-01-03 00:08:05,Stefan Behnel,Avoid unnecessary directives tracking in the WithTransform since it does not need it.,"['Cython/Compiler/ParseTreeTransforms.pxd', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Pipeline.py']"
db787a453996d7441f5791dd901b284b4cfbbfb9,2022-01-02 10:38:07,Stefan Behnel,Reduce code verbosity.,['setup.py']
ebd4d2d98459e94cc3d187556f7d19246d7ebe05,2022-01-02 10:29:48,Stefan Behnel,Speed up parallel builds of Cython a little by starting with the largest modules.,['setup.py']
e50ee3d8af26281da3ef4fa2ebc97b680a3f7a88,2022-01-02 09:32:04,Matus Valo,"Document @cython.compile (GH-4551)

Closes https://github.com/cython/cython/issues/2770",['docs/src/userguide/source_files_and_compilation.rst']
b4e91aa346dcea41f3e440113a0d92ea8139a23e,2022-01-02 09:24:32,Stefan Behnel,Add missing import in doctest when the module is compiled (and StringIO has become a global cdef variable).,['Cython/StringIOTree.py']
08ce728f81d320ae5bf44bbda0c670af0a4f3162,2022-01-02 08:17:58,Stefan Behnel,Compile the Cython.StringIOTree module by default to speed up the code generation a little.,"['Cython/StringIOTree.pxd', 'Cython/StringIOTree.py', 'setup.py']"
ad3fef8e2a58c6e8d74a9ed40b37cbc299975997,2022-01-01 17:12:53,Stefan Behnel,Print pipeline timings after test runs.,"['Cython/Compiler/Pipeline.py', 'runtests.py']"
316a3fb1fa3c2a010a60696f56893ff5dd99fbd0,2021-12-28 09:44:20,Matus Valo,Remove outdated Python 2.5 mention from special_methods.rst (GH-4538),['docs/src/userguide/special_methods.rst']
749fe583b5a0fc2afe1e5e4e87a6745443d4955d,2021-12-25 23:41:56,Stefan Behnel,Clean up individual child traversals in transforms using the new visitchild() method.,['Cython/Compiler/ParseTreeTransforms.py']
84ed66f4f4b01804bfc17993a090a14461666045,2021-12-25 23:41:40,Stefan Behnel,Fix new visitchild() transform helper method.,"['Cython/Compiler/Visitor.pxd', 'Cython/Compiler/Visitor.py']"
7f1347b1b3fe18daa55ab13601f62fad7987e5d3,2021-12-28 08:28:08,Max Bachmann,Fix some C++ template definitions in libcpp (GH-4531),"['Cython/Includes/libcpp/deque.pxd', 'Cython/Includes/libcpp/vector.pxd']"
b6a4215211839afaa850538cdbb065e3513e0dd0,2021-12-25 14:12:42,GalaxySnail,"Add `uio.pxd` and update some posix pxds (GH-4526)

* Add a wrapper for posix <sys/uio.h>
* Add a script to generate tests for posix pxds
* Generate `tests/compile/posix_pxds.pyx`
* Update fcntl.pxd to POSIX.1-2017
* Update urls for posix/mman.pxd
* Update urls for posix/resource.pxd
* Add url for posix/select.pxd, and remove a `const`
* Update stat.pxd to POSIX.1-2017
* Update url for posix/wait.pxd

Closes https://github.com/cython/cython/issues/4522","['Cython/Includes/posix/fcntl.pxd', 'Cython/Includes/posix/mman.pxd', 'Cython/Includes/posix/resource.pxd', 'Cython/Includes/posix/select.pxd', 'Cython/Includes/posix/stat.pxd', 'Cython/Includes/posix/uio.pxd', 'Cython/Includes/posix/wait.pxd', 'Tools/gen_tests_for_posix_pxds.py', 'tests/compile/posix_pxds.pyx']"
13046485d8ee4e7555b3d2acbb1dfc5ebcfc4317,2021-12-25 12:14:48,da-woods,"Avoid double redirect in old documentation (GH-4523)

Avoid pointing users to a link that just says ""this section was moved to..."". Just take them to the correct page first time.",['docs/src/reference/directives.rst']
8600bc1c84216e6a450e8b8f5c70b6cf12a1d42a,2021-12-25 12:12:39,Max Bachmann,"Add emplace_back to C++ vector declarations (GH-4527)

This definition could be improved when variadic templates are supported at some point, but since the types are not really relevant for Cython it should be fine to use C variadics here (especially since I do not expect that variadic templates will be supported anytime soon).

Closes https://github.com/cython/cython/issues/2171",['Cython/Includes/libcpp/vector.pxd']
c36aa2f83936e7b21c66a16616daf3406dde4a00,2021-12-25 12:07:02,Corentin Cadiou,"Allow default value for memory view (GH-4315)

Closes https://github.com/cython/cython/issues/4313","['Cython/Compiler/ExprNodes.py', 'tests/run/cyfunction_defaults.pyx']"
9b25e0d6060f438426770632dbb014c4c2ade3a9,2021-12-25 11:48:56,Stefan Behnel,Merge branch '0.29.x',[]
29ad96444b8b1a4f05a6ac2328fde01de4782691,2021-12-25 11:36:05,Matti Picus,Adapt to upcoming PyPy3.8/9 releases (GH4517),"['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'tests/build/module_api.srctree']"
d8bcbdacc4d2bafeaf45994c6c77e648b1ab7484,2021-12-25 11:36:05,Matti Picus,Adapt to upcoming PyPy3.8/9 releases (GH4517),"['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'tests/build/module_api.srctree', 'tests/run/posonly.py', 'tests/run/test_genericclass.py', 'tests/run/test_genericclass_exttype.pyx']"
cb5eb5a139cbefddffa54a7bddf64b3a03f349fd,2021-12-23 09:07:57,da-woods,"Fix cython.pointer() type usage in class annotations  (GH-4515)

Annotations attached to namenodes weren't correctly processed with ""InterpretCompilerDirectivesTransform""

Closes https://github.com/cython/cython/issues/4514","['Cython/Compiler/ParseTreeTransforms.py', 'tests/run/annotation_typing.pyx']"
9d60179a7265b2cbce5d8cea5535fa7e0b3f3fc9,2021-12-23 09:03:08,Stefan Behnel,"Add a `visitchild()` helper method to VisitorTransform that correctly reassigns the result, which is easily forgotten.","['Cython/Compiler/Visitor.pxd', 'Cython/Compiler/Visitor.py']"
958df064d6c95be73bb5323de1dfa405530665f0,2021-12-21 21:17:01,Stefan Behnel,Update changelog.,['CHANGES.rst']
7a63c85028cdf08a31f96c56473ce76bd7d3f44d,2021-12-21 20:56:33,Stefan Behnel,Merge branch '0.29.x',[]
af5b1ce600f096bffda790c75b89a99e55b78522,2021-12-21 20:49:37,Matti Picus,"Guard uses of tp_pypy_flags and tp_vectorcall on PyPy (GH-4509)

For PyPy3.8 (the current release is 7.3.7)

* PyPy<7.3.8 declares a struct with the last fields tp_finalize, tp_print, tp_pypy_flags
* PyPy>=7.3.8 will declare a struct with the last fields tp_finalize, tp_vectorcall, tp_print

PyPy3.9 (not yet released) will declare a struct with the last fields tp_finalize, tp_vectorcall, tp_pypy_flags

See https://foss.heptapod.net/pypy/pypy/-/issues/3618","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
a68ef915747e5318fe3ed0f21972bb71efe406d5,2021-12-21 20:49:37,Matti Picus,"Guard uses of tp_pypy_flags and tp_vectorcall on PyPy (GH-4509)

For PyPy3.8 (the current release is 7.3.7)

* PyPy<7.3.8 declares a struct with the last fields tp_finalize, tp_print, tp_pypy_flags
* PyPy>=7.3.8 will declare a struct with the last fields tp_finalize, tp_vectorcall, tp_print

PyPy3.9 (not yet released) will declare a struct with the last fields tp_finalize, tp_vectorcall, tp_pypy_flags

See https://foss.heptapod.net/pypy/pypy/-/issues/3618","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
14ec0d115a9f498d679c2e566b7d439d1aa9037b,2021-12-21 15:46:40,Matti Picus,Pin setuptools<60 to resolve CI build failures due to incorrect C compiler flags (GH-4510),"['.github/workflows/wheel-manylinux.yml', 'Tools/ci-run.sh']"
4c65833349b74c8cd5d173456f67da3570315b99,2021-12-21 15:43:42,Stefan Behnel,"Revert ""Try to resolve build failures by switching back to CPython's distutils instead of using the one in setuptools 0.60.""

This reverts commit 0ec33692458227b340da0c44b6ae53de79f259f1.","['.github/workflows/ci.yml', 'Makefile']"
0ec33692458227b340da0c44b6ae53de79f259f1,2021-12-21 14:53:06,Stefan Behnel,"Try to resolve build failures by switching back to CPython's distutils instead of using the one in setuptools 0.60.

See https://github.com/pypa/setuptools/pull/2896
See https://github.com/cython/cython/pull/4510","['.github/workflows/ci.yml', 'Makefile']"
12628a6b2763552a3b6da29e09dcd54dd1945865,2021-12-20 18:22:04,scoder,Use PyType_GetSlot() and friends in more places to reduce the special cases for type-specs / Limited-API (GH-4506),"['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/ModuleSetupCode.c']"
f372c5ab67c73a4c28e68e2aa8bee16a2ec0e4e1,2021-12-20 18:19:37,scoder,"Use thread-local storage for the global Errors state to allow threaded builds. (GH-4507)

Distutils uses threading internally.

Also silence some warnings about redefined classes and function signatures when setting up the builtin scope. This is at most a second-best solution since we may not notice legitimate bugs on our side this way. Better make sure we have good test coverage of builtins and related optimisations.

Closes https://github.com/cython/cython/issues/4503","['Cython/Compiler/Builtin.py', 'Cython/Compiler/Errors.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/Main.py', 'Cython/Compiler/Pipeline.py', 'Cython/Compiler/Symtab.py', 'Cython/TestUtils.py', 'tests/run/test_fstring.pyx']"
c6f5c5ddcc021099febae7cb1194fedea01fd056,2021-12-20 16:40:05,Matus Valo,"Make ""new_build_ext"" the new ""build_ext"" (GH-4498)

This also solves a difficulty with the Cython import in setuptools' build_ext. We need to inherit from the one in distutils, so that setuptools can inherit from us. That leads to a circular dependency that goes either way depending on which gets imported first by users, and in what way (from-import or module import). This is built to match the code in

https://github.com/pypa/setuptools/blob/9f1822ee910df3df930a98ab99f66d18bb70659b/setuptools/command/build_ext.py#L14-L21

Closes https://github.com/cython/cython/issues/3541","['Cython/Distutils/build_ext.py', 'docs/src/userguide/source_files_and_compilation.rst', 'pyximport/pyxbuild.py', 'setup.py', 'tests/build/build_ext_cython_c_in_temp.srctree', 'tests/build/build_ext_cython_cplus.srctree', 'tests/build/build_ext_cython_include_dirs.srctree']"
7fca8c861c9bc509869a4887179a0750eac290d3,2021-12-20 10:44:13,Stefan Behnel,Fix division-by-zero crash in tests when the C ompiler discards the computational body of a Cython coroutine.,['tests/run/line_profile_test.srctree']
dcf1062d981465337ca64bfe391e61125ed90792,2021-12-19 15:01:52,Stefan Behnel,Update changelog.,['CHANGES.rst']
3c69a1aab0c180aaf9a32d56bcf97fbe5b677ee4,2021-12-19 14:58:13,ax487,"Support ""__del__()"" to implement ""tp_finalize"" according to PEP-442 (GH-3804)

Closes https://github.com/cython/cython/issues/3612","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/TypeSlots.py', 'docs/src/userguide/special_methods.rst', 'runtests.py', 'tests/pypy_crash_bugs.txt', 'tests/run/pep442_tp_finalize.pyx']"
ba37c35ca4da7edd099ffa6832e23764b0bf9bd9,2021-12-18 20:05:48,da-woods,"Remove ban on assignment to reference (GH-3987)

Fixes https://github.com/cython/cython/issues/1863","['Cython/Compiler/ExprNodes.py', 'tests/run/lvalue_refs.pyx']"
ea43f8ef66a71a5f6c03a24bfd69d603dcd5388e,2021-12-18 19:59:14,Stefan Behnel,Update changelog.,['CHANGES.rst']
0996ac7233d0d3465c9ce96df7f293c06829741e,2021-12-18 19:58:03,Stefan Behnel,Remove test code that fails to compile in Py3.11 (and that isn't really worth testing).,['tests/run/longintrepr.pyx']
16a87284f482d420b3ee65273020f0fd0eebb3d0,2021-12-18 19:53:17,Stefan Behnel,Stop testing Py3.5 with type specs. It is already out of maintenance.,['.github/workflows/ci.yml']
fd6b4e4dddfe483b00a599d2ed8e189810e0bdbb,2021-12-18 18:49:05,da-woods,"Allow releasing the GIL in nogil functions (GH-4318)

Also adds a check whether we have the GIL before doing so. This
is important because Py_UNBLOCK_THREADS is documented as unsafe
if we don't hold the GIL.

Closes https://github.com/cython/cython/issues/4137","['Cython/Compiler/Code.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/nogil.pyx']"
62ff07378af0d78927fec7694afc0a33a5b227b3,2021-12-18 10:50:51,Stefan Behnel,Mark __Pyx_PyType_Ready() as (potentially) unused since it leads to warnings when using type specs.,['Cython/Utility/ExtensionTypes.c']
617a9592726e5d779a1de2973c83f510e0d4c7d6,2021-12-18 11:49:26,Syam Gadde,"Fix partial circular imports (GH-4392)

Follows the implementation in CPython, which does a lookup in sys.modules if the attribute lookup on a package fails.

Closes https://github.com/cython/cython/issues/4390","['Cython/Utility/ImportExport.c', 'tests/pypy2_bugs.txt', 'tests/run/partial_circular_import.srctree']"
210524ef3f2efc13ebe2f4846f5427c8ccfd7b4b,2021-12-17 09:30:39,Stefan Behnel,Fix typo.,['CHANGES.rst']
144546e12af7caea846ce8b96c11dc24821f10db,2021-12-17 09:28:43,Evgeny Yakimov,"Add std::optional declarations for C++17 (GH-3294)

Closes https://github.com/cython/cython/issues/3293","['Cython/Includes/libcpp/optional.pxd', 'tests/run/cpp_stl_optional.pyx']"
4da6a663adfdd90a9d636f43f77df92140afc221,2021-12-17 08:38:22,Stefan Behnel,Update changelog.,['CHANGES.rst']
f40b91af877c2768bfeceba24d924cbbce0b485c,2021-12-16 21:24:11,da-woods,"Enable initial testing with GraalPython (GH-4328)

Very little works at present, there looks to be huge memory-leaks,
and the test-suite runs very slowly. It definitely isn't worth adding
anything on Github Actions at this stage.

It's just designed to get over the initial hurdle so that it
can be tested and improvements can be made if anyone is
inclined.","['Cython/Utility/ModuleSetupCode.c', 'runtests.py', 'tests/build/common_include_dir.srctree', 'tests/graal_bugs.txt']"
7bdffa26abef94c0cab88193464f276b91b8ddd5,2021-12-16 09:09:13,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
3028e8c7ac296bc848d996e397c3354b3dbbd431,2021-12-16 09:03:25,Stefan Behnel,Update changelog.,['CHANGES.rst']
914bee4fa1a28e1b87fe9a5485490fc40420211b,2020-04-21 06:48:47,Stefan Behnel,"Add ""tp_pypy_flags"" field to PyTypeObject struct when compiling in PyPy 6.0+ in order to avoid C compiler warnings about an uninitialised struct field.","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
8daf640dbf18cb72a705630f7c0d6799bd0c8e6a,2021-12-16 07:31:25,Stefan Behnel,Prepare release of 0.29.26.,"['CHANGES.rst', 'Cython/Shadow.py']"
bebdd67b46db1e704a752fbc9978fb6625d084bd,2021-12-16 07:18:08,Stefan Behnel,Merge branch '0.29.x',[]
8e02ca09c26f7278c1535243f826e09b653e8ccc,2021-12-16 07:15:12,Stefan Behnel,"Revert ""Add tp_inline_values_offset to slot_table (GH-4472)""

This reverts commit 751532a56484475c3cc75a380dca978be8ffa693.","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
4ce2721e655b562a8d8ee0edaa37122a0bcb5de1,2021-12-16 07:14:03,Stefan Behnel,"Revert ""Add tp_inline_values_offset to slot_table (0.29.x) (GH-4473)""

This reverts commit f5aa00bbb1e8c513ac18700f757f72d469599d32.","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
9bac8a99e5d8b56224cfe305217ebeb591f838d6,2021-12-15 22:19:09,Matus Valo,"docs: Fix langage_basics example after enabling '-> object' as return type declaration (GH-4497)

See https://github.com/cython/cython/issues/2529",['docs/src/userguide/language_basics.rst']
5b325c98609a11e89c2d14f52afba25744a79379,2021-12-15 08:51:37,Stefan Behnel,Exclude a C++17 test (currently in PR #3294) on macOS since it suffers from the same incompatibility issues as the other C++17 tests.,['tests/macos_cpp_bugs.txt']
0f3759d9ecfb296b2aea67395e8debc31e41a07e,2021-12-15 08:38:45,Stefan Behnel,Remove relict from Py2/3 migration.,['runtests.py']
1faf51f0811ea49b25280957fb84ac731ac16320,2021-12-14 15:13:29,Arvind Natarajan,"Prevent in-list optimisation when the list contains starred expresssions (GH-4494)

Closes https://github.com/cython/cython/issues/3938","['Cython/Compiler/Optimize.py', 'tests/run/pep448_extended_unpacking.pyx']"
fcabbe3d8cff75a34cf1cda27c1f5d3fc37720e4,2021-12-14 15:13:29,Arvind Natarajan,"Prevent in-list optimisation when the list contains starred expresssions (GH-4494)

Closes https://github.com/cython/cython/issues/3938","['Cython/Compiler/Optimize.py', 'tests/run/pep448_extended_unpacking.pyx']"
6c802335f6079a56b85e503f49f7c99106fe5f4e,2021-12-14 13:49:17,Matus Valo,"Don't error when exception_check is set to True and return type is PyObject. (GH-4433)

With Cython syntax, we ignore the exception_check when a Python object is returned.
In pure Python mode, with a Python object type as return type, we reject it.
Instead of raising an error, we now just reset exception_check to False.

Found in https://github.com/cython/cython/issues/2529","['Cython/Compiler/Nodes.py', 'tests/errors/pure_errors.py', 'tests/run/pure_py3.py']"
ed6478f85d63f36ca9f396150781087a032aecdb,2021-12-14 13:34:52,Matus Valo,"Use cythonize() in pyximport (GH-4339)

Closes https://github.com/cython/cython/issues/2304","['Cython/Build/Dependencies.py', 'Cython/Distutils/build_ext.py', 'pyximport/pyxbuild.py', 'pyximport/pyximport.py', 'tests/pyximport/pyximport_pyimport_only.srctree', 'tests/pyximport/pyximport_pyxbld.srctree']"
98fc9f1a47fb3585cd03eff5c7672ce4ae9d7f1f,2021-12-14 13:20:32,da-woods,"Warn when cyfunction.__[kw]defaults__ is changed (GH-4121)

* Warn when cyfunction.__[kw]defaults__ is changed

Cython can't make use of these new defaults so it seems sensible
to alert the user (even if we're choosing to allow the assignment
for compatibility reasons).

I know the warning mechanism is somewhat heavy. I think this is
OK because it's unlikely that users will be repeatedly assigning
to these attributes in a time-critical loop.

Doesn't fix https://github.com/cython/cython/issues/2650, but hopefully alerts users to it.","['Cython/Utility/CythonFunction.c', 'tests/run/cyfunction_defaults.pyx']"
0dffecfa4407b761ba138a6bbcfcffcd65454aa8,2021-12-14 13:18:17,Matus Valo,Docs: Migrate profiling tutorial to pure Python (GH-4311),"['docs/examples/tutorial/profiling_tutorial/calc_pi.py', 'docs/examples/tutorial/profiling_tutorial/calc_pi_2.py', 'docs/examples/tutorial/profiling_tutorial/calc_pi_2.pyx', 'docs/examples/tutorial/profiling_tutorial/calc_pi_3.py', 'docs/examples/tutorial/profiling_tutorial/calc_pi_3.pyx', 'docs/examples/tutorial/profiling_tutorial/calc_pi_4.py', 'docs/examples/tutorial/profiling_tutorial/calc_pi_4.pyx', 'docs/examples/tutorial/profiling_tutorial/often_called.py', 'docs/examples/tutorial/profiling_tutorial/profile.py', 'docs/examples/tutorial/profiling_tutorial/profile_2.py', 'docs/src/tutorial/profiling_tutorial.rst']"
b2fac63f4a653bfd32eb4bba20bfb30b2ebad190,2021-12-06 17:03:20,da-woods,"Add PyMem_(Raw)Calloc to cpython.mem (GH-4086)

CPython added PyMem_RawCalloc and PyMem_Calloc in version 3.5.

The #defines of PyMem_RawMalloc, PyMem_RawRealloc, and PyMem_RawFree
are removed from Cython/Utility/ModuleSetupCode.c since the Raw versions allow
use without the GIL but the non-Raw versions do not.

Co-authored-by: William Schwartz <wkschwartz@gmail.com>

Closes https://github.com/cython/cython/pull/3050
Closes https://github.com/cython/cython/pull/3047","['Cython/Includes/cpython/mem.pxd', 'Cython/Utility/ModuleSetupCode.c', 'runtests.py', 'tests/run/cpython_capi.pyx', 'tests/run/cpython_capi_py35.pyx']"
369b41c5f5174ec1a0ee398fec93b114a61cce09,2021-12-06 16:54:40,Nicolas Hug,"[DOC] Add doc for memory views with custom numpy dtype (GH-2813)

Closes https://github.com/cython/cython/issues/2760","['docs/examples/userguide/memoryviews/custom_dtype.pyx', 'docs/src/userguide/memoryviews.rst']"
f965f790de4af4d75dbb61ba64b4a5c355d72a87,2021-12-06 16:47:06,da-woods,"Disabled embed test from the docs on Py3.4 (GH-4130)

It requires Py_DecodeLocale which appears in 3.5. This is causing
it to fail on Windows. It's somehow passing on Linux for reasons
that I don't understand (but it really shouldn't be)",['runtests.py']
3226074e9babe86da1b235fcec6905ad1eef12f2,2021-12-06 16:40:19,da-woods,"Ban templating C++ classes with reference counted types (GH-4337)

Specifically this disallows memoryviews, but it extends to any future type that Cython has to generate manual reference counting code for.

Closes https://github.com/cython/cython/issues/3085","['Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'tests/errors/cpp_object_template.pyx']"
254ea20eafda55ac775833c5949f0e5c9c63ca4f,2021-12-06 16:32:50,da-woods,"Support cpp_locals and std::move on prange temps (GH-4358)

Fixes https://github.com/cython/cython/issues/4354","['Cython/Compiler/Nodes.py', 'tests/run/cpp_locals_parallel.pyx']"
56a5c9ecaa37410e2d4524c993cbfdafa5ec6a84,2021-12-06 16:27:59,da-woods,"Remove PyPy bugs tests, now that PyPy runs them on their side (GH-4486)

As suggested in https://github.com/cython/cython/pull/4471#issuecomment-979489947
I don't think that we're getting any benefit from running the pypy
known bugs test as part of the CI (and it's causing minor problems).",['.github/workflows/ci.yml']
de98ea0571f240bb101af1fb6bf55cb255b1e344,2021-12-06 12:30:04,Stefan Behnel,Merge branch '0.29.x',"['.github/workflows/wheel-manylinux.yml', 'CHANGES.rst', 'Makefile']"
20b3d5b5bd1e641781d994bfcac59d39bac2b999,2021-12-06 12:19:14,Stefan Behnel,Clean up CFLAGS/LDFLAGS setup in wheel build.,['Makefile']
fc3685075dc9750fb5c849c0da2d84fe50f6b566,2021-12-06 12:14:13,Stefan Behnel,"Update release date, now that it took a little longer.",['CHANGES.rst']
488e21a34259258210f0be92c58618e1ea8a928f,2021-12-06 10:55:56,Stefan Behnel,Also upload the musllinux wheels to GH Releases.,['.github/workflows/wheel-manylinux.yml']
4c4585ce459e258b70dbff6765e841685d4e19fd,2021-12-06 09:59:51,Stefan Behnel,Also upload the Python tgz and wheel to GH Releases.,['.github/workflows/wheel-manylinux.yml']
b2780f23a1209e83fd60ca22e4e0b8d051255e6d,2021-12-06 07:37:40,Stefan Behnel,Add more wheel targets and use the normal Makefile wheel build for everything.,"['.github/workflows/wheel-manylinux.yml', 'Makefile']"
aa0a4111abe222e577062f0b122b3088fd521d0d,2021-12-05 20:49:50,Stefan Behnel,Use newer GH wheel build action to make it work with Py3.10.,['.github/workflows/wheel-manylinux.yml']
5a2df057b11e6d997c37c56e18ff08d8e8e0b4ae,2021-12-05 20:47:23,Stefan Behnel,Fix wheel upload in release build.,['.github/workflows/wheel-manylinux.yml']
9f8d32bc9315e73b0b1544866fb05c2372b9f464,2021-12-05 09:34:36,Marius Wachtler,"pyston support: backport memory corruption fix GH-4200 to 0.29.x branch (GH-4488)

Fixes an issue which Pyston triggers.
See https://github.com/cython/cython/issues/4200",['Cython/Utility/ExtensionTypes.c']
08af86a9ea405439f4a3dcf75eb4c084b7880b3d,2021-11-23 15:40:51,da-woods,"Fixed uninitialized test on 3.11 (GH-4474)

Exception messages had changed a little",['tests/run/uninitialized.py']
44e8a6564fcebbc6b3e7f7be72c2b14fcc10bf5e,2021-12-05 09:49:38,Stefan Behnel,Update changelog.,['CHANGES.rst']
7c82aa577a4c99ada54d2f8fe443cdc08561e0c3,2021-05-02 14:24:11,Stefan Behnel,Let a tracing test run slower to prevent div-by-zero crashes in line_profiler due to measured zero runtime.,['tests/run/line_profile_test.srctree']
864897c7d7a03031b45d44894ba64d3fcbb5839b,2021-11-24 10:08:07,da-woods,"Disable USE_UNICODE_WRITER for Py3.11 (GH-4480)

Python 3.11 hid _PyLong_FormatAdvancedWriter and
_PyFloat_FormatAdvancedWriter. I've disabled USE_UNICODE_WRITER
for the moment but I suspect we want to find replacements in the longer term.",['Cython/Utility/ModuleSetupCode.c']
0b86d1515c6794c37cf1bec6465548592f71e847,2021-12-05 09:27:31,Stefan Behnel,Prepare release of 0.29.x.,['Cython/Shadow.py']
751532a56484475c3cc75a380dca978be8ffa693,2021-12-05 09:35:48,da-woods,"Add tp_inline_values_offset to slot_table (GH-4472)

To remove a compiler warning since this slot was added in 3.11a2.","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
146f2c0e9854ba2909f8e900567a487c2ac86871,2021-12-05 09:34:36,Marius Wachtler,"pyston support: backport memory corruption fix GH-4200 to 0.29.x branch (GH-4488)

Fixes an issue which Pyston triggers.
See https://github.com/cython/cython/issues/4200",['Cython/Utility/ExtensionTypes.c']
f5aa00bbb1e8c513ac18700f757f72d469599d32,2021-12-05 09:30:11,da-woods,"Add tp_inline_values_offset to slot_table (0.29.x) (GH-4473)

To silence a compiler warning since it was added in Python 3.11a2.

For 0.29.x branch only.","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
085cf8295f70e4d1ae4f321d33db10640339d9c1,2021-12-05 09:26:16,Stefan Behnel,Update changelog.,['CHANGES.rst']
3edcef40938638accb60526c622b4a21f4fc7e9b,2021-11-25 08:37:33,da-woods,"Exceptions.c: use PyCode_NewEmpty() in Py3 instead of PyCode_New() (GH-4479)

With reference to https://github.com/cython/cython/issues/4365#issuecomment-977023011
in Python 3 PyCode_NewEmpty does everything we need to set
exception traceback code objects.

This change is probably only a real improvement on Py3.11 onwards
(where the replacement for PyCode_new is currently pretty slow).
On earlier version it'll probably be fairly similar (maybe one extra allocation for the cline case?)",['Cython/Utility/Exceptions.c']
d3da1e8147581b06fc23c056cbff575c751e84b7,2021-11-30 16:16:38,Stefan Behnel,Update changelog.,['CHANGES.rst']
93e35ea191c19c1855a03b3cf9d87a6c0de12718,2021-11-29 08:21:49,da-woods,"Recategorize a few pypy bugs, fix some others (GH-4485)

""Fixes"" a few bugs that are just caused by very small implementation
details, recategorize some others (e.g. those that cimport array
are not expected to ever work)","['tests/pypy2_bugs.txt', 'tests/pypy_bugs.txt', 'tests/pypy_implementation_detail_bugs.txt', 'tests/run/matrix_multiplier.pyx', 'tests/run/test_genericclass.py', 'tests/run/test_genericclass_exttype.pyx', 'tests/run/unicodemethods.pyx']"
43fbed5c38291b6bbb84bfa6261de581bc547f31,2021-11-26 13:19:06,da-woods,"Remove warning from unused temp (GH-4482)

Follow up to https://github.com/cython/cython/pull/4453 (01d323abea91f8b75caffa452f57320b06a57e9e).
That PR creates a temp that's only used in the limited API
(and therefore causes warnings on all other paths)",['Cython/Compiler/ModuleNode.py']
2a62c617066d57229b7f9adf4eafb2cd2ce44456,2021-11-25 11:00:22,da-woods,"Disable pycontextvar test on PyPy (GH-4471)

Now that they've implemented the PyContextVar C API it segfaults instead of just failing.","['tests/pypy_bugs.txt', 'tests/pypy_crash_bugs.txt', 'tests/run/pycontextvar.pyx']"
5b67fabab1e41bf43ff14422850a15c3823b7499,2021-11-25 09:49:32,Matti Picus,PyPy: do not call __Pyx_Coroutine_del (tp_finalize) since it resurrects dead objects (GH-4477),"['Cython/Utility/Coroutine.c', 'tests/pypy_bugs.txt', 'tests/pypy_crash_bugs.txt']"
59e6c294d10a487bed24cd3505e472a5cb24aafe,2021-11-25 08:37:33,da-woods,"Exceptions.c: use PyCode_NewEmpty() in Py3 instead of PyCode_New() (GH-4479)

With reference to https://github.com/cython/cython/issues/4365#issuecomment-977023011
in Python 3 PyCode_NewEmpty does everything we need to set
exception traceback code objects.

This change is probably only a real improvement on Py3.11 onwards
(where the replacement for PyCode_new is currently pretty slow).
On earlier version it'll probably be fairly similar (maybe one extra allocation for the cline case?)",['Cython/Utility/Exceptions.c']
002e7c6ffd619a388b34055ca0617881969b4ff0,2021-11-24 10:17:07,da-woods,"Clean up memoryview reference counting on error (GH-4476)

Fixes https://github.com/cython/cython/issues/4296

If there was an error in preparing the function arguments after a
memoryview had already been created, then the memoryview was not
cleaned up correctly.

(This leaves it in the slightly odd position where memoryviews
are cleaned up in the wrapper function on failure, but in the
main function on success. I kind of think it'd be better to clean
them up in the wrapper function in both cases, but I'm reluctant
to mess with a system that largely works.)","['Cython/Compiler/Nodes.py', 'tests/memoryview/memoryview.pyx']"
31fc04900fbf7130c53168f031c8357cdb43885f,2021-11-24 10:08:07,da-woods,"Disable USE_UNICODE_WRITER for Limited API and Py3.11 (GH-4480)

For the Limited API, I'm not sure why USE_UNICODE_WRITER was ever
the default - PyObject_Format() is part of the Limited API so
should clearly be preferred.

Python 3.11 hid _PyLong_FormatAdvancedWriter and
_PyFloat_FormatAdvancedWriter. I've disabled USE_UNICODE_WRITER
for the moment but I suspect we want to find replacements in the longer term.",['Cython/Utility/ModuleSetupCode.c']
3e2f28a328afc729158f31f0ab5320802c4cc9f2,2021-11-23 15:40:51,da-woods,"Fixed uninitialized test on 3.11 (GH-4474)

Exception messages had changed a little",['tests/run/uninitialized.py']
e337825cdcf5e94d38ba06a0cb0188e99ce0cc92,2021-11-23 13:55:58,da-woods,"Disable Cython copy of trashcan implementation in Py3.8+ (GH-4475)

If I understand correctly, the Cython-specific reimplementation
of trashcan isn't needed of Python 3.8+ (because the patch it
was based on was merged into Python). Therefore on these versions
it can be disabled and the Python macros used instead.

This is specifically needed for Python 3.11 since it removes or
hides functions that are used in the Cython reimplementation.
However, I've gone back further.",['Cython/Utility/ExtensionTypes.c']
cdc73ed2fd8b4948d201368401da31c4675861ac,2021-11-23 13:38:48,Matti Picus,PyPy does not implement PyCode_NewWithPosOnlyArgs() (GH-4478),['Cython/Utility/ModuleSetupCode.c']
1f0f5f360f8835728c2b24f17e1c3434ca81c352,2021-11-18 17:34:45,da-woods,"Make self argument for binops typed (GH-4436)

The type for the self argument for binops depends on the compile
directives. Therefore it needs a set of type slots that depends
on the compiler directives.

I've therefore got rid of the big static list of typeslots in
TypeSlots.py in favour of a class that defines them all (and
can be initialized with suitable compiler directives as needed).
This involves moving a static dictionary and list out of the
global scope too, so that they too can be part of the class.
The passing of the dictionary and list to all the constructors
is a bit awkward

Fixes https://github.com/cython/cython/issues/4434","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/TypeSlots.py', 'Cython/Compiler/Visitor.py', 'docs/src/userguide/migrating_to_cy30.rst', 'tests/run/binop_reverse_methods_GH2056.pyx']"
01d323abea91f8b75caffa452f57320b06a57e9e,2021-11-18 17:24:49,da-woods,"Only set HAVE_VECTORCALL flag when using vectorcall (GH-4453)

Before this the _Py_TPFLAGS_HAVE_VECTORCALL was set all the time
when using the limited api, but a CyFunction never sets up a
vectorcall function. This caused basically all function calls to
crash when binding=True with the limited API.

Also removes the premature refnanny usage when setting up the module.","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/CythonFunction.c']"
b1f6f207757214e5b184694b1a52e29c6df539d2,2021-11-18 17:20:34,Jonathan Helgert,"Add merge and set operations of the C++ algorithm library (GH-4462)

Disable on macOS due to bug in Apple clang++. See https://github.com/cython/cython/pull/4448#issuecomment-964405071","['Cython/Includes/libcpp/algorithm.pxd', 'tests/macos_cpp_bugs.txt', 'tests/run/cpp_stl_algo_sorted_ranges_other_ops.pyx', 'tests/run/cpp_stl_algo_sorted_ranges_set_ops.pyx']"
e9503188b27cff99bdb42d882a6fcd95be8daf40,2021-11-18 17:16:42,Stefan Behnel,Merge branch '0.29.x',['Cython/Utility/Coroutine.c']
f100ead203382bd2e904bcfdbe347673f5633770,2021-11-18 17:09:24,Stefan Behnel,Fix unittest method usage that was long deprecated and removed in Py3.11.,['tests/run/test_grammar.py']
e138a8467bfbb0b296d4013b3288bfe9589ff453,2021-11-18 17:05:52,da-woods,"Get 0.29.x working on Python 3.11 (GH-4465)

* Initial support for Python 3.11 (GH-4414)

https://github.com/cython/cython/issues/4414

* Add a basic replacement for PyCode_New().

An optimized versions would be nice, but this is intended to work sufficiently to start testing. Also, CPython 3.11 might actually add a new C-API function to simplify setting the current code position. That might be used instead.

* Disable introspection of frame object with vectorcall

This feature looked to only be used for early Python versions that don't have the full vectorcall protocol (and the contents of the frame object are changed in Python 3.11).

* Use new C-API function to get the current frame on Python 3.11 alpha (GH-4427)

Use the accessor function instead of the direct struct member (which is now the wrong type).

https://github.com/cython/cython/issues/4427
Closes https://github.com/cython/cython/issues/4416

* Fix number of arguments

* Disable CYTHON_FAST_PYCALL for 3.11 in Cython 0.29.x due to non-trivial incompatibilities.

* Remove remanent of 3.8alpha/beta workaround for PyCode_New().","['Cython/Utility/Coroutine.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c']"
41d65a727220ddc6d7877c4816900c6afc763d09,2021-05-23 20:58:12,Max Bachmann,Enable usage of std::move() only in the supported versions of MSVC  (GH-4191),['Cython/Includes/libcpp/utility.pxd']
5e8d38e88513c9fd58506264c66a71df3fe55aa0,2019-03-14 22:48:45,Stefan Behnel,Fix some deprecated unittest method usages.,"['Cython/Build/Tests/TestInline.py', 'Cython/Build/Tests/TestIpythonMagic.py', 'Cython/Compiler/Tests/TestBuffer.py', 'Cython/Compiler/Tests/TestMemView.py', 'Cython/Compiler/Tests/TestParseTreeTransforms.py', 'Cython/Compiler/Tests/TestTreeFragment.py', 'Cython/Tests/xmlrunner.py']"
ff823e5ddf278d2ff4d430e67b192dc67cd684df,2021-10-17 17:51:08,da-woods,"Import TextTestResult in test runner instead of _TextTestResult (GH-4415)

All the versions we currently test are new enough that the alias is no longer necessary.","['Cython/Tests/xmlrunner.py', 'runtests.py']"
889c6f19d4c7cce5a328d3756a424c968bacada3,2021-10-01 09:22:36,da-woods,"Change gcc version check in test runner to a numeric comparison (GH-4359)

The string comparison was reporting '11' < '4' (so OpenMP tests were being skipped on GCC 11)",['runtests.py']
bdbfdf6e396349316d154dcfdda5681ebc331c3c,2021-11-18 09:42:19,Stefan Behnel,Merge branch '0.29.x',[]
ff712a9033423e078df5e7bd97f94e93afa0bf1a,2020-04-10 17:19:02,Stefan Behnel,Clean up some code in cython.inline() implementation.,['Cython/Build/Inline.py']
6b989c19dc342d044499987832e1e7f8624960c5,2021-11-18 09:18:51,Mike Taves,Add Python 3.10 classifier to setup.py metadata (GH-4468),['setup.py']
6f0b2d77bbbb042c6fc192e373d802186e9a49cb,2021-07-26 08:59:39,Stefan Behnel,Fix some imports.,['Cython/Build/Inline.py']
2b1e743b9c736ec41e92b197eb709db0427558b4,2021-11-16 12:18:16,Stefan Behnel,Merge branch '0.29.x',[]
618f1bf8c15618ac1c834c7d1707738ec6f0e39a,2021-11-08 08:43:33,Stefan Behnel,"Avoid C compiler warnings about implicit type conversions (on Windows, long != Py_ssize_t).",['Cython/Compiler/Scanning.pxd']
199b42e6c359b616a20d7193af3f6f964368718d,2021-11-16 12:15:34,Stefan Behnel,[0.29.x only] Ignore docs build failures. Currently fails due to incompatible Sphinx dependencies.,['Tools/ci-run.sh']
fca9a172592a6f51c85b40c88663c76ba56d6758,2021-07-26 08:38:27,Stefan Behnel,Add missing attribute declaration for FunctionState class.,['Cython/Compiler/Code.pxd']
ca6cda622f8b505b427e0067a24a54a07a8afb1d,2020-05-29 11:24:45,da-woods,"Small changes to get `--cython-compile-all` working again (GH-3650)

Fixes https://github.com/cython/cython/issues/3647","['Cython/Build/Dependencies.py', 'Cython/Compiler/ParseTreeTransforms.py']"
26d4004355cf28522acdd983ba2119be6e1781bb,2021-11-16 11:43:28,Stefan Behnel,[0.29.x only] Remove CI build targets that only work in master.,['.github/workflows/ci.yml']
0ea0efc06270ba5cc13339fa9cadbc30bd4f1a55,2021-11-16 11:38:35,Stefan Behnel,Add specific test requirements file for Py3.4.,['test-requirements-34.txt']
6f6c445399c56e942870e99c8ad83fa6fed2f4dd,2021-05-14 09:50:46,Stefan Behnel,Test: use newer NumPy version in recent Python versions.,['test-requirements.txt']
f855ff54e1b3333320504f0ade370d3979a91c7e,2021-10-24 19:27:44,Stefan Behnel,Use newer test dependencies in Py3.6+. (Excluding 3.10 for now to give the projects a bit more time.),['test-requirements-cpython.txt']
6fae84ea6fed2c794cef55c3ff4754cca94f0e70,2021-11-16 09:52:37,Stefan Behnel,Add Github Actions workflow scripts.,"['.github/workflows/ci.yml', '.github/workflows/wheel-manylinux.yml', 'Tools/ci-run.sh']"
db93e5e7ef6ac1c57254967555ce467a88963fa0,2021-05-18 09:55:29,Stefan Behnel,Disable some plain Python (non Cython related) tests that fail in Py3.10 due to changed error messages.,['tests/run/test_exceptions.pyx']
08f33ef76e289845b026ff00b566e174678fd84a,2021-11-13 14:20:58,Julien Jerphanion,"docs: Add a Performance section for Typed Memoryviews (GH-4464)

Originally discussed here:
https://groups.google.com/g/cython-users/c/rU0_mt3Vgn0",['docs/src/userguide/memoryviews.rst']
b75af38ce5c309cd84c1835220932e53e9a9adb6,2021-11-11 14:07:50,Johannes Mueller,"[cython-mode.el] Fix endless loop reported in #3218 and other bugs around it (GH-4460)

The function `(cython-current-defun)` of `cython-mode.el` had some issues:

* ran into an endless loop
* for `cdef`s and `cpdef`s it picked the function type rather than the function name.
* did not properly handle nested functions

Closes https://github.com/cython/cython/issues/3218",['Tools/cython-mode.el']
ee7f61a5200fa54664fcc27b18ba06613bd288b0,2021-11-11 14:03:41,Jonathan Helgert,"Add missing min/max, comparison and permutation operations of C++ algorithm library (GH-4448)

Tests are disabled on macOS+clang (failing with Apple clang++ 12) but appear to work fine on gcc-11.","['Cython/Includes/libcpp/algorithm.pxd', 'tests/macos_cpp_bugs.txt', 'tests/run/cpp_stl_algo_comparison_ops.pyx', 'tests/run/cpp_stl_algo_minmax_ops.pyx', 'tests/run/cpp_stl_algo_permutation_ops.pyx']"
3f56484704742c1af33c9737642125c55b0634d5,2021-11-08 09:05:54,da-woods,"Use new C-API function to get the current frame on Python 3.11 alpha (GH-4427)

Use the accessor function instead of the direct struct member (which is now the wrong type).

Closes https://github.com/cython/cython/issues/4416",['Cython/Utility/Coroutine.c']
8d2df028bf9536942b60670bf0aa80d6acc7464a,2021-11-08 09:00:13,Max Bachmann,Remove unreachable code in Utility function (GH-4458),['Cython/Utility/ObjectHandling.c']
b96ae4d9d5c6c4b1cf2adf8bc0f88c49347da2ab,2021-11-07 17:09:18,Segev Finer,"Make coverage.py handle ""stringsource"" better by making it clear that it is not a file name (GH-4440)

Having a code object with `co_filename` set to just ""stringsource"" (e.g. when using memory views or auto-pickling), causes coverage.py to think that ""stringsource"" is a relative path to an actual file. The convention is to wrap such fake paths with angle brackets, which coverage.py correctly recognizes.

You will recognize this as the following error, e.g. when running ""coverage html"":
    No source for code: '.../stringsource'.
    Aborting report output, consider using -i.","['Cython/Compiler/Scanning.py', 'tests/run/coverage_cmd.srctree']"
ef5e54e6d644e59e2669c27de7fac2589618a58a,2021-11-07 16:23:36,Naelson Douglas C. Oliveira,Replace a mutable default argument with a None default and check since it is not intended to be mutated (GH-4435),['runtests.py']
f848bdf69717e68b919ef7a43b651f77bf4fb980,2021-11-07 09:41:33,Stefan Behnel,Merge branch '0.29.x',['Cython/Utility/Exceptions.c']
6bfd88fd818aaa254e489c282ddf6f84c79deabb,2020-06-04 05:55:43,Stefan Behnel,"Avoid ""possible loss of data"" warning in MSVC by adding redundant casts to code that gets discarded later.","['Cython/Utility/Overflow.c', 'Cython/Utility/TypeConversion.c']"
100a53fff33a8ff706c713ee0b7260a0209967a1,2018-12-10 10:54:20,Robert Bradshaw,"Non-int conversion to Py_hash_t.

Still requires the more conservative __index__ here rather than a possibly
truncating __int__ because this is used in a context where floating point
values should probably be treated specially.

This fixes Github issue #2752.","['Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/TypeConversion.c', 'tests/run/py_hash_t.pyx']"
8235d1c98aede02dcf97b36f4d7ccb5703c39ce1,2021-11-07 09:18:29,Stefan Behnel,Explicitly ignore an error return value since we're resetting the exception state afterwards.,['Cython/Utility/Exceptions.c']
0414b5656660eaf9f8b76808f07cd0510f7fb9ee,2021-11-06 21:24:31,Max Bachmann,"Use PyContextVar_Get() backport before PyPy 7.3.6 (GH-4454)

PyContextVar_Get() was added in PyPy 7.3.6.
https://foss.heptapod.net/pypy/pypy/-/blob/branch/default/pypy/doc/release-v7.3.6.rst",['Cython/Includes/cpython/contextvars.pxd']
019c334237b30a909e2ffc7ae82507b216af6703,2021-11-05 08:44:10,Mike Taves,Add Python 3.10 to build matrix and supported version classifiers (GH-4449),"['.github/workflows/wheel-manylinux.yml', 'setup.py']"
b5f81f5e900922356ee7aeedf78a54fa96f85c71,2021-11-02 18:37:09,Jonathan Helgert,"Add most of the C++17 numeric functions to libcpp.numeric (GH-4423)

Some overloaded methods are commented out as they currently result in incorrect C++ code.
See https://github.com/cython/cython/pull/4423#issuecomment-953685310","['Cython/Includes/libcpp/numeric.pxd', 'tests/run/cpp_stl_numeric_ops_cpp17.pyx']"
376efe17e8d02e2d6aaa3271e4a4b41e4c856d88,2021-11-02 10:15:54,Stefan Behnel,Merge branch '0.29.x',[]
be99a19f70860f6cff26044bd822fbb6a8634237,2021-10-31 11:14:27,Stefan Behnel,"Repair coverage tests to make them work with coverage 6.1, which changed the HTML output format that the tests parse.","['tests/run/coverage_cmd.srctree', 'tests/run/coverage_cmd_src_layout.srctree']"
798ad9f84dc5eead8bcc60c042beb1023056c717,2021-11-02 10:06:58,Lisandro Dalcin,Fix C compiler warning about implicit sign conversion (GH-4439),['Cython/Utility/ImportExport.c']
0917ba564a9ca6d0f7dbe2d26280a5f33b8c1b9d,2021-11-02 10:06:58,Lisandro Dalcin,Fix C compiler warning about implicit sign conversion (GH-4439),['Cython/Utility/ImportExport.c']
00ffb022f82cf13a055102288ca5c1b299f4ecdc,2021-11-02 09:57:05,da-woods,"Add ""import_array()"" to the Numpy tutorial (GH-4403)

Arguably, it's unnecessary if the auto-call works correctly, but if we're still advising users to do it themselves then it probably should be in the docs.",['docs/examples/tutorial/numpy/convolve2.pyx']
c69992aa4eb0f7b4529f776820d20b8c66486972,2021-10-31 11:14:27,Stefan Behnel,"Repair coverage tests to make them work with coverage 6.1, which changed the HTML output format that the tests parse.","['tests/run/coverage_cmd.srctree', 'tests/run/coverage_cmd_src_layout.srctree']"
cc6d6310c002c745fbc16f1c96dc567973a8daba,2021-10-31 09:20:23,Stefan Behnel,Merge branch '0.29.x',[]
0f7bd0d1b159d085f321cc32a3f6ade24844e545,2021-10-31 09:11:09,Thomas A Caswell,"Change C includes of ""longintrepr.h"" to account for upstream changes (GH-4428)

See https://github.com/python/cpython/pull/28968/8e5de40f90476249e9a2e5ef135143b5c6a0b512
which is part of implementing
https://bugs.python.org/issue35134
moved the header ""longintrepr.h"" into a sub-folder.
The notes on this change suggested to include ""Python.h"" instead.","['Cython/Includes/cpython/longintrepr.pxd', 'Cython/Utility/ModuleSetupCode.c', 'tests/compile/pylong.pyx']"
60ec08b392cd9f77915deb13ae2282ea71b81f63,2021-10-31 09:11:09,Thomas A Caswell,"Change C includes of ""longintrepr.h"" to account for upstream changes (GH-4428)

See https://github.com/python/cpython/pull/28968/8e5de40f90476249e9a2e5ef135143b5c6a0b512
which is part of implementing
https://bugs.python.org/issue35134
moved the header ""longintrepr.h"" into a sub-folder.
The notes on this change suggested to include ""Python.h"" instead.","['Cython/Includes/cpython/longintrepr.pxd', 'Cython/Utility/ModuleSetupCode.c', 'tests/compile/pylong.pyx']"
09cbf492dfcf1ad022e79660d6aec0be3f444244,2021-10-29 07:38:32,Matus Valo,Fix pure Python example in clibraries.rst (GH-4432),['docs/src/tutorial/clibraries.rst']
cfb8879c04b9bb7281760200600b6e9e3d9010bc,2021-10-28 07:14:32,0dminnimda,"Add `clear_method_caches` to Utils.py (#4338)

* Utils.py: add _find_cache_attributes, clear_method_caches

* TestCythonUtils.py: add tests for Cached Methods

* Utils.py: add constants

* Utils.py: update comment

* TestCythonUtils.py: remove excess blank line

* Change names to `_CACHE_NAME` and `_CACHE_NAME_PATTERN`

* ci.yml: extend timeout to 40 minutes

* _CACHE_NAME -> _build_cache_name","['.github/workflows/ci.yml', 'Cython/Tests/TestCythonUtils.py', 'Cython/Utils.py']"
db19667d81066aa20cf13ab3ea9cba8d5ab9c948,2021-10-28 07:11:52,Max Bachmann,"Apply #3782 to all releases older than Visual Studio 2017 (GH-4357)

See https://github.com/cython/cython/pull/3782",['Cython/Utility/CppSupport.cpp']
1461e514c00056eef58c7c18262012b1510ba692,2021-10-25 12:29:02,Stefan Behnel,Clean up the NumPy integration test by moving the doctests into the functions that they test.,['tests/run/numpy_test.pyx']
68bb7164d4f93573c4e6a7249561b742818b39cb,2021-10-25 12:14:24,Stefan Behnel,Remove dead test code.,['tests/run/numpy_test.pyx']
4a7467892bb60f9381b5c548d4600804c983c5d1,2021-10-24 19:27:44,Stefan Behnel,Use newer test dependencies in Py3.6+. (Excluding 3.10 for now to give the projects a bit more time.),"['Tools/ci-run.sh', 'test-requirements-cpython.txt']"
9d1ffd5dcdcc0f2f719f86a9a30ce08a67641f10,2021-10-24 22:13:50,da-woods,"Initial support for Python 3.11 (GH-4414)

* Add a basic replacement for PyCode_New().

An optimized versions would be nice, but this is intended to work sufficiently to start testing. Also, CPython 3.11 might actually add a new C-API function to simplify setting the current code position. That might be used instead.

* Disable introspection of frame object with vectorcall

This feature looked to only be used for early Python versions that don't have the full vectorcall protocol (and the contents of the frame object are changed in Python 3.11).","['.github/workflows/ci.yml', 'Cython/Utility/Coroutine.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c']"
346c81fe9b0a13892a2dbd137d994f198940b435,2021-10-24 19:18:10,Stefan Behnel,"Make sure that version dependent special methods are correctly and completely excluded via preprocessor guards.
Previously, implementing ""__div__"" could fail in Py3 (if the code for adapting the Python wrapper was generated) or would at least generate C compiler warnings about unused ""__div__"" C functions.","['Cython/Compiler/TypeSlots.py', 'tests/run/binop_reverse_methods_GH2056.pyx']"
3748c3cd20be1e0440477b906f5c9d10a0afd254,2021-10-24 11:22:34,Stefan Behnel,Add Py3.10 as CI test target.,['.github/workflows/ci.yml']
0f84a57134ce7bd69bf147d5b31a1e93a49a5ae1,2021-10-23 20:06:37,Max Bachmann,Update incorrect version support comment for pycapsule.pxd (GH-4426),['Cython/Includes/cpython/pycapsule.pxd']
c25c87d71107e634162302f7f61a119eff539a48,2021-10-22 19:33:02,Dobatymo,"Fix libcpp map/set/multiset/unordered type issues (GH-4410)

Fix insert return types, constness and input iterator templates.
Fix typing in iterators and add constructor to allow explicit conversion from iterator to const_iterator.","['Cython/Includes/libcpp/map.pxd', 'Cython/Includes/libcpp/set.pxd', 'Cython/Includes/libcpp/unordered_map.pxd', 'Cython/Includes/libcpp/unordered_set.pxd', 'tests/run/cpp_stl_cpp11.pyx', 'tests/run/cpp_stl_map.pyx', 'tests/run/cpp_stl_multiset.pyx', 'tests/run/cpp_stl_set.pyx']"
f776da0b12d01c91093a014c2b20ba08182df546,2021-10-22 19:28:53,Dobatymo,Add C++ multimap/unordered_multimap (GH-4419),"['Cython/Includes/libcpp/map.pxd', 'Cython/Includes/libcpp/unordered_map.pxd', 'tests/run/cpp_stl_multimap.pyx']"
c83fd4414c154503e596e5a06a06309a6a91d1fa,2021-10-22 18:44:11,0dminnimda,Introduce new shell syntax for ci-run.sh to improve Windows support (GH-4400),['Tools/ci-run.sh']
c8c9a12e3c1edb39ed6ee2c62f7d1c71165045ec,2021-10-21 17:02:11,Stefan Behnel,Merge branch '0.29.x',[]
f53ac52dcf4e8dd1c8f27005f771ae8da83f3962,2021-05-25 09:20:54,Stefan Behnel,docs: Use the Cython + IPython lexers that come with Pygments to avoid having to maintain our own ones.,"['docs/conf.py', 'docs/sphinxext/cython_highlighting.py', 'docs/sphinxext/ipython_console_highlighting.py']"
174ca03ad1d357e335a59f0156c7bc21ccc5e0de,2021-10-20 09:03:20,account-login,"Add some missing functions to libcpp maps and string (GH-4395)

* add swap() to libcpp.string
* add load_factor() to libcpp.unordered_map and libcpp.unordered_set","['Cython/Includes/libcpp/string.pxd', 'Cython/Includes/libcpp/unordered_map.pxd', 'Cython/Includes/libcpp/unordered_set.pxd', 'tests/run/cpp_stl_cpp11.pyx', 'tests/run/cpp_stl_multiset.pyx', 'tests/run/cpp_stl_string.pyx']"
42a4af2ffdf96949a33684c1a692803bbb519362,2021-10-18 18:38:22,Stefan Behnel,Merge branch '0.29.x',[]
fb5d29e2e0de76becf6e60858d62a9928714014c,2021-10-18 18:36:54,da-woods,Fix tracing after adapting it to Py3.11 (GH-4420),['Cython/Utility/Profile.c']
53b0eb23284e73d622adea1624e4ad50171a2880,2021-10-18 18:36:54,da-woods,Fix tracing after adapting it to Py3.11 (GH-4420),['Cython/Utility/Profile.c']
5f820eda5d54c29922df704221bb3ec4c9f74c0d,2021-10-18 10:10:05,da-woods,"Fix fused.__self__ tests on PyPy (GH-4417)

PyPy v7.3.6 looks to have added a helpful ""did you mean..."" to the AttributeError exception. It's currently tripping up these tests.",['tests/run/function_self.py']
4df1103bd30143ce022b07f98a2f62678d417e92,2021-10-18 10:05:10,Stefan Behnel,Merge branch '0.29.x',['Cython/Utility/Profile.c']
cbddad23e30ea6d31e0178a4c623f1f6d75452c3,2021-10-18 10:03:17,Victor Stinner,"Make Profile.c use PyThreadState_EnterTracing() (GH-4411)

Instead of __Pyx_SetTracing(), Profile.c now uses PyThreadState_EnterTracing() and PyThreadState_LeaveTracing(), which were added to Python 3.11.0a2:
https://github.com/python/cpython/pull/28542

When these functions are used, Cython no longer sets directly PyThreadState.cframe.use_tracing.",['Cython/Utility/Profile.c']
f6eeeda534dd1139a7ea35bfa627db1789082b06,2021-10-17 18:01:52,da-woods,"Fix fused cpdef default arguments (GH-4413)

A couple of things were going wrong:
* they're creating CloneNodes (but not requiring the contents of the clone of the clone node to be temp)
* assignment from a clone node generates cleanup code (which is against the general rules of a clone node), and also loses a reference via giveref
* cpdef functions cause a small memory leak (#4412) by assigning to their constants twice. This is unfortunately difficult to test for. With this patch we no longer leak, but still duplicate a little bit of work.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/Nodes.py', 'tests/run/fused_cpdef.pyx']"
a0571a69f503b1dfadc331c84b1a8522194053f5,2021-10-17 17:51:08,da-woods,"Import TextTestResult in test runner instead of _TextTestResult (GH-4415)

All the versions we currently test are new enough that the alias is no longer necessary.","['Cython/Tests/xmlrunner.py', 'runtests.py']"
c129b15e8ee249a33ca9a5dc82a3defe509ad5c0,2021-10-15 08:31:32,Dobatymo,Fix wrong type in unordered_multiset::swap() (GH-4408),['Cython/Includes/libcpp/unordered_set.pxd']
72c18e73679fc3b74d2acd037b4de2cbfff25257,2021-10-07 07:56:43,0dminnimda,Improve ci-run.sh (GH-4398),['Tools/ci-run.sh']
454a49850d7b0328f566d3026788ef08186c30a5,2021-10-06 06:16:08,da-woods,"Improve ""import_array"" guard (GH-4397)

Stop using NPY_NDARRAYOBJECT_H since:
a) in principle it's private
b) Numpy has renamed it
and use a public symbol instead.

I think the existing tests are adequate - we just aren't yet testing
against a new enough version of Numpy to have caught it yet.

Closes https://github.com/cython/cython/issues/4396
Closes https://github.com/cython/cython/issues/4394","['Cython/Utility/NumpyImportArray.c', 'tests/run/numpy_import_array_error.srctree']"
97c05e7a936e1a8929ee8c3e2f6629cc061cb66b,2021-10-02 09:08:43,Stefan Behnel,Make a compile test runnable.,"['tests/compile/funcptr.pyx', 'tests/run/cfuncptr.pyx']"
8c7b0f3fb745aa7bd0afedfbeb862eecc5fdff0c,2021-10-01 09:29:34,da-woods,"Handle function ""outer_attrs"" more consistently (GH-4375)

A few children of function nodes need to be consistently evaluated
outside the function scope. This PR attempts to do so and thus
fixes https://github.com/cython/cython/issues/4367.","['Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Visitor.py', 'tests/run/decorators.pyx']"
494f517e622f8a9e43f490408ec244a785d556e2,2021-10-01 09:22:36,da-woods,"Change gcc version check in test runner to a numeric comparison (GH-4359)

The string comparison was reporting '11' < '4' (so OpenMP tests were being skipped on GCC 11)",['runtests.py']
cce3693f14060433fcf52e2ba034c1b77a26c9e5,2021-09-29 07:49:45,Christian Clauss,Fix typo discovered by codespell (#4387),['Cython/Utility/ModuleSetupCode.c']
daa0a4434fa3ef281f9df65f7bb6098d31e1e400,2021-09-28 07:48:12,da-woods," Fix the name of attributes in the common ABI module  (GH-4376)

Attribute names used to be fully qualified like ""_cython_3_0_0a9.cython_function_or_method"" instead of the plain name.

Closes https://github.com/cython/cython/issues/4373","['Cython/Utility/CommonStructures.c', 'tests/run/common_utility_types.srctree']"
fa8db66368a9527c8df441a0bbfee714eb795930,2021-09-27 09:11:12,da-woods,"Avoid AddTraceback() if stringtab isn't set up (GH-4378)

This can happen (rarely) with exceptions that occur very early in the module init process.

Fixes https://github.com/cython/cython/issues/4377

Uses a fake Numpy module for testing to make a version of ""import_array"" that always fails.","['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py', 'tests/run/numpy_import_array_error.srctree']"
f94f26a073ee5c9987ccab6acb87ad453c6ec625,2021-09-27 08:58:20,da-woods,"Make __Pyx_CoroutineAwaitType non-pickleable (GH-4381)

This is explicitly tested for: https://github.com/cython/cython/blob/aea4e6b84b38223c540266f8c57093ee2039f284/tests/run/test_coroutines_pep492.pyx#L2400

It turns out some earlier versions of Python assume that
C-API classes without a dict or slot are pickleable by the class
name. Currently it isn't pickleable because the class name lookup
is failing but this change makes it more robust.

See https://github.com/cython/cython/pull/4376",['Cython/Utility/Coroutine.c']
740305526a702f08e462f20a8ba6f9013126f330,2021-09-24 10:05:52,da-woods,"Avoid unnecessary binding of fused functions on class lookup (GH-4370)

Among other things this makes it pickleable by ensuring that it's the same object each time.","['Cython/Utility/CythonFunction.c', 'tests/run/fused_bound_functions.py']"
e2a23fe11063ee13c886e89007207a07a397e016,2021-09-20 07:34:34,da-woods,"Remove usused ""FetchCommonPointer"" utility code (GH-4380)","['Cython/Utility/CommonStructures.c', 'Cython/Utility/ModuleSetupCode.c']"
aea4e6b84b38223c540266f8c57093ee2039f284,2021-09-07 09:59:07,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
a58498b89ff2c6e5e53bf4e8e246d6ec52d8d840,2021-09-07 09:51:29,Stefan Behnel,Update changelog.,['CHANGES.rst']
f4710b3b9c9cf28e1c4d470b59d66f535ec193c8,2021-09-07 09:51:29,Stefan Behnel,Update changelog.,['CHANGES.rst']
488e2ce23ff04a6ca9a54d04acbeadb368630121,2021-08-31 17:02:17,Max Bachmann,"Fix signature of ""PyUnicode_CompareWithASCIIString"" (GH-4344)

""PyUnicode_CompareWithASCIIString()"" does not raise exceptions and takes a ""const char*"" as argument.",['Cython/Includes/cpython/unicode.pxd']
16a82475f45c163d9a3ca74e177ad4eb097289eb,2021-09-06 16:12:18,Nicolas Pauss,"Fix maybe uninitialized `value` in get_value and get_value_no_default. (GH-4361)

ff16389c0da5acc2be1 introduced convenient functions get_value() and get_value_no_default().

Unfortunately, the variable `value` in these functions was not set before usage with PyContextVar_Get().
This triggered some warnings:

Error compiling Cython file:
------------------------------------------------------------
...
    """"""Return a new reference to the value of the context variable,
    or the default value of the context variable,
    or None if no such value or default was found.
    """"""
    cdef PyObject *value
    PyContextVar_Get(var, NULL, &value)
                                ^
------------------------------------------------------------

Cython/Includes/cpython/contextvars.pxd:118:33: local variable 'value' might be referenced before assignment

Error compiling Cython file:
------------------------------------------------------------
...
    or the provided default value if no such value was found.

    Ignores the default value of the context variable, if any.
    """"""
    cdef PyObject *value
    PyContextVar_Get(var, <PyObject*>default_value, &value)
                                                    ^
------------------------------------------------------------

Cython/Includes/cpython/contextvars.pxd:136:53: local variable 'value' might be referenced before assignment

It can be replicated by simply importing `cpython`:
echo ""cimport cpython"" >/tmp/mod.pyx && ./cython.py -Werror -Wextra /tmp/mod.pyx

The solution is simply to assign NULL to `value` on declaration.",['Cython/Includes/cpython/contextvars.pxd']
2b52df4d75d185f7ac8b4230529e7fc2428a3605,2021-09-05 14:01:07,da-woods,"Fix a couple of trivial typos (GH-4363)

See
https://github.com/cython/cython/pull/4349
https://github.com/cython/cython/commit/0574dbceef7b8ee16a9cc94091c3629dfa23133d#r54025763","['docs/src/userguide/language_basics.rst', 'tests/errors/cpp_bool.pyx']"
41e1d225d8f58e575a4a4d3eede4d0d1f516fe93,2021-09-03 06:44:37,da-woods,"Fix C++ bool coercion where no ""operator bool"" exists (GH-4349)

This was causing c++ classes in if-statements to crash.
Fixes #4348","['Cython/Compiler/ExprNodes.py', 'tests/errors/cpp_bool.pyx']"
c830db8111be7a7eb1753f4c2fa04c4dbbe3ffdc,2021-09-03 06:44:37,da-woods,"Fix C++ bool coercion where no ""operator bool"" exists (GH-4349)

This was causing c++ classes in if-statements to crash.
Fixes #4348","['Cython/Compiler/ExprNodes.py', 'tests/errors/cpp_bool.pyx']"
ba6eba21e82e34a14bdae4996fd0b9b297c40f72,2021-09-01 07:16:09,Stefan Behnel,Merge branch '0.29.x',['Cython/Utility/TypeConversion.c']
54b0bf52a86126a98d76823dbc5d780f7e940895,2021-08-31 22:09:02,Stefan Behnel,"Avoid copying unaligned 16-bit values since some platforms require them to be aligned. Use memcpy() instead to let the C compiler decide how to do it.

Closes https://github.com/cython/cython/issues/4343",['Cython/Utility/TypeConversion.c']
2c08fd50d62e4255602ee3c0d41157df7608e773,2021-08-31 22:09:02,Stefan Behnel,"Avoid copying unaligned 16-bit values since some platforms require them to be aligned. Use memcpy() instead to let the C compiler decide how to do it.

Closes https://github.com/cython/cython/issues/4343",['Cython/Utility/TypeConversion.c']
58d6a7d7f2be284638e62724a43b0ecc80d31cf9,2021-08-31 21:08:22,da-woods,"Update docs to recommend using MSVC on Windows (GH-4345)

See https://github.com/cython/cython/pull/4142#issuecomment-831464115

I don't think MinGW has worked since around Python 3.4 (but I'm
not completely confident in that) while I know that MSVC does
work. Therefore we should recommend that.",['docs/src/quickstart/install.rst']
bad93a3ab3b698ec4106dbf03e1a103e2582d003,2021-08-31 20:04:12,da-woods,"Deduplicate tuples containing IdentifierStringNode (GH-4353)

Compiling ExprNodes.py was creating hundreds of tuples containing (""self"", ""env"") for example, because it wasn't able to match and deduplicate them.","['Cython/Compiler/ExprNodes.py', 'tests/run/tuple_constants.pyx']"
26e544c7b765ceb77edfe923ac9ca29aaa239d12,2021-08-31 17:02:17,Max Bachmann,"Fix signature of ""PyUnicode_CompareWithASCIIString"" (GH-4344)

""PyUnicode_CompareWithASCIIString()"" does not raise exceptions and takes a ""const char*"" as argument.",['Cython/Includes/cpython/unicode.pxd']
1894e0f7b3e69531edccded47226f169b871dee8,2021-08-31 16:56:12,0dminnimda,"Fix some bugs on Windows (GH-4331)

* Avoid usage of `const` or `volatile` in buffer struct field declarations.
* Avoid newline replacement in the test helper functions `write_file()` and `write_newer_file()`.

See https://github.com/cython/cython/pull/4324","['Cython/Compiler/Buffer.py', 'Cython/TestUtils.py']"
8af0271186cc642436306274564986888d5e64c8,2021-08-09 19:44:26,da-woods,docs: fix internal link (GH-4333),['docs/src/userguide/special_methods.rst']
3a0ca192ed497f81c7bee60f13f635c9ac265e72,2021-08-08 08:30:07,0dminnimda,docs: Pythonise documentation on Memory Allocation (memory_allocation.rst) (GH-4316),"['docs/examples/tutorial/memory_allocation/malloc.py', 'docs/examples/tutorial/memory_allocation/malloc.pyx', 'docs/examples/tutorial/memory_allocation/some_memory.py', 'docs/examples/tutorial/memory_allocation/some_memory.pyx', 'docs/src/tutorial/memory_allocation.rst']"
ec8c0804f1a847e7f9b92210d756507afb6ae9b3,2021-08-07 08:28:31,da-woods,"Restore error when using arbitrary decorators on cdef functions (GH-4323)

These were lost when cdef properties (for extern types) were introduced.

Closes #4322 (based on my interpretation of the problem as an error-reporting issue)","['Cython/Compiler/ParseTreeTransforms.py', 'tests/errors/cdef_func_decorators.pyx']"
563c261155f6ce787be80c68d6a3524393142589,2021-08-07 08:08:42,da-woods,"Suppress warnings about constant expressions on MSVC (GH-4317)

Adds utility code sections to toggle C compiler warnings for the duration of the utility code.","['Cython/Compiler/Code.py', 'Cython/Utility/ModuleSetupCode.c']"
671da4001c8f41739c58ca84c8195d382ead9da9,2021-08-07 08:03:50,Stefan Behnel,Py3.4 does not support '%' formatting for byte strings.,['runtests.py']
7547cc311909c625835c0d5c0a90f490eaa5fe5d,2021-08-07 07:45:20,Stefan Behnel,Fix output encoding problems in the test runner with Py2.7 by not trying to decode the C compiler output and instead printing it unchanged as bytes.,['runtests.py']
83699cf59c30191726448c6ca54ac3f0d18fe3b8,2021-08-07 07:29:03,Stefan Behnel,"Revert ""Fix output encoding problems in the test runner with Py2.7 by replacing implicit calls to str() with (unicode) string concatenation.""

This reverts commit 931710d8b12424f4d4c5466bede28ed14f16ca5e.",['runtests.py']
931710d8b12424f4d4c5466bede28ed14f16ca5e,2021-08-06 20:14:55,Stefan Behnel,Fix output encoding problems in the test runner with Py2.7 by replacing implicit calls to str() with (unicode) string concatenation.,['runtests.py']
b99236195ee76499303c0cc2f63e42cc98a0ed53,2021-08-06 19:01:38,Stefan Behnel,Fix output encoding problems in the test runner with Py2.7.,['runtests.py']
c7dc24bc0a39af708976fb0a4bf63d2ee407badb,2021-07-31 18:43:48,Stefan Behnel,runtests: include the C compiler error output in the compile exception to show it at the end of the test run.,"['Cython/Build/IpythonMagic.py', 'Cython/Utils.py', 'runtests.py']"
d9adf77d2eb997808120440ba09f65d2e609f722,2021-07-31 13:13:56,da-woods,"Enable more cpp_locals tests (GH-4320)

Turns out that typeid() and C++ operators already work with ""cpp_locals"".","['tests/errors/w_uninitialized_cpp.pyx', 'tests/run/cpp_operators.pyx', 'tests/run/fused_cpp.pyx']"
0574dbceef7b8ee16a9cc94091c3629dfa23133d,2021-07-27 05:16:29,Stefan Behnel,"Add a warning in the docs that ""conditional compilation"" is not a good way to do most things that users commonly do with it.

See the discussion in https://github.com/cython/cython/issues/4287","['docs/src/userguide/external_C_code.rst', 'docs/src/userguide/language_basics.rst']"
719553db360261c082386cc2a81d5937861a6990,2021-07-26 13:36:53,Stefan Behnel,"Fix compilation of ""ParseTreeTransforms"" in Py2. It previously tried to compare the 'directivetype' to 'str', which misses Py2 str when compiling with language level 3.","['Cython/Compiler/ParseTreeTransforms.pxd', 'Cython/Compiler/ParseTreeTransforms.py']"
4c6364d92440582600aca9029c1e1152771336ed,2021-07-26 08:59:39,Stefan Behnel,Fix some imports.,['Cython/Build/Inline.py']
39b72b435697d25785bf4b142abdf37cf89ebcae,2021-07-26 08:38:27,Stefan Behnel,Add missing attribute declaration for FunctionState class.,['Cython/Compiler/Code.pxd']
2cb80413790fcac327517a14b85813e1612f075f,2021-07-26 08:05:59,Stefan Behnel,Fix type declaration in parser.,['Cython/Compiler/Parsing.py']
15be0c34d884c0e682438108927930d009df6047,2021-07-26 07:00:19,Stefan Behnel,"Add CI jobs that compile more Cython modules with ""--cython-compile-all"", to make sure that this keeps working and to allow comparing the performance difference.","['.github/workflows/ci.yml', 'Tools/ci-run.sh']"
b3c3a03901e2fda73e4fb1513edf99d41fc998b8,2021-07-26 07:06:10,da-woods,"Fix the type of the 'self' argument in a cdef staticmethod declared in a pxd file (GH-4085)

Fixes https://github.com/cython/cython/issues/3174
Closes https://github.com/cython/cython/pull/3175

I've removed all identification of is_self_arg from the parser, since I think it's better dealt with when analysing the declarations.

Original test copied from https://github.com/cython/cython/pull/3175","['Cython/Compiler/Nodes.py', 'Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py', 'tests/run/static_methods.pxd', 'tests/run/static_methods.pyx']"
03e919a06007a8ce0d77eefb52a5ec697c70ef4f,2021-07-25 10:49:51,Stefan Behnel,Add a note on crypto currency donations (any why we shouldn't take them).,['docs/src/donating.rst']
d6625e2b6c7d8bbb5fa5b17b90d748ede44150cb,2021-07-23 18:20:15,da-woods,"Make __PYX_WARN_IF_INIT_CALLED name unique per-module in generated header files (GH-4309)

Fixes https://github.com/cython/cython/issues/4308","['Cython/Compiler/ModuleNode.py', 'tests/run/include_multiple_modules.srctree']"
e46e9dd7c37d8d7ad432a94fff5daafa7fa444e3,2021-07-22 21:01:23,Matus Valo,"Docs: Introduce pure Python mode in ""Using C libraries"" tutorial (GH-4294)","['docs/examples/tutorial/clibraries/cqueue.pxd', 'docs/examples/tutorial/clibraries/queue.py', 'docs/examples/tutorial/clibraries/queue.pyx', 'docs/examples/tutorial/clibraries/queue2.py', 'docs/examples/tutorial/clibraries/queue2.pyx', 'docs/examples/tutorial/clibraries/queue3.py', 'docs/examples/tutorial/clibraries/queue3.pyx', 'docs/src/tutorial/clibraries.rst']"
e583fe33074d4c5a808153b10877ce73339b8a0a,2021-07-22 09:21:19,Stefan Behnel,"Support arbitrary mappings in C++ dict-to-map conversion, not just exact dicts.","['Cython/Utility/CppConvert.pyx', 'tests/run/cpp_stl_conversion.pyx']"
50cb786f5d5648b406c32036bbfce2050a8cd507,2021-07-22 07:30:50,Stefan Behnel,Merge branch '0.29.x',[]
db8668f4de90c62ed9e80db3bbd6327323d45264,2021-07-21 09:16:13,Stefan Behnel,Build Linux wheels for recent Python versions from a newer GLIBC-2.24 docker image.,['Makefile']
bf4979e2441ffbc9aaeb88f5c67608578040588f,2021-04-03 06:23:44,Stefan Behnel,Make a helper function in a C++ test correctly propagate exceptions so that it won't have to spit out compiler warnings.,['tests/run/cpp_stl_conversion.pyx']
d5886e90b24052c42c61fe0a896cf94877318612,2021-07-21 08:30:15,Matus Valo,"docs: Change cast(...) -> cython.cast(...) in ""language basics"" examples (GH-4304)",['docs/src/userguide/language_basics.rst']
20f478a778ba6c34ff8ccadb289bf01cfbe90b94,2021-07-20 21:10:56,Stefan Behnel,Prepare release of 3.0.0a9,"['CHANGES.rst', 'Cython/Shadow.py']"
5e002daeac94cbced240b8a95ef2d5aeab0c1b90,2021-07-20 20:54:59,Shreyan Avigyan,"docs: Change ""Microsoft's Visual C"" to ""Microsoft Visual C/C++ (MSVC)"" (GH-4142)",['docs/src/quickstart/install.rst']
afc8a2c2f54624b1739c85fca6c8d9322881b05b,2021-07-20 20:51:57,Matus Valo,"Introduce pure Python mode in the ""language basics"" documentation (GH-4242)

See https://github.com/cython/cython/issues/4187","['docs/examples/userguide/extension_types/shrubbery.py', 'docs/examples/userguide/extension_types/shrubbery.pyx', 'docs/examples/userguide/language_basics/casting_python.pxd', 'docs/examples/userguide/language_basics/casting_python.py', 'docs/examples/userguide/language_basics/open_file.py', 'docs/examples/userguide/language_basics/optional_subclassing.py', 'docs/examples/userguide/language_basics/optional_subclassing.pyx', 'docs/examples/userguide/language_basics/override.py', 'docs/examples/userguide/language_basics/override.pyx', 'docs/examples/userguide/language_basics/parameter_refcount.py', 'docs/examples/userguide/language_basics/parameter_refcount.pyx', 'docs/examples/userguide/language_basics/struct_union_enum.py', 'docs/src/userguide/language_basics.rst']"
c47742190b3614789b3c16c439764e05a630bca6,2021-07-20 20:27:23,0dminnimda,Document `typeof` in pure.rst (GH-4301),['docs/src/tutorial/pure.rst']
d833d432e56937f488d2d1f8b9f5ca8eebed4a21,2021-07-20 10:01:08,Stefan Behnel,Update changelog.,['CHANGES.rst']
34956983713b6b5c5450bb58bddb0b5408f211a8,2021-07-20 09:55:23,Stefan Behnel,Explicitly return None from a method that is expected to return something otherwise.,['Cython/Compiler/Symtab.py']
f8d10420e2ba82bcfa6516a8679406bd5f1e18dc,2021-07-20 09:52:30,Stefan Behnel,Rewrite the section on fused types in function signatures to make it clearer how multiple fused types interact here.,['docs/src/userguide/fusedtypes.rst']
1ce05b86ce32a3109e1aaec09ef9e1b60e5ae45c,2021-07-20 09:48:09,Stefan Behnel,"Refactor function to make it less verbose and simpler to change: error cases first, then special cases, then normal behaviour.",['Cython/Compiler/PyrexTypes.py']
8e1bfe7f8d0da9b69510b1a0e6aa287023b84059,2021-07-20 09:05:20,Stefan Behnel,Make code more readable by changing the order of a condition and moving the simple return case first.,['Cython/Compiler/Nodes.py']
c7550f6dacd3fe190799768c875870f59ab09eb1,2021-07-19 07:52:55,Stefan Behnel,Update changelog.,['CHANGES.rst']
c9a428789ff5fe919d21fbc238a4c8504161ad24,2021-07-20 07:31:09,da-woods,"Prevent C++ coercions from picking up user-set directives (GH-4206)

For example, if they're called on entry/exit to a decorated function they pick up the directives.
They should really be independent of most user defined settings, especially local ones.","['Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/UtilityCode.py']"
12d17bb0e68e238fbd6c27189025782fd26e8d47,2021-07-20 04:15:29,Robert Bradshaw,"Merge pull request #4186 from amol-/cygdb-optional-interpreter

Add --skip-interpreter option to cygdb",['Cython/Debugger/Cygdb.py']
e1a60bbe772ab6e83efe83c0c70e9938401e854d,2021-07-19 16:22:32,da-woods,"Resolve some issues with ""cpp_locals"" (GH-4265)

* Fix class attributes access where cpp_locals=False.
* Add ""no-cpp-locals"" tag to mark a test as not suitable for running with ""cpp_locals=True"".
* Add a list of ""extra_directives"" to runtests as additional test mode.

Resolves some issues in https://github.com/cython/cython/issues/4266","['Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'runtests.py', 'tests/compile/cpp_temp_assignment.pyx', 'tests/errors/w_numpy_arr_as_cppvec_ref.pyx', 'tests/errors/w_uninitialized_cpp.pyx', 'tests/run/cpp_bool.pyx', 'tests/run/cpp_class_redef.pyx', 'tests/run/cpp_classes.pyx', 'tests/run/cpp_classes_def.pyx', 'tests/run/cpp_const_method.pyx', 'tests/run/cpp_enums.pyx', 'tests/run/cpp_exceptions_utility_code.pyx', 'tests/run/cpp_forwarding_ref.pyx', 'tests/run/cpp_iterators.pyx', 'tests/run/cpp_locals_directive.pyx', 'tests/run/cpp_locals_directive_unused.pyx', 'tests/run/cpp_move.pyx', 'tests/run/cpp_nested_classes.pyx', 'tests/run/cpp_nonstdint.pyx', 'tests/run/cpp_operator_exc_handling.pyx', 'tests/run/cpp_operators.pyx', 'tests/run/cpp_smart_ptr.pyx', 'tests/run/cpp_static_method_overload.pyx', 'tests/run/cpp_stl_algo_execpolicies.pyx', 'tests/run/cpp_stl_algo_modifying_sequence_ops.pyx', 'tests/run/cpp_stl_algo_partitioning_ops.pyx', 'tests/run/cpp_stl_algo_sorting_ops.pyx', 'tests/run/cpp_stl_atomic.pyx', 'tests/run/cpp_stl_cpp11.pyx', 'tests/run/cpp_stl_forward_list.pyx', 'tests/run/cpp_stl_list.pyx', 'tests/run/cpp_stl_vector.pyx', 'tests/run/cpp_template_functions.pyx', 'tests/run/cpp_template_ref_args.pyx', 'tests/run/cpp_template_subclasses.pyx', 'tests/run/fused_cpp.pyx', 'tests/run/libcpp_all.pyx', 'tests/run/lvalue_refs.pyx']"
9f78ed075f7371f931c7fa76b45589841c25668f,2021-07-19 07:41:34,da-woods,"Rename GeneratorExpressionScope to ComprehensionScope (GH-4275)

Seems a remanant of an earlier implementation, but generator expressions *never* use ""GeneratorExpressionScope"" and in fact it's only used for comprehensions.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Symtab.py']"
3050637d434a45e775d94b46d96fce90f0b4e70b,2021-07-19 07:17:00,da-woods,Add missing multiset class to the standard library bindings (GH-4273),"['Cython/Includes/libcpp/set.pxd', 'Cython/Includes/libcpp/unordered_set.pxd', 'tests/run/cpp_stl_multiset.pyx']"
78886392cd6a3c7edaf844c7b8224d67a4474266,2021-07-18 20:41:20,da-woods,"Add missing ""max_element()"" in libcpp.algorithms (GH-4271)","['Cython/Includes/libcpp/algorithm.pxd', 'tests/run/cpp_stl_algo_modifying_sequence_ops.pyx']"
47850c4023b1e7a239ed597a84d7e7cd074d18ad,2021-07-18 18:59:24,Stefan Behnel,Fix and enforce a couple of code formatting issues. (II),['tests/run/posonly.py']
df568482be2d77af360980efa4fd99a5eb6a9a04,2021-07-18 18:48:00,Stefan Behnel,Fix and enforce a couple of code formatting issues.,"['Cython/Distutils/old_build_ext.py', 'Demos/benchmarks/spectralnorm.py', 'setup.cfg']"
7528ff8f366130ba1bd99ebbceef58910a89a79f,2021-07-18 08:54:04,Stefan Behnel,"Rephrase ""two syntax variants"" note to give readers a hint why they exist.",['docs/src/two-syntax-variants-used']
5bf5aa63d6b6742144071a2af896067c21b3752a,2021-07-16 13:21:48,Stefan Behnel,Add a script for backing up Github issues.,['Tools/dump_github_issues.py']
6e2d9fd2d7f47b87c8cfa2e23a880177e8d69630,2021-07-15 14:18:49,Matus Valo,Fix missing images in quickstart (#4285),"['docs/examples/quickstart/cythonize/htmlreport_py.png', 'docs/src/quickstart/htmlreport_py.png', 'docs/src/quickstart/htmlreport_pyx.png']"
d7efda4378732b703e6f9125ce5eec1868f71971,2021-07-15 07:06:05,Matus Valo,"docs: Add pure Python examples to ""Getting started"" guide (GH-4283)","['docs/examples/quickstart/cythonize/cdef_keyword.py', 'docs/examples/quickstart/cythonize/cdef_keyword.pyx', 'docs/examples/quickstart/cythonize/htmlreport_py.png', 'docs/examples/quickstart/cythonize/htmlreport_pyx.png', 'docs/examples/quickstart/cythonize/integrate_cy.py', 'docs/examples/quickstart/cythonize/integrate_cy.pyx', 'docs/src/quickstart/build.rst', 'docs/src/quickstart/cythonize.rst', 'docs/src/quickstart/htmlreport.png']"
13125ee70c72453779fde0c020b53e862e3f613e,2021-07-14 19:21:50,Matus Valo,"docs: Use explicitely the ""cython"" module in examples (GH-4284)","['docs/examples/tutorial/external/keyword_args_call.py', 'docs/examples/tutorial/external/keyword_args_call.pyx']"
54fa2b822565fc9ddef89aa399eb7562d5b76f07,2021-07-14 19:02:02,0dminnimda,"docs: Pythonise the ""Extension types (aka. cdef classes)"" page (cdef_classes.rst) (GH-4232)","['docs/examples/tutorial/cdef_classes/integrate.py', 'docs/examples/tutorial/cdef_classes/integrate.pyx', 'docs/examples/tutorial/cdef_classes/math_function_2.py', 'docs/examples/tutorial/cdef_classes/math_function_2.pyx', 'docs/examples/tutorial/cdef_classes/nonecheck.py', 'docs/examples/tutorial/cdef_classes/nonecheck.pyx', 'docs/examples/tutorial/cdef_classes/sin_of_square.py', 'docs/examples/tutorial/cdef_classes/sin_of_square.pyx', 'docs/examples/tutorial/cdef_classes/wave_function.py', 'docs/examples/tutorial/cdef_classes/wave_function.pyx', 'docs/src/tutorial/cdef_classes.rst', 'docs/src/two-syntax-variants-used']"
696a1959b44ca9028d3f9468723b6b24335ad921,2021-07-14 14:19:26,Matus Valo,"docs: Add Pure Python mode to ""Calling C functions"" tutorial (GH-4247)","['docs/examples/tutorial/external/atoi.py', 'docs/examples/tutorial/external/atoi.pyx', 'docs/examples/tutorial/external/keyword_args_call.py', 'docs/examples/tutorial/external/keyword_args_call.pyx', 'docs/examples/tutorial/external/libc_sin.py', 'docs/examples/tutorial/external/libc_sin.pyx', 'docs/examples/tutorial/external/py_version_hex.py', 'docs/examples/tutorial/external/strstr.pxd', 'docs/src/tutorial/external.rst']"
8552e3d3ffe9fe4f3f8dab82119ed839990dadda,2021-07-13 20:22:19,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
3a34c5fb48ee86be9d0a819fee1ff3cb3efd1a1e,2021-07-13 20:20:55,Stefan Behnel,Prepare release of 0.29.24.,"['CHANGES.rst', 'Cython/Shadow.py']"
f355001d407e0fb5598e3aea88a66d68c02e7891,2021-07-13 18:00:04,Stefan Behnel,"Set the ""is_target"" attribute for names, attributes and temps (anything name-like) to preserve that information for later pipeline steps.",['Cython/Compiler/ExprNodes.py']
bd4f948d0b80e3f23b1a0c61216eedf35879d727,2021-07-13 17:58:18,Stefan Behnel,Avoid going through an attribute assignment for an intermediate node result since it may not be the end result.,['Cython/Compiler/Nodes.py']
bd9de292a28bece865920702065d307a6b14f3be,2021-07-13 17:56:24,Stefan Behnel,Fix: overwrite target node after analysis.,"['Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py']"
22891e074d0742a85aaa652560e3f9909e595c62,2021-07-13 19:52:00,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Includes/libcpp/string.pxd', 'tests/run/cpp_stl_string.pyx']"
06607884c9653da58c9c352dc9a76a3f1d4a02ad,2021-07-13 19:50:03,Stefan Behnel,Update changelog.,['CHANGES.rst']
8dee7f91b29c3eb1574f86eac63ecd1e4a31f993,2021-07-13 19:20:37,Janek Bevendorff,"Fix ""std::string::npos"" in 'libcpp.string' and add missing C++ string methods (GH-4276)

Closes https://github.com/cython/cython/issues/4268","['Cython/Includes/libcpp/string.pxd', 'tests/run/cpp_stl_string.pyx']"
a46ed3f401b0f7520566cacd25261d612784b3a4,2021-07-13 19:20:37,Janek Bevendorff,"Fix ""std::string::npos"" in 'libcpp.string' and add missing C++ string methods (GH-4276)

Closes https://github.com/cython/cython/issues/4268","['Cython/Includes/libcpp/string.pxd', 'tests/run/cpp_stl_string.pyx']"
fae33cf7d42559384deb7a9949f47b0881b0a29b,2021-07-10 08:27:34,Stefan Behnel,Remove accidentally duplicated test code.,['Cython/Tests/TestCythonUtils.py']
0fd87fd0fdc031a63f8c166ad1433e686b76331b,2021-07-07 13:16:03,Stefan Behnel,Use different build jobs for manylinux release builds.,['.github/workflows/wheel-manylinux.yml']
999f84685bfce33d20bc59c5ff4f09948df14d7a,2021-07-06 10:05:56,scoder,Build and keep wheels in Github Actions. (GH-4267),"['.github/workflows/ci.yml', '.github/workflows/wheel-manylinux.yml', 'Tools/ci-run.sh']"
559ef7494ffb386a308f74b707560edbabe3f15d,2021-07-03 13:26:42,Stefan Behnel,Clean up test and add one for writing dedented text in tests.,['Cython/Tests/TestTestUtils.py']
a10d658b78163b6a045dc399014fd8d6c2fb1d2a,2021-07-03 13:19:46,Stefan Behnel,Fix test in Py2.,['Cython/Tests/TestTestUtils.py']
e17c8e547571e648cb342aceceec40bfe2d48926,2021-07-03 12:49:22,Stefan Behnel,Extend somment.,['Cython/TestUtils.py']
f7eb64034890495654e0728f0362c848348c6674,2021-07-03 12:46:36,Stefan Behnel,"Add some test helper functions to create (source) files from tests.
To be used in https://github.com/cython/cython/pull/4241","['Cython/TestUtils.py', 'Cython/Tests/TestTestUtils.py']"
f6c850d11bc57a432519afb7369bf0d08008be25,2021-07-03 10:04:18,Stefan Behnel,"Fix a refcounting bug in the new @total_ordering decorator.
See https://github.com/cython/cython/pull/3626","['Cython/Compiler/ModuleNode.py', 'tests/run/exttype_total_ordering.pyx']"
ec945fe3060b9ad369fa4f2aeba8394a9e2e4c13,2021-07-03 07:41:05,Stefan Behnel,Fix issue reference in changelog.,['CHANGES.rst']
c81b2d13a625cac6b399c0f8468027cb9f8d6ab6,2021-07-02 15:26:03,Stefan Behnel,Prepare release of 3.0.0a8.,['Cython/Shadow.py']
135e556afb6e8c469a6d5fb8abdeebbfbd11cfc2,2021-07-02 14:14:23,Stefan Behnel,Update changelog.,['CHANGES.rst']
8230c63bca436858f35a8d48b3428d5b72c52469,2021-07-02 08:29:35,Stefan Behnel,Declare a static method as @staticmethod.,['Cython/Compiler/ModuleNode.py']
af9d9076d9e0e20dd0b9fd06c027c96a7459c5d1,2021-07-02 14:30:13,da-woods,"Fix infinite recursion in binops code (GH-4204)

Closes https://github.com/cython/cython/issues/4172","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ExtensionTypes.c', 'tests/run/binop_reverse_methods_GH2056.pyx']"
875584d1f134d56ccc10d7eaad36f974c32e56e9,2021-07-02 14:25:55,da-woods,"Error message on cpdef variables (GH-3963)

Allowing these gives people the false impression that they do something meaningful.

Closes https://github.com/cython/cython/issues/887
Closes https://github.com/cython/cython/issues/3959","['Cython/Compiler/Nodes.py', 'tests/errors/cpdef_vars.pyx']"
fd8e8cbe3d35bde17888f559563b8b6e8920430d,2021-07-02 14:22:49,da-woods,"docs: limitations of np.ndarray (GH-4230)

People often have unrealistic expectations about what this typing helps with, so I've added a small paragraph to try to make it clearer.",['docs/src/tutorial/numpy.rst']
47e2c7696686efc57ebaf30e50893b821edb57d6,2021-07-02 14:17:05,da-woods,"Rename Shadow.optimization -> Shadow.optimize (GH-4258)

The directives are called `optimize` rather than `optimization`.",['Cython/Shadow.py']
52b1b2b30df6c80c36d6c3185637809f4f1a0d90,2021-07-02 14:06:00,da-woods,"Fix a few bugs in the new ""cpp_locals"" directive implementation (GH-4259)

1) Entry utility_code wasn't being imported unless the entry was visibly used. The utility code is needed for the definition even if unused. I think this is what utility_code_definition is for, but I'm not completely sure. I also had to add some calls to ensure it's used.

2) CppOptionalTempCoercions weren't being moved correctly. Tested by printing from the destructor.

3) cdef-class attributes weren't being created or destroyed correctly. Tested by printing from the destructor","['Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Symtab.py', 'tests/run/cpp_optional_temps.pyx', 'tests/run/cpp_optional_temps_unused.pyx']"
e7e5d1dc652755bd0ac0a45e4f970b1a2b137308,2021-07-01 07:42:35,Stefan Behnel,Merge branch '0.29.x',[]
dba5f6bb9922df044951f64bc889cd0592a3e483,2020-05-04 02:35:36,Stefan Behnel,Stop calling PyEval_InitThreads() In Py3.7+ (where it has become a no-op).,"['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ModuleSetupCode.c']"
f42b6eeb78e8ffd6c1a01383958381715a5a244a,2021-06-30 07:36:15,Matti Picus,Fix call to run_distutils() in debugger test (GH-4256),['Cython/Debugger/Tests/TestLibCython.py']
af6371145ad89601e769f5f69271c1bfc31765c7,2021-06-30 06:04:20,Stefan Behnel,"Use 3-part version numbers also for 3.0, i.e. 3.0.0, as we did for previous releases.

See https://github.com/cython/cython/issues/4022#issuecomment-870394893",['Cython/Shadow.py']
0bbad8e87ad54659a50345aebb44c1c0102baf92,2021-06-29 18:20:56,da-woods,"Add directive ""cpp_locals"" to handle C++ variables using std::optional (GH-4225)

This avoids the need for default constructors of stack allocated variables and temps by allowing late initialisation.

Closes https://github.com/cython/cython/issues/4160","['Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FlowControl.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Pipeline.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/TypeInference.py', 'Cython/Utility/CppSupport.cpp', 'Cython/Utility/ObjectHandling.c', 'docs/src/userguide/source_files_and_compilation.rst', 'docs/src/userguide/wrapping_CPlusPlus.rst', 'runtests.py', 'tests/run/cpp_optional_temps.pyx']"
619e2289e98be4064aef3c7f07a735dc2719cf69,2021-06-29 14:21:25,Stefan Behnel,Move some utility code from ExprNodes.py into utility code files.,"['Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ObjectHandling.c']"
54d949f138284b0c4d3ca58366d934301b8358fb,2021-06-28 20:44:06,Loisaida Sam,Fix grammar in numpy_tutorial.rst (GH-4251),['docs/src/userguide/numpy_tutorial.rst']
304b82267eda219fb801552341fa888b17f7db33,2021-06-28 17:58:04,Golden Rockefeller,Make cythonize recompile .py files when their override .pxd file has changed  (GH-4063),"['Cython/Build/Dependencies.py', 'Cython/Build/Tests/TestRecythonize.py']"
506cd5aab31ae2ed5bda431f5ff63077f8acd074,2021-06-28 16:47:46,Stefan Behnel,Add missing argument when instantiating a test class. The argument was added in https://github.com/cython/cython/commit/3bd321f17474aafde1bd497163b3e7ba089ee2cc,['Cython/Debugger/Tests/TestLibCython.py']
376b2ae9377e15309c31e4bbe688a85f1a5e41ac,2021-06-28 16:12:52,da-woods,"Set ""is_cython_module"" on annotations correctly (GH-4248)

Fixes https://github.com/cython/cython/issues/4243
(and probably a bunch more annotation bugs)

AnnotationNode doesn't have any child_attrs/subexprs because it mostly doesn't want to be analyzed (it's just transformed to an evaluable string). However this means that InterpretCompilerDirectives wasn't visiting its children to set is_cython_module and so the typing was failing. I've special-cased InterpretCompilerDirectives to visit AnnotationNode fully.","['Cython/Compiler/ParseTreeTransforms.py', 'tests/run/annotation_typing.pyx']"
72c85497cc834d36c272e05d04d95bf7892896c9,2021-06-28 16:09:09,Matus Valo,Update error message in documentation (GH-4244),['docs/src/userguide/language_basics.rst']
c74e08a0e4a92ac6bbe3d3b9284eefa685e5c409,2021-06-22 18:07:32,da-woods,"Don't let Py-class annotations set a type (GH-4199)

Fixes https://github.com/cython/cython/issues/4198
Fixes https://github.com/cython/cython/issues/4196","['Cython/Compiler/ExprNodes.py', 'tests/run/pep526_variable_annotations.py', 'tests/run/pyclass_annotations_pep526.py']"
7cb061cdaa4f9c8ac4113bf3169cc4d4890eef7e,2021-06-22 16:03:28,da-woods,"Correct delete -> delete[] in ""cpp_nonstdint"" test (GH-4239)

This was causing a (correct) warning.",['tests/run/cpp_nonstdint.h']
c76e0c1e42015f52438230f9ee6f1b6d5018cb61,2021-06-18 20:16:01,da-woods,"docs: repair glossary (GH-4238)

It looks like putting the title between `.. glossary::` and the entries messed it up.","['docs/src/userguide/glossary.rst', 'docs/src/userguide/wrapping_CPlusPlus.rst']"
bba69054b4aff2c0a63a8be9d6ce5c9fdd079a52,2021-06-17 20:36:48,da-woods,"Fix ""except+*"" exception handling (GH-4013)

Fixes issue https://github.com/cython/cython/issues/3065
Fixes issue https://github.com/cython/cython/issues/3066

* delete cpp_exception_declaration_compatibility test
  Because I'm emitting an error at an earlier stage I don't think there's a way to get this test to work.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'tests/errors/cppexc_non_extern.pyx', 'tests/run/cpp_exception_declaration_compatibility.srctree', 'tests/run/cpp_exceptions_utility_code.pyx']"
395b89c12bd336c87ef001bfd5f559cf92f3e6cc,2021-06-17 19:17:46,da-woods,"Fix conversion from DictNode to std::map (GH-4231)

Reported in https://github.com/cython/cython/pull/4228","['Cython/Compiler/ExprNodes.py', 'tests/errors/reversed_literal_pyobjs.pyx', 'tests/run/cpp_stl_conversion.pyx']"
28c9801213b21bd808bacc385e67da20d11bd10e,2021-06-17 19:00:50,scoder,"Optimise ""[...] * N"" where N is a non-literal C integer value. (GH-4233)

Closes https://github.com/cython/cython/issues/3922","['Cython/Compiler/ExprNodes.py', 'tests/run/seq_mul.py']"
07b8fed9ad69eca2f4535701ff7a345286190ef4,2021-06-17 17:57:51,Matti Picus,"Restore old PyEval_EvalCode() signature for older versions of PyPy (GH-4236)

Partially reverts https://github.com/cython/cython/commit/1027db04fb7c5bbfea2b9bcdfce0b1f384e26a93",['Cython/Utility/Builtins.c']
0ab91a54bd2c54abf9c09a60cdf10bc8a271219a,2021-06-15 19:11:59,Stefan Behnel,docs: Resolve several exception handling/propagation issues in the examples.,"['docs/examples/tutorial/profiling_tutorial/calc_pi_3.pyx', 'docs/examples/tutorial/profiling_tutorial/calc_pi_4.pyx', 'docs/examples/tutorial/string/c_func.pyx', 'docs/examples/userguide/early_binding_for_speed/rectangle_cdef.pyx', 'docs/examples/userguide/language_basics/cdef_block.pyx', 'docs/examples/userguide/parallelism/breaking_loop.pyx', 'docs/src/tutorial/profiling_tutorial.rst', 'docs/src/tutorial/strings.rst']"
af95806773086e3554fa0f27576c86ad7f200b8a,2021-06-15 18:31:00,Stefan Behnel,"docs: Fix some warnings in the ""external C code"" examples about unraisable exceptions.
Also make a couple of improvements regarding clarity and text formatting.","['docs/examples/userguide/external_C_code/delorean.pyx', 'docs/examples/userguide/external_C_code/marty.c', 'docs/src/userguide/external_C_code.rst']"
5cd272cedeb669da37f7a79073b008bff23ac150,2021-06-15 18:06:23,Stefan Behnel,docs: Fix a typo and add some readability spaces between sentences.,['docs/src/tutorial/profiling_tutorial.rst']
580b4817360b6ac8372f69b57a3ddcab2480ab70,2021-06-15 15:44:39,Stefan Behnel,docs: Fix type used in C++ example.,['docs/examples/tutorial/cython_tutorial/primes_cpp.py']
4eb71b3b6edd70bae55931800c2e32f1f4198292,2021-06-15 15:04:44,Stefan Behnel,Include requirements files in sdist.,['MANIFEST.in']
555cf2e16f51794fdba72622d03626f2fb9f48ba,2021-06-15 15:11:08,0dminnimda,"Pythonise the documentation according to #4187: Basic Tutorial (cython_tutorial.rst) (GH-4226)

See https://github.com/cython/cython/issues/4187

* .gitignore: add directory for docs build and cython_debug
* doc-requirements.txt: add sphinx-tabs
* conf.py: add and setup sphinx-tabs extension
* Create _static\css\tabs.css for customisation
* add ""two-syntax-variants-used"" file as a preface about the different typing variants","['.gitignore', 'doc-requirements.txt', 'docs/_static/css/tabs.css', 'docs/conf.py', 'docs/examples/tutorial/cython_tutorial/primes.py', 'docs/examples/tutorial/cython_tutorial/primes.pyx', 'docs/examples/tutorial/cython_tutorial/primes_cpp.py', 'docs/examples/tutorial/cython_tutorial/primes_cpp.pyx', 'docs/examples/tutorial/cython_tutorial/primes_python.py', 'docs/examples/tutorial/cython_tutorial/setup.py', 'docs/src/cimport-warning', 'docs/src/tutorial/cython_tutorial.rst', 'docs/src/tutorial/htmlreport.png', 'docs/src/tutorial/htmlreport_py.png', 'docs/src/tutorial/htmlreport_pyx.png', 'docs/src/tutorial/pure.rst', 'docs/src/tutorial/python_division.png', 'docs/src/two-syntax-variants-used']"
b19b8d840378b556c86e40e769cd7b93d28b1f43,2021-06-01 17:40:55,da-woods,"Avoid setting Py_TPFLAGS_HEAPTYPE in Pyston

See https://github.com/cython/cython/issues/4200

Signed-off-by: Stefan Behnel <stefan_ml@behnel.de>",['Cython/Utility/ExtensionTypes.c']
218d8dc7cc4bdcb78967055b89251be576754708,2021-06-14 15:55:54,Stefan Behnel,Update changelog.,['CHANGES.rst']
17481625d205c0d63a9ebb493d113e1da57d9d4c,2021-06-14 15:22:29,Stefan Behnel,"Remove an expensive warning that is never shown.
Closes https://github.com/cython/cython/pull/4224",['Cython/Distutils/old_build_ext.py']
e10bd48a43b2652fe93ea509e6fa95780801f682,2021-06-14 14:45:15,Stefan Behnel,"Automatically add stubs for ""cython.cimports.*"" in the test runner to make them importable in Python (although not necessarily runnable).","['docs/examples/tutorial/pure/py_cimport.py', 'docs/src/tutorial/pure.rst', 'runtests.py']"
48325b43e2f3107e07723ef209ed1ce1528aa956,2021-06-14 14:20:06,Stefan Behnel,Modernise module loading in test runner using importlib.,['runtests.py']
3bd321f17474aafde1bd497163b3e7ba089ee2cc,2021-06-14 09:39:12,Stefan Behnel,"Allow both testmod.py and testmod.pyx as test module names, next to each other
Automatically prepend ""import cython"" to the examples if necessary.",['runtests.py']
3e7aa76b8957e2347f3cb9dfc077897b65c5d194,2021-06-11 18:35:20,da-woods,"Make test for GH-4212 independent of optimisations. (GH-4219)

See https://github.com/cython/cython/pull/4213#discussion_r648005583",['tests/run/cpp_classes_def.pyx']
0e4eeb27817577021ac3df4867200c1bc2ff6f11,2021-06-09 11:32:59,Stefan Behnel,Merge branch '0.29.x',[]
064463397f0ca5efe5e1c84108d9276ea217e242,2021-06-09 11:30:31,da-woods,"Backport #2811 to fix qualified-name issues (GH-4216)

Closes https://github.com/cython/cython/issues/4214
Closes https://github.com/cython/cython/issues/2811

* Set ""entry.qualified_name"" for builtin types.
* Make sure we always have a correct ""qualified_name"" for all symtab Entry instances.","['Cython/Compiler/Symtab.py', 'tests/run/cython3.pyx']"
4e81b50a0c7720d94685c0519e905180075aa507,2021-06-09 10:59:35,Marius Wachtler,"Remove special handling of Pyston v1 (GH-4211)

Looking at the Cython code I spotted a few areas where it contains special paths for Pyston v1.
Pyston v1 only supports python2 and is dead but we did release a new Pyston v2 which is a fork of CPython 3.8.
As we don't currently set `PYSTON_VERSION` in v2 the current code can't trigger and can be removed.

I hoped we would not need any special casing for v2 because it should be fully compatible with CPython but
https://github.com/cython/cython/issues/4200 may temporarily need one but I think the current
code is overkill and if necessary I can add (part of) it back later on.","['Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/Profile.c', 'tests/compile/buildenv.pyx']"
3ffe8b7faa0f44eda25092d5b354e16c4d018d51,2021-06-09 10:42:15,Stefan Behnel,Merge branch '0.29.x',[]
be0159c049a7606b230ef0e16a238c2f35c31912,2021-06-09 10:39:10,Matti Picus,change extension for sphinx 1.8+ (GH-4210),['docs/conf.py']
b0b207db71600d480fd7ae6fe43e058b3a0cd51b,2021-06-09 09:48:11,Stefan Behnel,"Split the interface of ""cythonrun"" and ""BuildExecutable"" so that the latter no longer automatically runs the program.","['CHANGES.rst', 'Cython/Build/BuildExecutable.py', 'bin/cythonrun']"
40758c6b5f853f42d1ea167f05db74c33a358ed5,2021-06-09 07:47:40,da-woods,"Fix compile error preventing building in MSVC (GH-4203)

MSVC appears not like like `#if/#else` with an macro call.
Fixes https://github.com/cython/cython/issues/4202",['Cython/Utility/CythonFunction.c']
2d8145b1f7a21e7e68b23cbccdc2335ff6ef65e9,2021-06-09 06:27:47,Stefan Behnel,Simplify code and add a comment.,['Cython/Compiler/ParseTreeTransforms.py']
7b018126aefb100a4f00aeba121688e8a168ee22,2021-06-06 05:11:37,Robert Bradshaw,"Merge pull request #4213 from da-woods/cppclass-optimize

Fixed optimizations in defined cppclass","['Cython/Compiler/ParseTreeTransforms.py', 'tests/run/cpp_classes_def.pyx']"
c8820cf94d66eeebe9b39d9241fba71f2d2cad19,2021-06-05 11:39:45,da-woods,"Fixed optimizations in defined cppclass

The problem was they were being skipped with SkipDeclarations","['Cython/Compiler/ParseTreeTransforms.py', 'tests/run/cpp_classes_def.pyx']"
b3f8a198d96727c9111dbc707a05e286b93c974c,2021-05-26 18:15:13,Stefan Behnel,Split up macOS CI jobs to avoid arbitrary timeouts.,['.github/workflows/ci.yml']
565ba94e883e9bff328ade1e1cdefc70355d2b54,2021-05-26 15:41:35,Stefan Behnel,Minor doc fixes.,"['docs/src/reference/extension_types.rst', 'docs/src/userguide/special_methods.rst']"
1027db04fb7c5bbfea2b9bcdfce0b1f384e26a93,2021-05-26 13:30:17,Stefan Behnel,"Assume that all live PyPy3 installations know about the correct Py3 signature of PyEval_EvalCode() by now.
See discussion leading up to https://github.com/conda-forge/cython-feedstock/pull/75#issuecomment-848770641",['Cython/Utility/Builtins.c']
d75160b7e05b28bc71da8d38dcdad4283e631d9f,2021-05-26 13:18:58,Stefan Behnel,Fix ReST formatting.,['docs/src/userguide/special_methods.rst']
67840ef315e4e9c47c523c666dc38f4d18fb5a33,2021-05-26 13:15:03,Stefan Behnel,Update changelog.,['CHANGES.rst']
ee294b7dfda3dacf8c8d43b6e526844d9b3f8339,2021-05-26 13:11:10,Stefan Behnel,docs: Update special methods table on arithmetic methods. They now have Python semantics.,['docs/src/userguide/special_methods.rst']
f6d05dcb32f18751c5e461f2e9261bdaa5b70fb7,2021-05-26 12:36:17,Stefan Behnel,Improve documentation on @total_ordering decorator.,['docs/src/userguide/special_methods.rst']
6551865669cc77d91a8a1ecba9a15d1825ac1197,2021-05-26 12:32:50,Stefan Behnel,Merge branch '0.29.x',[]
169bab169907a313119c7566cdde01a9368d3bbd,2021-05-26 12:32:30,Stefan Behnel,Add dependency file for docs build.,['doc-requirements.txt']
51b2f29dc2f7a3162f7653a81992d93f9c897eb7,2021-05-26 12:17:21,Matti Picus,DOC: add documentation for total_ordering decorator (GH-4195),['docs/src/userguide/special_methods.rst']
e36091ffe2d7ddbf6d1c44a8a9ca5546a3564efc,2021-05-26 09:26:46,Stefan Behnel,Fix a typo.,['docs/src/userguide/special_methods.rst']
f902c26b5516d44e6f41deb815cbfc5f4aa7aaf3,2021-05-26 06:46:22,Spencer Brown,"Implement @total_ordering decorator for extension types (GH-3626)

Implements https://github.com/cython/cython/issues/2090","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Options.py', 'Cython/Shadow.py', 'tests/errors/e_exttype_total_ordering.pyx', 'tests/run/exttype_total_ordering.pyx']"
a0a105d305f910c63dd0b12481842fd17580cb6e,2021-05-25 19:03:25,Ashwin Srinath,"Add support for C++17 execution policy parameter (GH-3790)

* Add execution policy overloads to all algorithms
* Add update_cpp17_extension for cpp17 tests
* Fix type deduction logic for forwarding reference argument","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Includes/libcpp/algorithm.pxd', 'Cython/Includes/libcpp/execution.pxd', 'runtests.py', 'tests/run/cpp_forwarding_ref.pyx', 'tests/run/cpp_stl_algo_execpolicies.pyx']"
28c35f432f73b0b710cc5f6a823e11bca53265b0,2021-05-25 15:37:59,Stefan Behnel,"Change the declaration of PyFloat_FromString to the Py3 signature and provide a fallback for Py2.

Closes https://github.com/cython/cython/issues/3909",['Cython/Includes/cpython/float.pxd']
70be8d1bd837f4c0995456be343046ea96a3915d,2021-05-25 15:18:44,scoder,"Split the current ""CYTHON_COMPILING_IN_LIMITED_API"" macro guard (GH-3611)

* Split the current ""CYTHON_COMPILING_IN_LIMITED_API"" macro guard into separate feature guards:
1) using a global module state struct (""CYTHON_USE_MODULE_STATE"")
2) using PyType_FromSpec() for extension types (""CYTHON_USE_TYPE_SPECS"")
3) actual limited-API special casing (""CYTHON_COMPILING_IN_LIMITED_API"")

* Start using PyType_FromModuleAndSpec() for creating extension types since that adds the module reference with PEP-573.

* Do not pass the module reference into *shared* extension types since we do not want to keep the module alive just because other modules still refer to the type.

* Mark the Limited-API and module state struct features as experimental.

* Add CI setups for using PyType_FromSpec() for creating extension types.

* Avoid overly complicated code in __Pyx_FetchCommonTypeFromSpec() when we are not compiling against the Limited-API.

* Correctly set up the bases tuple for PyType_FromSpecWithBases() and stop relying on the PyTypeObject struct being available in several places by using the type pointer instead (and setting it early enough).

* Set the ""tp_dealloc"" slot from the type spec, also for the limited API case.

* Generally re-enable the ""heaptype bases hack"" when creating extension types.

* Implement ""tp_dictoffset"" slot when using type specs in Py3.9+.

* Fix and simplify the vtable setup in the limited API config.

* Make CyFunction inheritable to ""correctly"" allow FusedFunction subclassing it.

* Enable buffer interface support when using type specs by assigning the ""tp_as_buffer"" slot explicitly after creating the type.

* Set ""vectorcalloffset"" when using type specs.

* Make ""__bool__"" slot prefer Py3+ name instead of Py2 name to make the correct name (""Py_nb_bool"") appear in the type spec.

* Validate and fix up all extension types when constructing them from type specs (not only the internal ones).

* Only call PyType_Modified() once after changing a type, not once per change.

* Turn the ""no buffer protocol in the limited API"" error into a warning since the user code might still work without it.

* Enable the same flags for CyFunction in the static type and type spec case since it's shared across modules and thus, we might otherwise end up with differently configured types in the same runtime.

* The names of Cython's internal types (functions, generator, coroutine, etc.) are now prefixed with the shared module name, instead of making them look like homeless builtins.
See https://bugs.python.org/issue20204
See https://github.com/python/cpython/commit/490055a1673b524da2ebe2312f072aba2a826036

* Work around a CPython bug that makes it overwrite exttype member definitions for the ""__module__"" attribute.
See https://bugs.python.org/issue40703

* Inherit buffer slots manually since type slots don't support them and thus PyType_Ready() does not see them.

* Add METH_METHOD call support (currently unused).

* Fix the vectorcall offset used in CyFunction type struct in Py3.9, if it inherits from PyCMethodObject instead of PyCFunctionObject.

* Work around the duplicate creation of the ""OverrideCheckNode"" for fused cpdef functions.
See https://github.com/cython/cython/issues/3628

* Decref the type when deallocating instances of heap types in Py3.8+.
See https://bugs.python.org/issue35810

* Look up the fused dispatch function in the override check, not the specialisation (which shouldn't be overridden all by itself).
Closes https://github.com/cython/cython/issues/3628

* Avoid running the override check for CyFunction, just because it's not a PyCFunction itself.","['.github/workflows/ci.yml', 'Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Naming.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/CommonStructures.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Tools/ci-run.sh', 'appveyor.yml', 'tests/compile/types_and_names.pyx', 'tests/limited_api_bugs.txt', 'tests/run/cdef_multiple_inheritance_errors.srctree', 'tests/run/pstats_profile_test.pyx', 'tests/run/special_methods_T561.pyx']"
3aed7ef59c88e1e2c3843b3446b79608410658c3,2021-05-25 11:53:56,Stefan Behnel,CI: mark Py3.10-dev jobs as expected to succeed (for now).,['.github/workflows/ci.yml']
61d83e0b191a691cfc9da0aaea0c5cbbae96bb13,2021-05-25 11:42:04,Stefan Behnel,CI: mark GCC-11 jobs as expected to succeed.,['.github/workflows/ci.yml']
fb363a2ae6004f9f8820a315f9ac59d76849ff97,2021-05-25 11:16:47,Stefan Behnel,CI: try to fix setup script.,['.github/workflows/ci.yml']
28dafcd7e84b657a17e2edb0b019a0dda1f77a8a,2021-05-25 11:01:21,Stefan Behnel,CI: Fix typo in script.,['Tools/ci-run.sh']
ce56d839ec4dd4d76f8a851f1709ee687bd7d132,2021-05-25 10:59:24,Stefan Behnel,CI: Always install latest pip version on recent Python 3 versions.,['Tools/ci-run.sh']
3f05fb2e101ba6a8d22ad66e4e308108f7eac66a,2021-05-25 10:49:50,Stefan Behnel,Add CI jobs that test with GCC 11.,"['.github/workflows/ci.yml', 'Tools/ci-run.sh']"
1eac3022a3b304ad673f35eb353c15a1f10728d7,2021-05-25 10:35:14,Stefan Behnel,Avoid compiling Cython and installing gcc etc. in code style CI job since if's not used there.,"['.github/workflows/ci.yml', 'Tools/ci-run.sh']"
c1b946d01f9c285bf958064d3c350e9911d49655,2021-05-25 10:34:15,Stefan Behnel,Keep docs around as archive in style checks job.,['.github/workflows/ci.yml']
e83547f345445b997851adcb903fb3e4e4587f5d,2021-05-25 10:20:07,Stefan Behnel,Install Jupyter as docs dependency since it also installs the ipython lexers for Pygments.,['doc-requirements.txt']
335d3a39100c658d9333996f8054801c5666b551,2021-05-25 10:10:32,Stefan Behnel,ReST fix.,['CHANGES.rst']
6a09aebc4bd91cfee61d252c9bbbf6544d72f082,2021-05-25 09:31:48,Stefan Behnel,Include docs build in CI code style check.,['Tools/ci-run.sh']
23c3e1e71c42ac4a3d791267a1f8f7ac3df1c3cc,2021-05-25 09:20:54,Stefan Behnel,docs: Use the Cython + IPython lexers that come with Pygments to avoid having to maintain our own ones.,"['docs/conf.py', 'docs/sphinxext/cython_highlighting.py', 'docs/sphinxext/ipython_console_highlighting.py']"
3570d5ab094e9a3d90e8fdbfbd8a934a017e8b02,2021-05-25 09:02:59,Stefan Behnel,Fix many ReST issues in the docs.,"['docs/src/quickstart/build.rst', 'docs/src/tutorial/clibraries.rst', 'docs/src/tutorial/cython_tutorial.rst', 'docs/src/tutorial/numpy.rst', 'docs/src/tutorial/pxd_files.rst', 'docs/src/userguide/extension_types.rst', 'docs/src/userguide/external_C_code.rst', 'docs/src/userguide/numpy_tutorial.rst', 'docs/src/userguide/source_files_and_compilation.rst', 'docs/src/userguide/wrapping_CPlusPlus.rst']"
19e47dca2e03aeff2d2fc2cdc81a31eba7c64478,2021-05-25 07:54:29,Stefan Behnel,Update changelog.,['CHANGES.rst']
c6571f327e8e4e14e98eaa492967721ccdbe2952,2021-05-24 16:59:24,Stefan Behnel,Correct release date.,['CHANGES.rst']
6889482cebefe93d5599b56f3a0389224e92bff5,2021-05-24 14:18:26,Stefan Behnel,Prepare release of Cython 3.0a7.,"['CHANGES.rst', 'Cython/Shadow.py']"
8bc7ca53da0c8dd009c971a30d69504181867b61,2021-05-24 13:55:58,Stefan Behnel,Update changelog.,['CHANGES.rst']
b212f39bc4369347251fc29c4c69184fda17a1a1,2021-05-24 13:57:52,scoder,"Revert ""Optimize enumerate() with start argument and  (GH-4077)"" (GH-4192)

This broke C++ map iteration code, which needs a better fix.
See https://github.com/cython/cython/issues/4171
Reverts https://github.com/cython/cython/pull/4077

This reverts commit 415c049611f118e2ecdd31ee1210d230e823f83e.","['Cython/Compiler/FlowControl.py', 'Cython/Compiler/TypeInference.py', 'tests/run/for_in_string.pyx']"
0531b72c6d9fb8ba44b8e365693066e15c7edce7,2021-05-24 10:34:56,Søren Fuglede Jørgensen,Add operator= to shared_ptr for assignments to base classes (GH-4185),"['Cython/Includes/libcpp/memory.pxd', 'tests/run/cpp_smart_ptr.pyx']"
d53646f193bf8be44495c3294d8c76c986b7921e,2021-05-24 10:25:24,da-woods,"Fix type inference on builtin max (GH-4156)

Also remove ErrorType type defaults for nodes in ExprNodes

Closes https://github.com/cython/cython/issues/4155","['Cython/Compiler/ExprNodes.py', 'tests/run/type_inference.pyx']"
30f72282479d024a97f8d91a5b7bf64450becd86,2021-05-23 20:58:12,Max Bachmann,Enable usage of std::move() only in the supported versions of MSVC  (GH-4191),['Cython/Includes/libcpp/utility.pxd']
1489b16a2d2b67eed47d085f2a11840fb8527453,2021-05-23 17:02:41,scoder,"Support cimports in pure Python code. (GH-4190)

Uses a special package prefix ""cython.cimports"", followed by the actual .pxd module/package names.
Also allows ""import cython.cimports.libc.math as libc_math"" etc., rather than only ""from ... import ..."".
All we need to guard against is that the import does not overwrite the name ""cython"".","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Shadow.py', 'docs/src/tutorial/pure.rst', 'tests/errors/e_pure_cimports.pyx', 'tests/run/pure_py_cimports.py', 'tests/run/pure_pyx_cimports.pyx']"
4d53305ef95d22bdcd0c923ce200fab7e07c5071,2021-05-23 16:03:02,Stefan Behnel,"Work around a bug in PyPy 7.3.4 / 7.3.5.
https://foss.heptapod.net/pypy/pypy/-/issues/3404",['tests/run/fstring.pyx']
503f828fa9f8faf8c961de6ca99e2ed03bb834dc,2021-05-23 14:57:47,Stefan Behnel,Move a Py3.6-only test into a suitable pure-Python test file.,"['tests/run/pep526_variable_annotations.py', 'tests/run/pure_py3.py']"
110feebd0e236f00077b26557a1695923ca7b1f3,2021-05-22 20:56:27,Stefan Behnel,"Assume that any assignment to a variable that has a PEP-526 type annotation is the first assignment to that variable.
This makes literal list assignments to declared pointers work.","['Cython/Compiler/Parsing.py', 'tests/run/pure_py3.py']"
59546849ed730a4585162f5702ad85a53e5db280,2021-05-22 20:37:28,Stefan Behnel,"Fix a crash when compiling a module without statements, only a single declaration.","['Cython/Compiler/ParseTreeTransforms.py', 'tests/compile/fused_unused.pyx']"
2570b55e093b1cddbc511f26d2d159aa064f79df,2021-05-22 18:24:44,Stefan Behnel,"Fix pure Python struct test in Py<3.6 where keyword dicts are unordered. This means that cython.struct(x=int, y=float) has a non-deterministic order.",['tests/run/pure_py.py']
b5a546a929a6085b0a8db10412df6caddd241752,2021-05-22 16:00:53,Stefan Behnel,Allow struct instantiation from positional arguments in pure Python mode.,"['Cython/Shadow.py', 'tests/run/pure_py.py']"
186c80f82950d1186a0910727a7de97448fc33ac,2021-05-21 14:02:18,Alessandro Molina,Add --skip-interpreter option,['Cython/Debugger/Cygdb.py']
5a148d30397a10a0ecbae626c06ac1f8b293e637,2021-05-21 08:05:39,Stefan Behnel,"Add missing incref.
Closes https://github.com/cython/cython/pull/4183
Closes https://github.com/cython/cython/issues/4182",['Cython/Utility/CythonFunction.c']
940d80dcd5cbc8d55a0f9348d1a2472e9b8b7121,2021-05-20 19:54:14,Stefan Behnel,Merge branch '0.29.x',['Cython/Compiler/Nodes.py']
da26b4a2131993df9e68c34213ca688b43b5970c,2021-05-20 19:54:01,Stefan Behnel,"ALways mark the entry of generator expression functions as used. Because, why not, they probably are. And it avoids false warnings.
Fixes https://github.com/cython/cython/issues/1699",['Cython/Compiler/Nodes.py']
f7f445cbda02765a0a587e88a96dd2378189a9f6,2021-05-20 18:34:09,Stefan Behnel,"Include .h and _api.h files in target overwrite check.
See https://github.com/cython/cython/issues/4177
See https://github.com/cython/cython/pull/4178","['Cython/Compiler/ModuleNode.py', 'tests/run/existing_output_files.srctree']"
83020d996733b5376cfa5814ca81c8f823029346,2021-05-20 14:12:06,Stefan Behnel,Repair a Python compatibility test in Py3.10.,['tests/run/pyclass_annotations_pep526.py']
7bbd4915b6e476569669a47ab9e3ae4674a4eabf,2021-05-20 13:53:09,scoder,"Refuse to overwrite output C/C++ files that probably were not created by Cython (GH-4178)

This is a common gotcha for new users who name their .pyx file after the C file that they want to wrap.
Closes https://github.com/cython/cython/issues/4177","['Cython/Compiler/ModuleNode.py', 'Cython/Coverage.py', 'Cython/Utils.py', 'tests/run/existing_output_files.srctree']"
5cfe71decce9c84e9f9fd5220259b97162fd28df,2021-05-19 10:23:55,Stefan Behnel,Merge branch '0.29.x',[]
be3b178296975b976107f41a6383291701e0297f,2021-05-15 20:39:47,Stefan Behnel,Apply some standard macro safety fixes.,['Cython/Utility/Profile.c']
8d177f4aa51a663e8c51de3210ccb329d7629d36,2021-05-15 20:38:57,Stefan Behnel,"Fix another direct usage of ""tstate->use_tracing"" in Py3.10.",['Cython/Utility/Profile.c']
fa5d2f5bc7c8ffbc7f80971cd7e93085f77b61f2,2021-05-14 17:39:58,Stefan Behnel,Adapt tracing code to Py3.10 beta 1.,['Cython/Utility/Profile.c']
905905d9997252abe77f3644ae3d0184af41688c,2021-05-18 21:30:18,Ralf Gommers,"Add a Code of Conduct, and a reporting manual for it (GH-4168)","['.github/code-of-conduct.md', '.github/report-handling-manual.md']"
0cf38b12687f66bebaae8ae6aa41687d978ff64b,2021-05-18 09:55:29,Stefan Behnel,Disable some plain Python (non Cython related) tests that fail in Py3.10 due to changed error messages.,['tests/run/test_exceptions.pyx']
505e90f9131ab2e0fc6a009c07e75c06885ac495,2021-05-18 08:02:25,Yu Feng,"Use std::move in c++ during yield context switch. (GH-4154)

When compiling pyarrow with cython 3.0 we get an error about the copy constructor of an object has been deleted on the generated context switch code.

Also make the ""cpp_temp_assignment"" test only run in C++11 since it is based on `std::move()`.","['Cython/Compiler/ExprNodes.py', 'runtests.py', 'tests/compile/cpp_temp_assignment.pyx']"
9b98c4b872b813bd9118c5abec905b9097dbbf6c,2021-05-15 22:26:07,da-woods,"Fix move-if-supported for function wrappers (GH-4164)

The condition wasn't triggering so code wasn't being tested (). This applies to:
```
def f(vector[double] x):
  pass
```
which should now generate:
```
__pyx_v_a = __pyx_convert_vector_from_py_double(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 5, __pyx_L3_error)
...
__pyx_r = __pyx_pf_4cnvt_f(__pyx_self, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_a));
```

I haven't included any specific tests because I think it should be covered by the existing test-suite (now that it works) and it's only a performance improvement - it doesn't allow any new behaviour.

See https://github.com/cython/cython/issues/4163",['Cython/Compiler/Nodes.py']
e93c2c556c5c15148763b26c6e3eef35ee88a22f,2021-05-15 20:49:39,matsjoyce,Fix annotations for decorated classes (GH-4151),"['Cython/Compiler/Nodes.py', 'runtests.py', 'tests/run/pep557_dataclasses.py', 'tests/run/pep563_annotations.py']"
fa922c9d21ffd6b0c4650e03b4cef1048d17947f,2021-05-15 20:42:45,Stefan Behnel,"Test runner: make ""-k"" option also select amongst the unit tests, not only doctests.
(Tried the ""pattern"" argument to loadTestsFromModule() in the unittest module, but it's not always taken into account, so manual selection is what works.)",['runtests.py']
2769b3c9b13571b8b3bb0463cee045bc187ff14f,2021-05-15 20:39:47,Stefan Behnel,Apply some standard macro safety fixes.,['Cython/Utility/Profile.c']
78f1ca8ed3c6c7757fcc19907400618ed3d7817d,2021-05-15 20:38:57,Stefan Behnel,"Fix another direct usage of ""tstate->use_tracing"" in Py3.10.",['Cython/Utility/Profile.c']
8b776e06559dcad35cfe1a584fc5cf708f0811a6,2021-05-14 20:16:59,Stefan Behnel,Minor code cleanups.,['Cython/Compiler/Nodes.py']
8127e2d738c0de2e99e87cbeff0874c2fb32b364,2021-05-14 19:28:28,Stefan Behnel,Remove some dead code.,['Cython/Compiler/MemoryView.py']
c79ae55a7440459dae7667699284a72b09e89185,2021-05-15 08:13:52,Max Bachmann,Silence C compiler warnings about unused variables in a universal way (GH-4162),"['Cython/Utility/AsyncGen.c', 'Cython/Utility/Buffer.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/MemoryView_C.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/StringTools.c']"
afda509f7b0da4ac392af4cf45f27a0bf5c9dc0f,2021-05-14 21:21:31,Max Bachmann,Fix implicit sign conversion warning (GH-4148),['Cython/Utility/ObjectHandling.c']
034fc26c1c25b5b69581464b73136038bb201ce4,2021-05-14 21:18:01,Max Bachmann,Avoid shadowing an outer variable (GH-4147),['Cython/Utility/ExtensionTypes.c']
3fcd833b89c0d12e16271d30ba407c4fb4978b11,2021-05-14 19:04:01,Stefan Behnel,"Disable ""cycoverage"" test job since it currently fails, probably dude to issues with the ""Cython.Coverage"" plugin.",['.github/workflows/ci.yml']
0448bfbb9a1845a3cca5d07a32fdd4590f538713,2021-05-14 18:06:20,Stefan Behnel,Add a coverage test job with a compiled Cython package to compare plain Python and compiled Cython both for completeness and speed.,"['.github/workflows/ci.yml', 'Tools/ci-run.sh', 'setup.py']"
c9cccfeaf3f0e20c2bb14fc234e86f4fc8e4fe81,2021-05-14 17:39:58,Stefan Behnel,Adapt tracing code to Py3.10 beta 1.,['Cython/Utility/Profile.c']
d6069248cfa7176742a218e15df8550fd1c033ef,2021-05-14 17:38:41,Zhenbo Li,Add test job for code coverage analysis (GH-4157),"['.github/workflows/ci.yml', 'Tools/ci-run.sh']"
c1dc048b7ab5e6f031d2ccd3e91790f7305b78e4,2021-05-14 14:11:56,Stefan Behnel,Fix conditional code in __Pyx_PyType_Ready() for Py3.10.,['Cython/Utility/ExtensionTypes.c']
18fc9f76d30de96afdaec7965a08d1415c803b94,2021-05-14 10:36:01,Stefan Behnel,Use a dedicated test requirements file for Py3.4/5.,"['Tools/ci-run.sh', 'test-requirements-34.txt']"
b52f45ab030e6d02be52dfd991495de918c67511,2021-05-14 09:50:46,Stefan Behnel,Test: use newer NumPy version in recent Python versions.,"['Tools/ci-run.sh', 'test-requirements.txt']"
bf8fc6b7f2e9fdcf8b46fabaa4dc854562be64b0,2021-05-14 09:26:47,Stefan Behnel,Exclude end-to-end tests from test runs with '--cython-only' since they execute arbitrary test code.,['runtests.py']
16aba7eb35b2a6f0c88b53da00539a5d875ebfdf,2021-05-11 21:04:21,Matus Valo,"Execute AlignFunctionDefinitions before MarkClosureTransform. (GH-4127)

This commit fixes a crash of Cython when generator expressions are used in cdef functions in pure python mode.
Closes https://github.com/cython/cython/issues/3477","['Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Pipeline.py', 'tests/run/pure_pxd.srctree']"
b1f7d5927b902e8ec978898d5ab0e5cc0491127a,2021-05-10 14:49:23,Max Bachmann,Reduce memory allocations in C++ to PyList Conversions (GH-4081),['Cython/Utility/CppConvert.pyx']
bc3dd1a2ece6e72d80e2796af3737a1cb65b6142,2021-05-07 13:03:31,Stefan Behnel,"Add C++ ""to_string()"" function to declarations.","['Cython/Includes/libcpp/string.pxd', 'tests/run/cpp_stl_string.pyx']"
21aeab70b7ad48036db715d01c9b651c776e4272,2021-05-06 09:46:25,Stefan Behnel,Optimise float(int).,"['Cython/Utility/TypeConversion.c', 'tests/run/builtin_float.py']"
c137916c358770587ac6ca58a28a55fdd7c17f27,2021-05-06 08:19:11,Andrew Brown,"Add error handling to __Pyx__PyNumber_Float() (GH-4144)

The implementation of __Pyx__PyNumber_Float() wasn't checking whether
errors occurred on the calls to __Pyx_PyUnicode_AsDouble(),
__Pyx_PyBites_AsDouble(), and __Pyx_PyByteArray_AsDouble(). Errors from
those functions were now properly propagated to the caller.

Closes https://github.com/cython/cython/issues/4143","['Cython/Utility/TypeConversion.c', 'tests/run/builtin_float.py']"
0e80efb82480b777057770ce2006a6b46ec46028,2021-05-03 21:17:50,Ashwin Srinath,"Correctly process the entries of overloaded extern static C++ methods (GH-4129)

Closes https://github.com/cython/cython/issues/1851","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/run/cpp_static_method_overload.pyx']"
535cba088ce29c1e16febaa37642d01563b36baf,2021-05-03 21:11:15,Stefan Behnel,Merge branch '0.29.x',['Cython/Utility/ObjectHandling.c']
2f493526d09ac8fa3d195bee14a3c9df5e649041,2021-05-03 05:40:52,Stefan Behnel,Fix bash script syntax.,['Tools/ci-run.sh']
3caeb8edeb340dab24c78d3e2c8a230ba9e64ebd,2021-05-03 05:37:26,Stefan Behnel,"Disable some unicode fstring tests for the debugging (f""{...=}"") feature since unicode strings come out as ""u'...'"" in Py2.",['tests/run/test_fstring.pyx']
64055e5dcfca2a009e5086b585e3149cfab76c42,2021-05-03 05:22:15,Stefan Behnel,"Always show ccache statistics at the end, also in case of test failures.",['Tools/ci-run.sh']
3e1712bf92a5589921398e659c366820aaa61a0f,2021-05-03 05:12:35,Stefan Behnel,Avoid string concatenation where we can just compare characters separately.,['Cython/Compiler/Parsing.py']
09628248e212ecb08a51d017bc67e4f37452d92a,2021-05-03 05:08:20,davfsa,"Self documenting f-strings (GH-3939)

Closes https://github.com/cython/cython/issues/3796","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Parsing.py', 'tests/run/test_fstring.pyx']"
d8f4fed0c295cfa1a719356bc6015695eed65e73,2021-05-02 21:51:57,da-woods,"Fix .__class__() calls on builtin types (GH-3956)

Fixes https://github.com/cython/cython/issues/3954

The problem seems to be that __Pyx_CallUnboundCMethod0 optimizes the call incorrectly. This patch avoids it getting sent to that mechanism.","['Cython/Compiler/Optimize.py', 'Cython/Compiler/Visitor.py', 'tests/run/builtin_types_class.py']"
8e3a0a421a3114cd33869f724b27e8bcf561e103,2021-05-02 21:44:50,matham,Don't use symbolic links on Windows since it may require admin rights. (GH-3815),['runtests.py']
019aebdf5a345087cf4051d3c63d43f6984d7503,2021-05-02 21:41:17,Victor Stinner,"Use Py_TYPE() and Py_REFCNT() macros (GH-3932)

Don't access directly PyObject.ob_type and PyObject.ob_refcnt members.","['Cython/Utility/Builtins.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ObjectHandling.c']"
fbebd7d1946afa561b2be133e06e7644e4251c6e,2021-05-02 21:40:09,Tim Gates,"docs: fix simple typo, equalivalent -> equivalent (GH-3953)",['Cython/Utility/ModuleSetupCode.c']
3962e903b2e34e01d0877d03f1625db85c005d5b,2021-05-02 17:27:05,Stefan Behnel,Correct the return type of the ..._GET_TZINFO() macros (which return a borrowed reference) and add corresponding properties so people don't have to use them.,"['Cython/Includes/cpython/datetime.pxd', 'tests/run/datetime_members.pyx']"
14559510a46605d0fe0d8098518e138b181dcd18,2021-05-02 16:48:13,Bluenix,Add missing declarations to datetime.pxd (GH-4128),"['Cython/Includes/cpython/datetime.pxd', 'tests/run/datetime_cimport.pyx', 'tests/run/datetime_members.pyx', 'tests/run/datetime_pxd.pyx']"
1b98f7b128ce6ef550019eb0a1a5f1049056dc9f,2021-05-02 14:32:15,Stefan Behnel,"Work around a bug in PyPy 7.3.4.
https://foss.heptapod.net/pypy/pypy/-/issues/3404",['tests/run/fstring.pyx']
5bb690d59ebf896ed2e04272a3ce3cf2d84c82f7,2021-05-02 14:24:11,Stefan Behnel,Let a tracing test run slower to prevent div-by-zero crashes in line_profiler due to measured zero runtime.,['tests/run/line_profile_test.srctree']
25cd29f636fea66000a08c0a5527a5ab4bcb0b28,2021-05-02 13:41:05,Stefan Behnel,Simplify GHA ccache key.,['.github/workflows/ci.yml']
10f5d797c95c6d0151f43ba3d2475502c5dd4158,2021-05-02 13:26:57,Stefan Behnel,"Fix GH-Actions cache key. Apparently, it must not contain "","", and there is no ""replace"" function.",['.github/workflows/ci.yml']
47f80110d379a1515a947849867659854273471f,2021-05-02 10:16:52,Stefan Behnel,Reconfigure ccache and add the backend (C/C++) to the cache key to distinguish between the compiler jobs.,['.github/workflows/ci.yml']
692b97a3ca5f84e37a266b3cfd3b028edcc08ce6,2021-05-02 09:51:35,Stefan Behnel,"Augmenting the PATH does not work like this in ci.yml, so do it in the test runner script.","['.github/workflows/ci.yml', 'Tools/ci-run.sh']"
5e66fb3cd48f2f83730d68884243739f38ea93d9,2021-05-02 09:46:21,Stefan Behnel,Fix yaml syntax.,['.github/workflows/ci.yml']
90f974de77c94e38c42cbe7218a53e42eee33820,2021-05-02 09:44:14,Stefan Behnel,Enable ccache usage on Github Actions.,['.github/workflows/ci.yml']
df712c331c08ec92c0e10d8c7d5e400f91c90760,2021-05-02 09:39:57,Stefan Behnel,Make test script exit code non-0 on test failures.,['Tools/ci-run.sh']
8daa7431a128e0c61a4c62ebe196aa97551904f7,2021-05-02 09:01:15,Stefan Behnel,"Run the debugger tests after the build, right before the other tests.",['Tools/ci-run.sh']
f556f8f6ba2a9f02992f5ad290e8e09055b41c16,2021-05-02 08:55:13,Stefan Behnel,Print ccache statistics before and after the CI test runs.,['Tools/ci-run.sh']
e9ffbb8f3e30f8de9ba118d476167e64ca1e36f9,2021-05-02 08:35:50,Stefan Behnel,Make sure that test failures are easy to find in the logs by putting all information into the assertion.,['tests/run/py_unicode_strings.pyx']
a8e0f626eb49fe7525daf51a295a01655ea4ddbe,2021-05-02 08:23:54,Stefan Behnel,Improve test output on failures and avoid C compiler warnings about signed/unsigned comparison.,['tests/run/py_unicode_strings.pyx']
093b633c3d814e34dedd7529b5646d643132e82f,2021-05-02 06:50:51,Stefan Behnel,Debug a failing test in PyPy3.,['tests/run/py_unicode_strings.pyx']
b7c0ed9948b891373534a3f6d795fd6867b40068,2021-05-02 06:24:44,Stefan Behnel,"Set number of test shards back to 7.
Difficult to say which is best, but something around 7-9 apparently.
Accumulated C/C++ compile times only ever go up with increasing shard count (tried 5, 7, 8, 9, 12) but the total test time is lowest at 7-9, depending on the specific run. So, let's waste less cycles overall.",['Tools/ci-run.sh']
4c2396a47ba802204f84f7e6d86e7a817549f758,2021-05-02 05:40:27,Stefan Behnel,Try if changing the number of test jobs speeds up or slows down the builds on Github Actions.,['Tools/ci-run.sh']
251c8ece2cf4432d79d6cb04a5d2639d77c84fa2,2021-05-01 14:36:49,Stefan Behnel,Try if changing the number of test jobs speeds up or slows down the builds on Github Actions.,['Tools/ci-run.sh']
a79c4f0e144d82124bb58301f0d82ec4f87d1e5b,2021-05-01 14:36:16,Stefan Behnel,Try if changing the number of test jobs speeds up or slows down the builds on Github Actions.,['Tools/ci-run.sh']
494c705165b27ddea016b297eb696b87650f34cf,2021-05-01 07:05:03,Stefan Behnel,Try if increasing the number of test jobs speeds up or slows down the builds on Github Actions.,['Tools/ci-run.sh']
0e21225ff8b42f520cd068e1ab5874a1d7b045aa,2021-05-01 06:59:14,Stefan Behnel,Enable a test in PyPy that should now work again.,['tests/pypy_bugs.txt']
b365ca76615126f80d5615df46b1f7a2456fdf7c,2021-05-01 06:21:40,Stefan Behnel,Group some PyPy fallbacks together and add one for the missing PyUnicode_DecodeUnicodeEscape().,['Cython/Utility/ModuleSetupCode.c']
b3eeef06c01a5623acf5186e67dc987287e99457,2021-05-01 06:06:00,Stefan Behnel,Work around a bug in PyPy 7.3.4.,['Cython/Utility/ModuleSetupCode.c']
90f551c89c8807c529e09fba26cb47aa8c49359b,2021-04-30 22:03:41,Stefan Behnel,"Disable ""pycontextvar"" test in PyPy which (as of 7.3.4) seems to lack the C-API support for context variables.",['tests/pypy_bugs.txt']
415c049611f118e2ecdd31ee1210d230e823f83e,2021-04-30 21:46:30,Max Bachmann,"Optimize enumerate() with start argument and  (GH-4077)

Also fixes the control flow analysis for loop variable assignments in this case.
Closes https://github.com/cython/cython/issues/3787","['Cython/Compiler/FlowControl.py', 'Cython/Compiler/TypeInference.py', 'tests/run/for_in_string.pyx']"
cf863062af25bd7e7a5999d8e02fe52e15f44726,2021-04-30 20:15:51,Stefan Behnel,Try to fix the time_pxd test on GitHub Actions with a sledge hammer.,['tests/run/time_pxd.pyx']
846ce05ea1bba0fe0c85ee672ed3397198af722d,2021-04-30 20:05:06,Stefan Behnel,Adapt some exception messages for PyPy.,"['tests/run/pep448_test_extcall.pyx', 'tests/run/tuple.pyx']"
a35bd75c54b2f0d7afa3d5f44c09a80cdc7e516d,2021-04-30 18:36:43,davfsa,Switch to github actions (GH-3943),"['.github/workflows/ci.yml', '.travis.yml', 'Tools/ci-run.sh', 'docs/CONTRIBUTING.rst', 'runtests.py', 'tests/build/common_include_dir.srctree', 'tests/macos_cpp_bugs.txt', 'tests/pypy_bugs.txt']"
6af5d01e884e003fc0af44102b5638241e43f548,2021-04-30 18:31:37,Stefan Behnel,Make a test cleaner for what it should test. We do not care whether (Py2) 'str' works as long as unicode strings work.,['tests/run/unbound_special_methods.pyx']
c7069001e760df30ea356bd1c8da1a2e6a36885e,2021-04-30 13:36:07,Stefan Behnel,Resolve a C compiler warning in the fallback code for PyContextVar_Get() due to an invalid conditional expression that was mixing a void command with a pointer value.,['Cython/Includes/cpython/contextvars.pxd']
a0496ac83101f7242a00675bd8860930303398ad,2021-04-30 10:59:10,Stefan Behnel,Add some overloaded C++ string methods that we missing (actually using optional arguments).,['Cython/Includes/libcpp/string.pxd']
ec086a889fdebe08dad1f1fd627e14d4f8c541f1,2021-04-29 11:37:37,Stefan Behnel,"Add sort of a ""Related Work"" section to the github readme that references and compares other Python compiler projects.",['README.rst']
bea2bdac844027e8652077e8d3af40d435e1698c,2021-04-29 09:56:44,Stefan Behnel,Merge branch '0.29.x',[]
602d2827abab39ff7f411bbf04beb9db9031f776,2021-04-29 09:55:52,Stefan Behnel,Do not install Pythran in 0.29.x on travis since it is currently incompatible and unknown when it will work again.,['.travis.yml']
150759db52ca3219f7c777a712871391606d7064,2021-04-29 06:45:41,Stefan Behnel,Reorder a condition to make it clearer to read by avoiding the negation.,['Cython/Compiler/ExprNodes.py']
ee7ae0b9ce0dea51cf17adf119afe439917ee4c0,2021-04-29 06:39:31,Vladimir Matveev,"Preserve default arguments values on methods for introspection whenever possible (GH-4118)

Closes https://github.com/cython/cython/issues/4061","['Cython/Compiler/ExprNodes.py', 'tests/run/cyfunction_defaults.pyx', 'tests/run/py34_signature.pyx']"
735210462928d1d34efa739eed1b1ff36881eb58,2021-04-29 06:32:31,da-woods,"Fix windows linkage error for unicode modules by providing a dummy function (GH-4125)

A bug in distutils means that it tries to export a slightly incorrectly named PyInitU function. The fix in https://bugs.python.org/issue39432 wasn't quite right (`""_name"".encode(""punycode"") != ""name"".encode(""punycode"")`) and thus the ""unicode_imports"" test is failing on Windows 3.8+ when distutils explicitly tries to export a non-existing symbol.

We now create a dummy function with that alternative name so that the export doesn't fail.",['Cython/Compiler/ModuleNode.py']
b28ca3342b85142b24cfde0a0c55327a8a48e163,2021-04-29 06:01:38,Stefan Behnel,Merge branch '0.29.x',[]
bfc87d39fb35bffac5404bcc073d84b2514f32d9,2019-05-29 04:16:20,Pierre Glaser,Fix pickling unbound cython methods (GH-2969),"['Cython/Utility/CythonFunction.c', 'tests/run/reduce_pickle.pyx']"
352a8b641990526570e97ce685ec82c69aa0a80c,2021-04-28 16:31:35,Stefan Behnel,Use new PyGC_Enable() and PyGC_Disable() functions in CPython 3.10 where we need to temporarily disable the GC.,['Cython/Utility/ExtensionTypes.c']
db1a7dab0482cd618af39969f5d4df606eff7cd5,2021-04-28 11:23:12,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Utility/Coroutine.c', 'tests/run/generators.pyx']"
cb53a50cf30aa75cbc98c31292a5e5a914c3f4a4,2019-01-18 14:33:19,Stefan Behnel,"Implement ""gen.gi_frame"" and ""coro.cr_frame"" attributes on generators and coroutines that return an inspectable (although otherwise dead) frame object.

Closes https://github.com/cython/cython/issues/2306","['CHANGES.rst', 'Cython/Utility/Coroutine.c', 'tests/run/coroutines.py', 'tests/run/generators.pyx']"
1cc58b510795b3932ba810a38c2180f64c57047e,2021-04-28 06:19:21,Stefan Behnel,"Provide a fallback implementation for PyContextVar_Get() that always returns the default value on Py<3.7.
This is currently needed to make the inline functions compile, because it seems that we are not properly excluding unused ones.",['Cython/Includes/cpython/contextvars.pxd']
ff16389c0da5acc2be1b49fd074b0919cb252b88,2021-04-27 19:55:16,Stefan Behnel,"Correct the declaration of PyContextVar_New() and add convenience functions for getting context variable values.

See https://github.com/cython/cython/issues/2281
See https://github.com/cython/cython/pulls/4088","['Cython/Includes/cpython/contextvars.pxd', 'runtests.py', 'tests/run/pycontextvar.pyx']"
bca0276c24f11dd3c0a9ab31e65c77c30ff687a9,2021-04-27 14:38:35,Stefan Behnel,Clean up legacy syntax usage in test.,['tests/run/pstats_profile_test.pyx']
24c533e0230119d2d91828454aa9427fc3c8b32d,2021-04-27 19:01:58,zoj613,"Add declarations for CPython’s Context Variables C-API (GH-4088)

Closes https://github.com/cython/cython/issues/2281","['Cython/Includes/cpython/__init__.pxd', 'Cython/Includes/cpython/contextvars.pxd', 'tests/run/cython_includes.pyx']"
358418eb260cec54f4f619c517893d4ba2ae318d,2021-04-26 13:47:00,Max Bachmann,Catch more exceptions from C++ standard containers (GH-4079),"['Cython/Includes/libcpp/deque.pxd', 'Cython/Includes/libcpp/list.pxd', 'Cython/Includes/libcpp/string.pxd', 'Cython/Includes/libcpp/vector.pxd', 'Cython/Utility/CppConvert.pyx']"
0c819bf5d94adb5d6018b851d7fbcca2de03d251,2021-04-26 13:24:46,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
2dd3be0a8ca25c1d484f70d4390e4a44952aecd1,2021-04-26 13:22:47,Stefan Behnel,Update changelog.,['CHANGES.rst']
175b00de51d43d7130c90a655e12826c2de6a0d6,2021-04-26 13:12:04,da-woods,"Include utility code for inline memoryview functions found in .pxd files (GH-4134)

The utility code was generated at too late a stage, after the utility code from the pxd was merged into the pyx scope.

Fixes #1415","['Cython/Compiler/ExprNodes.py', 'tests/memoryview/memoryview_inline_pxd.srctree']"
fda645f6ba314f776a068fdf12a4c4651c1418db,2021-04-26 13:12:04,da-woods,"Include utility code for inline memoryview functions found in .pxd files (GH-4134)

The utility code was generated at too late a stage, after the utility code from the pxd was merged into the pyx scope.

Fixes #1415","['Cython/Compiler/ExprNodes.py', 'tests/memoryview/memoryview_inline_pxd.srctree']"
24057adc72f09b9c9c12f6e1f9a2ffceb8fea466,2021-04-25 21:15:16,realead,Capture and redirect stdout/stderr for %%cython-magic to show C compiler warnings/errors (GH-3872),"['Cython/Build/IpythonMagic.py', 'Cython/Build/Tests/TestIpythonMagic.py']"
25fc4b43b6d6e851c8bba26bd35b13ae086944e9,2021-04-25 05:22:12,Stefan Behnel,Merge branch '0.29.x',[]
a89a881286d3c709c35843642fbf5a02ca648418,2021-04-25 05:12:44,scoder,"Make ""__Pyx_UnicodeContainsUCS4()"" work for WCHAR unicode strings with Py3.9+. (GH-4135)

* Use the same fallback as for missing PEP-393 support.
* Prepare for ""PyUnicode_READY()"" and ""PyUnicode_WCHAR_KIND"" to be removed in Py3.12.
  See https://www.python.org/dev/peps/pep-0623/
* Avoid C compiler warnings about deprecated C-API functions in Py3.9+.

Closes https://github.com/cython/cython/issues/3925","['Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/StringTools.c']"
5f8c72dfa8ffb7c2a9b85552f65fc2f0fe85f2fe,2021-04-25 05:12:44,scoder,"Make ""__Pyx_UnicodeContainsUCS4()"" work for WCHAR unicode strings with Py3.9+. (GH-4135)

* Use the same fallback as for missing PEP-393 support.
* Prepare for ""PyUnicode_READY()"" and ""PyUnicode_WCHAR_KIND"" to be removed in Py3.12.
  See https://www.python.org/dev/peps/pep-0623/
* Avoid C compiler warnings about deprecated C-API functions in Py3.9+.

Closes https://github.com/cython/cython/issues/3925","['Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/StringTools.c']"
30f5ad30542c63156e4babcab1e783ef44b09e15,2021-04-21 10:49:26,Stefan Behnel,Try to make a test less flaky.,['tests/run/time_pxd.pyx']
434882af22b8c1941f078557b6411a1af63d099b,2021-04-20 16:38:36,Stefan Behnel,"Avoid C compiler warning in Py<3.7 when the ""__Pyx_PyObject_CallMethod0"" helper function is unused.",['Cython/Utility/ExtensionTypes.c']
0534584360feb88d168402f1677a7f3afdf832c8,2021-04-20 16:32:14,Stefan Behnel,Fix version guard: PyImport_GetModule() was added in Py3.7.,['Cython/Utility/ExtensionTypes.c']
184146d9b4aeb1f4eaba898f71369bcdc4245776,2021-04-20 16:16:52,Stefan Behnel,Reduce overhead in gc.enable/disable during PyType_Ready() calls.,['Cython/Utility/ExtensionTypes.c']
a29b2a6b3598af1e893468d052d57d983b562d5e,2021-04-20 15:19:43,Stefan Behnel,"Revert ""Efficiency improvements for enabling/disabling gc in __Pyx_PyType_Ready().""
This change introduced Python object statics, which has a negative impact on multiple interpreter support etc.

This reverts commit b68f2585ceec37e0be245122a0fb6328f5145e8d.",['Cython/Utility/ExtensionTypes.c']
3048be77631d91ddf9210c34f8de436ab70d7c04,2021-04-18 17:30:46,Stefan Behnel,"Hard-disable the MergeVTables() step during the extension type setup when using the Limited API. There might be a way to make it work, but it currently won't.

Also see https://github.com/cython/cython/pull/4107","['Cython/Compiler/Nodes.py', 'Cython/Utility/ImportExport.c']"
f3f7b612dc005abdac2e0a0a48dcf9be7b4b0122,2021-04-18 14:49:00,Stefan Behnel,Allow searching for include/import files without passing a source pos tuple and clean up the call chains a little.,"['Cython/Compiler/Main.py', 'Cython/Compiler/ModuleNode.py']"
f79916155905490e59b3aeac635aefdacbbbc994,2021-04-18 06:37:57,da-woods,"Fix ""platform_adaptation"" documentation test on windows (GH-4126)

For reasons I don't full understand, including ""windows.h"" seems to break everything. There's an alternative sleep function in stdlib.h so I've used that instead since it makes the point just as well.",['docs/examples/userguide/external_C_code/platform_adaptation.pyx']
3d511fa74a996d170f5f071de70b1e05db531539,2021-04-17 19:14:42,da-woods,Fix invalid code in CReferenceBaseType.__repr__ (GH-4124),['Cython/Compiler/PyrexTypes.py']
66eb66f2f0c0cfa22942853659d444b6f4ecb799,2021-04-16 06:57:10,Stefan Behnel,"Disable __Pyx_PyType_Ready() usage in PyPy & friends where it fails to compile currently. They should generally be happy with their own implementation.
See https://github.com/cython/cython/pull/4107",['Cython/Utility/ExtensionTypes.c']
88bf3f072ef6711737728d01a85eab7992ca8101,2021-04-16 06:35:14,Stefan Behnel,Remove duplicated ticket prefix.,['tests/run/special_methods_T561.pyx']
0f4a15d907bb095bc93f93afe6bd30f224c98989,2021-04-15 21:34:13,Stefan Behnel,"Add a missing ""#undef"" for the limited API target.",['Cython/Utility/ModuleSetupCode.c']
d5bc8147c19dd6bbbf60bfa0c8157dfb167bb804,2021-04-15 20:24:49,Robert Bradshaw,"Merge pull request #4107 from robertwb/cdef-mixin

Allow inheriting from cimported multiply inherited class.","['Cython/Compiler/Nodes.py', 'Cython/Utility/ExtensionTypes.c', 'tests/run/cdef_multiple_inheritance_cimport.srctree']"
6d3480590ba5a10efa3288c2101090ff35e4ecbb,2021-04-14 19:26:25,Lobstros,Set black text for .cython code lines in HTML report. (GH-4117),['Cython/Compiler/Annotate.py']
1f087a63463ffca38d174c5fad349606cdad2a1e,2021-04-14 18:18:00,Stefan Behnel,Merge branch '0.29.x',['appveyor/install.ps1']
7a4e43da9f2f42591eaff90d2e8b15bf809e4308,2021-04-14 18:13:01,Stefan Behnel,"Fix Python install script on appveyor: The URL path uses three digit Python versions, not just major.minor.",['appveyor/install.ps1']
a6ab2a9a542eb1bb005112c7ec381bdec8aea74a,2021-04-14 18:00:37,Stefan Behnel,Merge branch '0.29.x',[]
736119232825a1809a66dcd6d654581058003b6f,2021-04-14 17:58:03,Stefan Behnel,"According to the docs, ""/Od"" is the default in MSVC, so in order to get it, it should be enough to clear CFLAGS.
Setting it generates warnings in Py3.9 on appveyor (""source file '""/Od""' ignored""), suggesting that the option is not recognised as such.
https://docs.microsoft.com/en-us/cpp/build/reference/od-disable-debug?view=msvc-160",['appveyor.yml']
9ae2e4e7b2d6b0dc07ee49d3299a212af3976993,2021-04-14 13:37:04,Stefan Behnel,Merge branch '0.29.x',[]
17670781083e3ccfedb1af4adcec614d4599eef9,2021-04-14 13:36:42,Stefan Behnel,Fix embed test in Py2.6.,['runtests.py']
05be94a811786719c01662bad52ae809ed2667f1,2021-04-14 13:30:36,Stefan Behnel,Try to resolve apt install issues on travis.,['.travis.yml']
5bb37181765f26592817812e93112d81cb3d92a0,2021-04-14 12:51:29,Stefan Behnel,Merge branch '0.29.x',[]
e3ee22dc1f3796dd67b78a1207556d413f5d5eb6,2020-05-07 06:57:37,Stefan Behnel,"Remove ""PYTHONHOME"" setting from embed-test since it seems to break the I/O encoding setup in (at least) Py3.8+ venvs.",['Demos/embed/Makefile']
d715643fee6dd2afd37080f01d0d87d63e87f086,2020-04-06 18:50:35,Stefan Behnel,Make embed test more debuggable by printing the path setup and the build output on failure.,"['Demos/embed/Makefile', 'runtests.py']"
ef636c67b4b7b948c8c66efee04c3fe52d544a38,2021-04-14 12:32:40,Stefan Behnel,Merge branch 'master' of git+ssh://github.com/cython/cython,"['tests/buffers/bufaccess.pyx', 'tests/buffers/buffmt.pyx', 'tests/memoryview/memoryviewattrs.pyx', 'tests/memoryview/numpy_memoryview.pyx', 'tests/run/numpy_test.pyx']"
817672d561d741402346f1d2e760f5766da36002,2021-04-14 12:29:45,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'tests/run/test_unicode.pyx']"
b6077b23bb77205c16c8478408cd461f4d6d3351,2021-04-14 12:19:46,Stefan Behnel,Update changelog.,['CHANGES.rst']
7c0585e3c560e7ed13e99e95423cdeff4ebcb26d,2021-04-04 20:56:00,Stefan Behnel,Summarize test failures when running in shards.,['runtests.py']
315c20ef3dd6006df6e61693650d183720798002,2021-04-08 14:05:09,Andrew V. Jones,"Only #define PY_SSIZE_T_CLEAN if it is not already #defined

Signed-off-by: Andrew V. Jones <andrew.jones@vector.com>",['Cython/Compiler/ModuleNode.py']
c0d5282d5100975311f77895297f9e069d7075a0,2021-04-12 16:16:11,Stefan Behnel,Test runner statistics: show the most time intensive test steps (compilatio/run/etc) first.,['runtests.py']
dd7fd780843efc014ccbe5844b10f3ac53395e76,2021-04-14 11:56:39,Stefan Behnel,"Work around a test failure in Py3.10.
Closes https://github.com/cython/cython/pull/4101
See https://github.com/cython/cython/issues/4100",['tests/run/test_unicode.pyx']
66690e7cb2f3ec835b0889d62d2f90af3e179a0e,2021-04-12 18:24:32,da-woods,"Fix string constant folding with language_level=2 (GH-4083)

* Handle constant folding for LanguageLevel 2 on Python 3. Ensure that when StrNode is a BytesLiteral, that we don't coerce it to unicode.
* Add test for string multiplication bug. Needed to change the TreePath slightly to allow bytes-to-str comparison.

Fixes https://github.com/cython/cython/issues/3951","['Cython/Compiler/Optimize.py', 'Cython/Compiler/TreePath.py', 'tests/run/cstringmul.pyx']"
ecd9a4ba00e2403b6be6f259f5ce43686f1590f6,2021-04-12 19:28:46,Stefan Behnel,Make a test Py3.10 compatible.,['tests/run/cpdef_enums.pyx']
eb6d31a5e3046d7d7d324a5861496609135cc2c1,2021-04-13 18:38:17,peng weikang,"Remove incorrect dict unpacking optimisation that leaked external dict changes into the result (GH-4091)

Closes https://github.com/cython/cython/issues/3227","['Cython/Compiler/ExprNodes.py', 'tests/run/dict.pyx', 'tests/run/kwargs_passthrough.pyx']"
69dfdf9131c251709a396b49ddf7e45703fc09d5,2021-04-14 11:26:43,da-woods,"Disable GC-sensitive test on PyPy and remove the outdated @testcase decorator (GH-4095)

* Disable GC-sensitive NumPy tests on PyPy
* Removed @testcase decorator pattern that was causing tests to be run twice","['tests/buffers/bufaccess.pyx', 'tests/buffers/buffmt.pyx', 'tests/memoryview/memoryviewattrs.pyx', 'tests/memoryview/numpy_memoryview.pyx', 'tests/run/numpy_test.pyx']"
461e45fe36e95393583cf97f75713b0dbdbecc97,2021-04-14 06:17:30,Stefan Behnel,Merge branch '0.29.x',"['.gitignore', '.travis.yml', 'runtests.py']"
3ae58fea907a5abbc34f1792242a884c194ada5e,2021-04-12 16:45:07,vorfol,"Use CFLAGS for compiler defines in test runner (GH-4099)

Creating global CDEFS for holding compiler definitions. Then pass it to the distutils.

Also add .vscode folder to .gitignore

Fixes https://github.com/cython/cython/issues/4096","['.gitignore', 'runtests.py']"
2419d61c2c7c9e0c0f08384b2ba4898bad6887ea,2021-04-03 05:25:41,Stefan Behnel,"Try to fix macos Py3 build, which does not set ""$TRAVIS_PYTHON_VERSION"" (language: c).",['.travis.yml']
c25c3ccc4b862592b06e66fd0fc508e4d388437b,2021-04-13 18:38:17,peng weikang,"Remove incorrect dict unpacking optimisation that leaked external dict changes into the result (GH-4091)

Closes https://github.com/cython/cython/issues/3227","['Cython/Compiler/ExprNodes.py', 'tests/run/dict.pyx', 'tests/run/kwargs_passthrough.pyx']"
afe3abb686e3000598478563ae361a2b09e4903e,2021-04-13 18:21:04,Stefan Behnel,"Modernise code: use set literals/comprehensions where possible, frozenset where appropriate.","['Cython/Build/Dependencies.py', 'Cython/Compiler/Builtin.py', 'Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FlowControl.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Debugger/Tests/test_libcython_in_gdb.py']"
6ba500e3deb4ce71bd7884fd7e219b37b837ea63,2021-04-13 10:11:25,Stefan Behnel,"Clarify in the changelog what ""preliminary support for Py_LIMITED_API"" means.

Closes https://github.com/cython/cython/issues/4113",['CHANGES.rst']
7ce24bc7381c83972e5b6d24bbb8e6ab610541fa,2021-04-13 09:47:47,Stefan Behnel,"Replace usage of the seemingly CPython-internal Py_ISSPACE() macro by a dedicated inline function to make it work in C++ (where Py_ISSPACE() fails to link).

Closes https://github.com/cython/cython/issues/4111
Closes https://github.com/cython/cython/pull/4112","['Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/Optimize.c']"
26c909bb06830afb553e569d3d9506b19b3e4494,2021-04-12 19:28:46,Stefan Behnel,Make a test Py3.10 compatible.,['tests/run/cpdef_enums.pyx']
cd6e29d0251b21d6b1b45f3de8eb452bcfe2cf68,2021-04-12 18:24:32,da-woods,"Fix string constant folding with language_level=2 (GH-4083)

* Handle constant folding for LanguageLevel 2 on Python 3. Ensure that when StrNode is a BytesLiteral, that we don't coerce it to unicode.
* Add test for string multiplication bug. Needed to change the TreePath slightly to allow bytes-to-str comparison.

Fixes https://github.com/cython/cython/issues/3951","['Cython/Compiler/Optimize.py', 'Cython/Compiler/TreePath.py', 'Cython/Compiler/Visitor.py', 'tests/run/cstringmul.pyx']"
7590de7e940cbbf733f78d8d4f5322242418ee21,2021-04-12 16:40:02,Stefan Behnel,Merge branch '0.29.x',[]
3602b4d70ecebe0f75d50a9bf7f3d9f878d5c368,2021-04-12 16:36:27,Victor Stinner,"Fix optimised_pow2_inplace() on Python 3.10 (GH-4103)

Fix optimised_pow2_inplace() doctest on Python 3.10 because the error message changed.

Python 3.9 error message:
    unsupported operand type(s) for ** or pow(): 'int' and 'str'

Python 3.10 error message:
    unsupported operand type(s) for **=: 'int' and 'str'",['tests/run/powop.pyx']
ad0433b66f3cbc85db122d790ef7150b42d6fba3,2021-04-12 16:19:32,Stefan Behnel,Make test agnostic to dict ordering.,['tests/run/kwargs_passthrough.pyx']
572a89e12c38f2e22f24758f140faaab7658d277,2021-04-12 16:16:11,Stefan Behnel,Test runner statistics: show the most time intensive test steps (compilatio/run/etc) first.,['runtests.py']
e1602d9ba36a916b55e15e47f3c61e17d17afa89,2021-04-12 13:37:11,Stefan Behnel,Always run garbage collection explicitly in PyPy for the GC-related NumPy tests.,['tests/memoryview/numpy_memoryview.pyx']
5704109b327591dde14cbc23ce532cdbd16d84c6,2021-04-12 12:52:09,Stefan Behnel,Extend a test.,['tests/run/kwargs_passthrough.pyx']
8cef4203124241911f63dc171f5536665f324507,2021-04-11 12:21:03,Stefan Behnel,"Prefix old trac ticket numbers with ""t"" to separate them from (plain) github issue numbers.","['tests/compile/cast_ctypedef_array_T518.pyx', 'tests/compile/cimport_package_module_T4.pyx', 'tests/compile/cimportfrom_T248.pyx', 'tests/compile/cpp_templates.pyx', 'tests/compile/ctypedef_public_class_T355.pyx', 'tests/compile/ellipsis_T488.pyx', 'tests/compile/weakref_T276.pyx', 'tests/errors/bufaccess_noassignT444.pyx', 'tests/errors/buffertypedef_T117.pyx', 'tests/errors/callingnonexisting_T307.pyx', 'tests/errors/cdef_class_properties_decorated.pyx', 'tests/errors/cdef_members_T517.pyx', 'tests/errors/compile_time_unraisable_T370.pyx', 'tests/errors/declareafteruse_T158.pyx', 'tests/errors/e2_packedstruct_T290.pyx', 'tests/errors/e_cdef_keywords_T241.pyx', 'tests/errors/e_tuple_args_T692.py', 'tests/errors/missing_baseclass_in_predecl_T262.pyx', 'tests/errors/missing_self_in_cpdef_method_T156.pyx', 'tests/errors/missing_self_in_cpdef_method_T165.pyx', 'tests/errors/notcimportedT418.pyx', 'tests/errors/pxd_cdef_class_declaration_T286.pyx', 'tests/errors/pyobjcastdisallow_T313.pyx', 'tests/errors/return_outside_function_T135.pyx', 'tests/errors/typoT304.pyx', 'tests/errors/uninitialized_lhs.pyx', 'tests/run/always_allow_keywords_T295.pyx', 'tests/run/args_unpacking_in_closure_T658.pyx', 'tests/run/argument_unpacking_closure_T736.py', 'tests/run/arithmetic_analyse_types.pyx', 'tests/run/bad_c_struct_T252.pyx', 'tests/run/bint_binop_T145.pyx', 'tests/run/bint_property_T354.pyx', 'tests/run/bound_builtin_methods_T589.pyx', 'tests/run/builtin_abs.pyx', 'tests/run/builtin_methods_return_values.pyx', 'tests/run/builtin_subtype_methods_T653.pyx', 'tests/run/builtin_subtype_methods_cy3.pyx', 'tests/run/builtin_type_inheritance_T608.pyx', 'tests/run/builtin_types_none_T166.pyx', 'tests/run/c_int_types_T255.pyx', 'tests/run/c_type_methods_T236.pyx', 'tests/run/cascaded_list_unpacking_T467.pyx', 'tests/run/cascaded_typed_assignments_T466.pyx', 'tests/run/cdef_bool_T227.pyx', 'tests/run/cdef_class_field.pyx', 'tests/run/cdef_class_property_decorator_T264.pyx', 'tests/run/cdef_decorator_directives_T183.pyx', 'tests/run/cdef_locals_decorator_T477.pyx', 'tests/run/cdef_members_T517.pyx', 'tests/run/cdef_methods_T462.pyx', 'tests/run/cdef_setitem_T284.pyx', 'tests/run/cfunc_call_tuple_args_T408.pyx', 'tests/run/char_constants_T99.pyx', 'tests/run/charcomparisonT412.pyx', 'tests/run/charptr_comparison_T582.pyx', 'tests/run/cimport_cython_T505.pyx', 'tests/run/class_attribute_init_values_T18.pyx', 'tests/run/class_func_in_control_structures_T87.pyx', 'tests/run/class_scope_del_T684.py', 'tests/run/classdecorators_T336.pyx', 'tests/run/closure_class_T596.pyx', 'tests/run/closure_decorators_T478.pyx', 'tests/run/closure_inside_cdef_T554.pyx', 'tests/run/closure_name_mangling_T537.pyx', 'tests/run/closure_names.pyx', 'tests/run/closures_T82.pyx', 'tests/run/cmethod_inline_T474.pyx', 'tests/run/complex_cast_T445.pyx', 'tests/run/complex_coercion_sideeffects_T693.pyx', 'tests/run/complex_int_T446.pyx', 'tests/run/complex_numbers_T305.pyx', 'tests/run/complex_numbers_T305_long_double.pyx', 'tests/run/complex_numbers_c89_T398.pyx', 'tests/run/complex_numbers_c89_T398_long_double.pyx', 'tests/run/complex_numbers_c99_T398.pyx', 'tests/run/complex_numbers_cxx_T398.pyx', 'tests/run/contains_T455.pyx', 'tests/run/cpdef_method_override.pyx', 'tests/run/cpdef_temps_T411.pyx', 'tests/run/crashT245.pyx', 'tests/run/ctypedef_int_types_T333.pyx', 'tests/run/decorators_T593.pyx', 'tests/run/decorators_py_T593.py', 'tests/run/default_args_T674.py', 'tests/run/division_T384.pyx', 'tests/run/duplicate_keyword_in_call.py', 'tests/run/dynamic_args.pyx', 'tests/run/ellipsis_T488.pyx', 'tests/run/empty_for_loop_T208.pyx', 'tests/run/enumerate_T316.pyx', 'tests/run/ext_instance_type_T232.pyx', 'tests/run/extended_unpacking_T235.pyx', 'tests/run/extended_unpacking_T409.pyx', 'tests/run/extern_builtins_T258.pyx', 'tests/run/file_encoding_T740.py', 'tests/run/final_method_T586.pyx', 'tests/run/float_floor_division_T260.pyx', 'tests/run/float_len_T480.pyx', 'tests/run/for_from_float_T254.pyx', 'tests/run/for_from_pyvar_loop_T601.pyx', 'tests/run/for_in_break_continue_T533.pyx', 'tests/run/for_in_range_T372.pyx', 'tests/run/funcexc_iter_T228.pyx', 'tests/run/function_as_method_T494.pyx', 'tests/run/function_as_method_py_T494.py', 'tests/run/function_binding_T494.pyx', 'tests/run/fused_types.pyx', 'tests/run/generator_expressions_and_locals.pyx', 'tests/run/generators_GH1731.pyx', 'tests/run/genexpr_T491.pyx', 'tests/run/genexpr_T715.pyx', 'tests/run/genexpr_iterable_lookup_T600.pyx', 'tests/run/hash_T326.pyx', 'tests/run/ifelseexpr_T267.pyx', 'tests/run/import_error_T734.py', 'tests/run/in_list_with_side_effects_T544.pyx', 'tests/run/int_float_builtins_as_casts_T400.pyx', 'tests/run/int_float_builtins_as_casts_T400_long_double.pyx', 'tests/run/intern_T431.pyx', 'tests/run/ipow_crash_T562.pyx', 'tests/run/lambda_T195.pyx', 'tests/run/lambda_T723.pyx', 'tests/run/lambda_class_T605.pyx', 'tests/run/lambda_module_T603.pyx', 'tests/run/large_consts_T237.pyx', 'tests/run/letnode_T766.pyx', 'tests/run/list_comp_in_closure_T598.pyx', 'tests/run/locals_T732.pyx', 'tests/run/locals_expressions_T430.pyx', 'tests/run/locals_rebind_T429.pyx', 'tests/run/method_module_name_T422.pyx', 'tests/run/methodmangling_T5.py', 'tests/run/non_dict_kwargs_T470.pyx', 'tests/run/numpy_ValueError_T172.pyx', 'tests/run/numpy_bufacc_T155.pyx', 'tests/run/packedstruct_T290.pyx', 'tests/run/parallel_swap_assign_T425.pyx', 'tests/run/property_decorator_T593.py', 'tests/run/ptr_warning_T714.pyx', 'tests/run/pure_cdef_class_property_decorator_T264.pxd', 'tests/run/pure_cdef_class_property_decorator_T264.py', 'tests/run/pxd_argument_names.srctree', 'tests/run/pyclass_scope_T671.py', 'tests/run/pyfunction_redefine_T489.pyx', 'tests/run/pyobjcast_T313.pyx', 'tests/run/raise_memory_error_T650.pyx', 'tests/run/range_optimisation_T203.pyx', 'tests/run/self_in_ext_type_closure.pyx', 'tests/run/short_circuit_T404.pyx', 'tests/run/special_methods_T561.pyx', 'tests/run/special_methods_T561_py2.pyx', 'tests/run/special_methods_T561_py3.pyx', 'tests/run/ssize_t_T399.pyx', 'tests/run/starred_target_T664.pyx', 'tests/run/str_char_coercion_T412.pyx', 'tests/run/temp_alloc_T409.pyx', 'tests/run/temp_sideeffects_T654.pyx', 'tests/run/tp_new.pyx', 'tests/run/tp_new_T454.pyx', 'tests/run/tupleunpack_T298.pyx', 'tests/run/tupleunpack_T712.pyx', 'tests/run/type_inference_T768.pyx', 'tests/run/type_inference_T768_cpp.pyx', 'tests/run/type_slots_int_long_T287.pyx', 'tests/run/typeddefaultargT373.pyx', 'tests/run/typedfieldbug_T303.pyx', 'tests/run/typetest_T417.pyx', 'tests/run/unsigned_char_ptr_bytes_conversion_T359.pyx', 'tests/run/unsignedbehaviour_T184.pyx', 'tests/run/with_statement_module_level_T536.pyx']"
0d72a23944967ab129448aa0725f818a83a821fc,2021-04-11 12:08:30,Zhenbo Li,Code style: Modernise some set() usages (GH-4109),['Cython/Compiler/Code.py']
1c214e2e9b498a85e6c4f5aa55c477c891438196,2021-04-11 11:44:10,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
db8cf13c9b3af031f28a7f5db5a9e4771f3ad263,2021-04-02 20:18:21,Stefan Behnel,Remove broken dependency version from frozen requirements file.,['test-requirements-27.txt']
f0ef9d03f15cdf4e44b792ae93a252f17247dfa4,2021-04-11 11:29:56,Stefan Behnel,Prepare release of 0.29.23.,"['CHANGES.rst', 'Cython/Shadow.py']"
fb09165f7861c2a69c92f0918e3c90e80e8da986,2021-04-11 11:21:30,Stefan Behnel,Re-disable third-party integration testing in Py2.6 entirely since most packages aren't compatible anymore (and I don't want to dig up the versions that are).,['.travis.yml']
6b3f67c3211d00fe9bcbffefc6d7c5dff0228b7b,2021-04-11 11:17:26,Stefan Behnel,Merge branch '0.29.x',[]
9677f9f370697490d09ef76add7b6c8fb4ff3011,2021-04-02 16:19:17,Stefan Behnel,Freeze the test dependency packages for Python 2.x to prevent further deprecations. More and more packages drop Py2 support these days.,"['.travis.yml', 'test-requirements-27.txt', 'test-requirements-cpython.txt']"
b68f2585ceec37e0be245122a0fb6328f5145e8d,2021-04-10 07:55:50,Robert Bradshaw,"Efficiency improvements for enabling/disabling gc in __Pyx_PyType_Ready().

These are more important in light of it being used ubiquitously.",['Cython/Utility/ExtensionTypes.c']
e9aa3db7ba616316319bd31d591be1b715fd8c5a,2021-04-10 07:54:35,Robert Bradshaw,"Unconditionally use modified PyType_Ready.

This fixes github issue #4106.","['Cython/Compiler/Nodes.py', 'tests/run/cdef_multiple_inheritance_cimport.srctree']"
efdf996dced075682d86b7e53a12b56b5ebfea38,2021-04-08 16:03:27,Robert Bradshaw,"Merge pull request #4104 from andrewvaughanj/conditional_ssize_t_clean

Only #define PY_SSIZE_T_CLEAN if it is not already #defined",['Cython/Compiler/ModuleNode.py']
3ccd94754e49ce7281c2a2826193df517491da2a,2021-04-08 14:05:09,Andrew V. Jones,"Only #define PY_SSIZE_T_CLEAN if it is not already #defined

Signed-off-by: Andrew V. Jones <andrew.jones@vector.com>",['Cython/Compiler/ModuleNode.py']
217a93e7b139ab49815ea9ca34142b3e2a116a08,2021-04-05 18:27:06,da-woods,Document some additional C++ auto-conversions (GH-4090),['docs/src/userguide/wrapping_CPlusPlus.rst']
18970d354eeba8d2da1b924cb669e8919fb703af,2021-04-05 07:19:34,scoder,"Optimise float parsing from Unicode strings with non-ASCII spaces (GH-4084)

* Reject invalid underscore placements in float parser.
* Add a proper nan/inf float parser to prevent underscore-mixes like ""in_f"" from passing through.","['Cython/Utility/Optimize.c', 'tests/run/builtin_float.py']"
747cd2fb0a0c2194c377e9508a6f022476621bbd,2021-04-04 20:59:50,Stefan Behnel,"Move variable initialisation to a better place, next to a similar one.",['runtests.py']
a5db1beecc0830a070273c2f155f7cbee91f7a5f,2021-04-04 20:56:00,Stefan Behnel,Summarize test failures when running in shards.,['runtests.py']
9bc0abecb3a08ea13313200a51f1ee26a65e5be3,2021-04-03 06:23:44,Stefan Behnel,Make a helper function in a C++ test correctly propagate exceptions so that it won't have to spit out compiler warnings.,['tests/run/cpp_stl_conversion.pyx']
b893eba85642b1c6a069ee06fd008bdf00e1ac59,2021-04-03 05:50:39,johnthagen,Instruct setuptools and wheel to include the license files (GH-3982),['setup.cfg']
f1d021fe76ee7d7e192044ef44969929a6ed7bc0,2021-04-03 05:42:25,Stefan Behnel,Special case float parsing in PyPy since byte string access is likely slower there than a plain float object creation. (And it works in all PyPy versions.),"['Cython/Utility/Optimize.c', 'tests/pypy_bugs.txt']"
571514e61e0a88c16cc2a00251366087aee72692,2021-04-03 05:25:41,Stefan Behnel,"Try to fix macos Py3 build, which does not set ""$TRAVIS_PYTHON_VERSION"" (language: c).",['.travis.yml']
a3e799e51f1bc1e0aa431d07e9b788e57bfd07ed,2021-04-02 21:17:34,Stefan Behnel,Update changelog.,['CHANGES.rst']
7139040aa10b4518cd4869c4310c218206bb853e,2021-04-02 21:01:37,Matti Picus,"DOC: make some github issues into links, doc fixes (GH-4060)

* DOC: make some github issues into links, doc fixes
* add a doc-requirements.txt for building docs
* use ':issue:' domains for github issues","['CHANGES.rst', 'Cython/Build/Dependencies.py', 'doc-requirements.txt', 'docs/conf.py', 'docs/examples/README.rst', 'docs/index.rst', 'docs/src/donating.rst', 'docs/src/reference/directives.rst', 'docs/src/reference/extension_types.rst', 'docs/src/reference/language_basics.rst', 'docs/src/tutorial/external.rst', 'docs/src/userguide/extension_types.rst', 'docs/src/userguide/glossary.rst', 'docs/src/userguide/sharing_declarations.rst']"
ed5e53c474c39eb87ef61c945695936ade59400a,2021-04-02 20:18:21,Stefan Behnel,Remove broken dependency version from frozen requirements file.,['test-requirements-27.txt']
d2697b134472ccb873a809de2ec9f3baf38cd4fb,2021-04-02 19:41:10,da-woods,"Implement PEP-560 inheritance (__mro_entries__) (GH-4005)

Fixes https://github.com/cython/cython/issues/3537

Both the C code and the tests are largely copied from CPython.

Note that this currently only applies to Python classes, not to cdef classes. Maybe it could be applied to the second+subsequent bases but I don't think it's needed for the initial implementation.","['Cython/Compiler/Nodes.py', 'Cython/Utility/ObjectHandling.c', 'tests/run/test_genericclass.py']"
89f881b593c8118ea133a720739620c24b0067a9,2021-04-02 16:19:17,Stefan Behnel,Freeze the test dependency packages for Python 2.7 to prevent further deprecations. More and more packages drop Py2 support these days.,"['.travis.yml', 'test-requirements-27.txt', 'test-requirements-cpython.txt']"
b1ea381c0b0e4a42358bc7fd7047520f9a02dc0f,2021-04-02 15:43:49,Stefan Behnel,"Fix include file: ""pytime.h"" is actually included by ""Python.h"" and should not get included directly.",['Cython/Includes/cpython/time.pxd']
7787142d9c5b0b5b2ec94959ff0922459fc5d936,2021-04-02 10:31:23,Stefan Behnel,Disable currently failing PyPy tests.,['tests/pypy_bugs.txt']
1d37d3a7ad23b72ba4f6e0768a29634ae0cf394a,2021-04-01 10:01:18,Stefan Behnel,Fix some doctest output that changed in Py3.10.,['tests/run/posonly.py']
3df198fc0338efde39911ca1b25cc7eec7ebcda2,2021-03-31 06:20:09,Stefan Behnel,"Include official Py3.9 releases in travis build, as well as the upcoming 3.10.",['.travis.yml']
6d69defb12dd00c6ecef4206ef0f9bc721015a3c,2021-03-31 06:07:21,Stefan Behnel,"Fix MSVC: Add an explicit warning to modules that use the ""array.array"" internals and try to compile in PyPy.
Closes https://github.com/cython/cython/issues/3448",['Cython/Includes/cpython/array.pxd']
b3f28d48169d6e91131eacb2d83759009499edfc,2021-03-30 20:09:00,Max Bachmann,Fix type conversions in vectorcallfunc (GH-4054),"['Cython/Utility/CythonFunction.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c']"
0327831341e5dc2109de2c805830d9870a6d67c9,2021-03-30 20:05:43,da-woods,"Remove incorrect CyFunction __self__ attribute (GH-4051)

The __self__ argument should be present only for bound functions.
Fixes https://github.com/cython/cython/issues/4036

Currently it isn't easily possible to get this working absolutely correctly for fused functions. I raise an attribute error but hasattr still returns True.

Additionally, Python 2 methods always have a __self__ attribute but set it to None. I follow Python 3 behaviour and don't have the attribute.","['Cython/Utility/CythonFunction.c', 'tests/run/function_self.py']"
3c34c40fb50432ab367f95bf55ae1df318f2ffea,2021-03-30 18:08:19,Stefan Behnel,"Add an explicit warning to modules that use the ""array.array"" internals and try to compile in PyPy.
Closes https://github.com/cython/cython/issues/3448",['Cython/Includes/cpython/array.pxd']
1a6bba912fee840fc32b6a4d3288d57a12369820,2021-03-30 17:52:59,Stefan Behnel,"Remove GNU specific ""tm"" struct fields ""tm_zone"" and ""tm_gmtoff"" from libc/time.pxd because they get in the way of automatic struct conversions.
See https://github.com/cython/cython/issues/3733",['Cython/Includes/libc/time.pxd']
e5713e24ec697bf45f6388ab4efd8643a322281d,2021-03-30 16:50:11,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'tests/run/test_asyncgen.py']"
5fd6f07e2eb6f0e57f26b2376a981ff0e3aae10f,2021-03-30 16:26:53,Stefan Behnel,Update changelog.,['CHANGES.rst']
e5a3031898e4392a001d951946b714c249807a1f,2021-03-30 16:16:20,da-woods,"Avoid empty frozenset singleton on Python 3.10 (GH-4049)

See https://github.com/cython/cython/issues/3919","['Cython/Utility/Builtins.c', 'tests/run/set.pyx']"
62c1802a8590402892b00494a2631a26cdb30fa5,2021-03-30 16:23:08,Victor Stinner,"Port test_asyncgen to Python 3.10 (GH-4044)

The loop parameter of asyncio.sleep(), deprecated in Python 3.8, has
been removed in Python 3.10. asyncio.sleep() gets implicitly the loop
in Python 3.10 and it is safe to do the same on Python 3.6:
https://docs.python.org/dev/whatsnew/3.10.html#changes-in-the-python-api",['tests/run/test_asyncgen.py']
112e6e0bf8281388d13edaa4a744dbbad51233c1,2021-03-30 16:16:20,da-woods,"Avoid empty frozenset singleton on Python 3.10 (GH-4049)

See https://github.com/cython/cython/issues/3919","['Cython/Utility/Builtins.c', 'tests/run/set.pyx']"
dd4dfee39c5e1f00aa9fd6d23a54a1555cd20e1b,2021-03-30 16:14:03,Victor Stinner,"Make load_dynamic() compatible with Python 3.10 (GH-4045)

Backport code from the master branch:

* commit 4e785d425f27f079bf2f6bba1381217fac4f5da3
* commit a9fb77681e41810052df0b41b25abb12738bb8f3",['Cython/Build/Inline.py']
bb0022754abf4c6d3ae5f157af6864166ed42d03,2021-03-30 16:06:44,Stefan Behnel,Add some safety fixes and clean up Py2 test-helper in test_fstring.pyx.,['tests/run/test_fstring.pyx']
f29ef5b50736ecc03f62faf91f428a889c61e1ef,2021-03-29 21:02:49,Stefan Behnel,"Avoid calling ""PyErr_Clear()"" in ""__Pyx_CyFunction_get_is_coroutine()"" if no error was raised (by our code).",['Cython/Utility/CythonFunction.c']
865f63bfb5db085d052a4571f3bc26eccafe61ac,2021-03-29 18:57:19,谭九鼎,docs: use https links (GH-4067),"['CHANGES.rst', 'README.rst', 'docs/examples/Cython Magics.ipynb', 'docs/make.bat', 'docs/src/quickstart/overview.rst', 'docs/src/tutorial/appendix.rst', 'docs/src/tutorial/clibraries.rst', 'docs/src/tutorial/readings.rst', 'docs/src/userguide/numpy_tutorial.rst']"
9decfca1b7c836247c80ea94aca8c7cacf70327c,2021-03-27 10:15:55,da-woods,"Fix some issues with duplicated utilitycode (GH-3743)

* Avoid UtilityCode from cimport_from_pyx files
* Unique names for generated cfunc wrappers, avoid pxd pickle code
* Set .in_pxd on nodes prior to analyse_declarations

Fixes #3716
Fixes #3741
Fixes #3734","['Cython/Compiler/Pipeline.py', 'Cython/Compiler/PyrexTypes.py', 'tests/run/cfunc_convert.pyx', 'tests/run/duplicate_utilitycode_from_pyx.srctree']"
8609e0fa7d361f1392823ff6e1a618720cd62df3,2021-03-21 13:28:17,da-woods,"Temporarily pin Pythran version at 0.9.7 to resolve test failures. (GH-4031)

Mostly with the hope that the tests pass. Ideally we should support the most recent version.",['.travis.yml']
9141e7a568148a798c8ff0c6779b776e3d997bb7,2021-03-21 13:24:05,Vadim Pushtaev,"Allow using nested C++ types of typedefs (GH-4039)

Closes https://github.com/cython/cython/issues/2233","['Cython/Compiler/Nodes.py', 'tests/run/cpp_nested_classes.pyx']"
ff1f703b5ef79c9f59ad0983bd9191375b95f48d,2021-03-21 13:11:20,Max Bachmann,"Always return 'int' from __Pyx_PyUnicode_KIND() (GH-4059)

Even though the Python documentation states, that PyUnicode_KIND will return an int,
it actually returns a value of the underlying type of the PyUnicode_Kind enum.
This could be e.g. an unsigned int which can cause warnings about signed/unsigned comparisons.",['Cython/Utility/ModuleSetupCode.c']
aaade0fcecd1d0a04576462c4d11ea07e1b5446c,2021-03-21 12:58:26,Stefan Behnel,Merge branch '0.29.x',['tests/run/generators_py35.py']
7d1dc8851f1571b2f39a886298bc7b8ff270a6b7,2021-03-21 12:26:22,da-woods,"Make annotation tests work with non-evaluated annotations (GH-4050)

Backported from 3dc2b9dfc23638fbef2558d619709b5235d5df08
Partial fix for https://github.com/cython/cython/issues/3919",['tests/run/generators_py35.py']
8073ed277dd5b64c333436f25366ef334ebff97c,2021-03-21 12:22:12,Max Bachmann,"Fix compiler warning about constant conditions in clang (GH-4053)

clang warns about dead code when an if-statement always evaluates to false. This warning can be silenced using an extra '()'.","['Cython/Compiler/Code.py', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/TypeConversion.c']"
3f00ce37f2775dc2bb4206186009001cfcecdd56,2021-03-21 12:13:29,Max Bachmann,Do not use PyImport_GetModule() in older PyPy versions that do not have it (GH-4055),['Cython/Utility/ImportExport.c']
f7320e37006606cc5f32ff5445bc972b6da78d90,2021-03-21 12:09:39,Max Bachmann,Fix variable shadowing to assure correct cleanup (GH-4056),['Cython/Utility/ImportExport.c']
841a2e10c11c76697c80d17b61d84d657db11a64,2021-03-21 12:07:52,Stefan Behnel,Merge branch '0.29.x',['tests/run/test_exceptions.pyx']
bb49a03ac3cf56a4ab054791ab2673febb5d5946,2021-03-21 12:07:26,Stefan Behnel,Re-add missing imports.,['tests/run/test_exceptions.pyx']
0ec9be57f5770869cb2fbe36e00bbde405b3b855,2021-03-18 11:55:39,Stefan Behnel,Merge branch '0.29.x',"['.travis.yml', 'appveyor.yml', 'tests/run/test_exceptions.pyx']"
d21f970f86a689332b403c05f82979f7c6a26fcf,2021-03-18 11:51:46,Stefan Behnel,Add 0.29.x branch to list of CI tested branches.,"['.travis.yml', 'appveyor.yml']"
43cf17d4a4a68242d17e965e2aa4d10044d137a2,2021-03-18 11:47:22,Victor Stinner,"Port test_exceptions to Python 3.10 (GH-4042)

The `test.support` has been split into sub-modules. Adapt `test_exceptions` (originally coped from CPython) for these changes.",['tests/run/test_exceptions.pyx']
9a761a637fce6a7b70735ae2248963d63e569e14,2021-02-19 20:57:33,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'setup.py']"
3e470fcc3a4e9a33b66d5db6ab761c773888a1ea,2021-02-19 20:55:10,Stefan Behnel,Add 3.9 to the list of supported Python versions.,['setup.py']
fc777dd6f2661e9b34f50cbd39ac9b184eded484,2021-02-19 20:29:35,Stefan Behnel,Prepare release of 0.29.22.,"['CHANGES.rst', 'Cython/Shadow.py']"
c0bf0434ce71be1dacafb891330a1b8f594a6840,2021-02-18 20:07:02,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
0f2fc1ee9ea65ea0e980e3f6748a64398f58debb,2021-02-18 20:05:23,Stefan Behnel,Update changelog.,['CHANGES.rst']
591044b85c31c9a31d8675889fa8d7fc94618804,2020-12-10 14:05:17,Warren Weckesser,"MAINT: Add const qualifiers to char* types in pycapsule.pxd.

Eliminate C compiler warnings by making the constness of the
char* pointers in the declarations in pycapsule.pxd match
the actual types of the PyCapsule_* functions.",['Cython/Includes/cpython/pycapsule.pxd']
e09b868e978d67b4d2766121a9b2883eaf2b00d1,2021-02-18 19:39:32,Stefan Behnel,Merge branch '0.29.x',['tests/errors/cpdef_vars.pyx']
bb94c0e50f3825957194280babe7280863b00cde,2021-02-18 19:39:15,Stefan Behnel,Make a working test actually test something.,['tests/errors/cpdef_vars.pyx']
8b899f4abf35ae6eff72f863699f52d8f4dd6b34,2021-02-18 05:49:58,Robert Bradshaw,"Merge pull request #4008 from da-woods/disable_time_pxd_test_3.4

Disable time_pxd test in Python 3.4",['runtests.py']
917b8d01dbf572727de35d447c8ce3a646531310,2021-02-16 19:15:56,da-woods,"Disable time_pxd test in Python 3.4

It uses features that are unavailable thus always fails

Test was introduced in https://github.com/cython/cython/pull/3767",['runtests.py']
c2fea5bf4a6e011a039f8764862bb6338a2ae546,2021-02-09 16:40:32,Stefan Behnel,Merge branch '0.29.x',"['Cython/Compiler/Nodes.py', 'tests/errors/cpdef_vars.pyx', 'tests/run/cimport.srctree']"
ae4e39dbc3d088adb92d6f2d7dd43577c184aa72,2021-02-09 16:39:52,Stefan Behnel,Clean up test file.,['tests/run/cimport.srctree']
7d69ae07c03ff744ac80002dc2e08765da996a25,2021-02-09 16:20:16,da-woods,"Don't crash when probing type of cimported module (GH-4001)

Closes https://github.com/cython/cython/issues/4000","['Cython/Compiler/ExprNodes.py', 'tests/run/cimport.srctree']"
ead396c54086a418618ed10c9e300b1ebbd54135,2021-02-09 16:35:02,Stefan Behnel,Add legal section to donations page to make it clear that donations do not relate to services.,['docs/src/donating.rst']
01284ab30670c7a55b11d40e45d8e376133e5d55,2021-02-09 16:20:16,da-woods,"Don't crash when probing type of cimported module (GH-4001)

Closes https://github.com/cython/cython/issues/4000","['Cython/Compiler/ExprNodes.py', 'tests/run/cimport.srctree']"
75da5a9e1996830b83d5605f85caba2a9fde4690,2021-01-26 18:49:41,da-woods,"Fixed fused_types error test (GH-3979)

It was broken in https://github.com/cython/cython/pull/3976 which added an additional error message.",['tests/errors/fused_types.pyx']
17e03b8658a07b6d6da49300b39b57ed9c59ddb1,2021-01-23 23:24:59,Robert Bradshaw,"Merge pull request #3975 from da-woods/e_dec

Fixed e_decorators test",['tests/errors/e_decorators.pyx']
921cd966c70dd482fabbc5511d42bf57cc3b95a3,2021-01-23 23:23:31,Robert Bradshaw,"Merge pull request #3972 from da-woods/cpdef_error_message_0.29

Warning message on cpdef variables (0.29.x)","['Cython/Compiler/Nodes.py', 'tests/errors/cpdef_vars.pyx']"
cf0e9a4e5f45dd98bb90cf5064ae8fb4fadc3766,2021-01-23 23:10:42,Robert Bradshaw,"Merge pull request #3981 from dvarrazzo/gh3980_long_and_overflow

Expose ""long and overflow"" cpython functions",['Cython/Includes/cpython/long.pxd']
1ef6ad6e0141099e1e59ecc23c1a3790b1a044d2,2021-01-21 15:51:29,Daniele Varrazzo,"Expose ""long and overflow"" cpython functions

These functions are available since Python 2.7.

Close #3980",['Cython/Includes/cpython/long.pxd']
30fc474830b4a5beb88cdc53a31797ed794cddb8,2021-01-15 05:23:53,Robert Bradshaw,"Merge pull request #3976 from da-woods/declare_warning

Changed ""declared after use"" warning to error","['Cython/Compiler/ParseTreeTransforms.py', 'tests/errors/declareafteruse_T158.pyx']"
5d7d0db45d82048cb06f7bed5b3a36029fe504b8,2021-01-13 06:26:05,jbrockmendel,"ENH: implement cpython/time.pxd time, localtime (#3767)

* ENH: implement cpython/time.pxd

Co-authored-by: scoder <stefan_ml@behnel.de>","['Cython/Includes/cpython/time.pxd', 'tests/run/time_pxd.pyx']"
059cecd4e1e84bc44a0dd1abb69a6a973c84082d,2021-01-12 19:52:30,da-woods,"Changed warning to error

In 0.11.1 is was marked as an warning that would become an error.
3.0 is probably either the time to make it an error (or to remove
the note that it'll be an error in future)","['Cython/Compiler/ParseTreeTransforms.py', 'tests/errors/declareafteruse_T158.pyx']"
ced36eaf36bcd05881963f2461a30db942a8fb82,2021-01-12 19:33:46,da-woods,Fixed e_decorators test,['tests/errors/e_decorators.pyx']
adfcde1e657c49328bdfa1553048feee4b824031,2021-01-01 20:01:27,da-woods,"Error message on cpdef variables

Allowing these gives people the false impression that they
do something meaningful. ""Fixes"" https://github.com/cython/cython/issues/3959","['Cython/Compiler/Nodes.py', 'tests/errors/cpdef_vars.pyx']"
320fa6d73811a3fc240b7ec6494bb13c74bcbbed,2021-01-05 17:31:09,Robert Bradshaw,"Merge pull request #3962 from da-woods/string_to_float

Always use ""new"" string->float conversions","['Cython/Compiler/Optimize.py', 'Cython/Utility/Optimize.c', 'Cython/Utility/TypeConversion.c']"
0a3cc07731e75a41c24d40d2c77a46318f561f9d,2021-01-05 08:47:28,da-woods,Keep __Pyx_NewRef in a macro,['Cython/Utility/TypeConversion.c']
337bf7f3b6611126c86cc55de9112eafa2e34034,2021-01-01 18:35:16,da-woods,"Always use ""new"" string->float conversions

This ensures that 1_2_3 type numbers are handled correctly
whether or not the argument type is known.

Fixes https://github.com/cython/cython/issues/3958 (and thus the
currently broken builtin_float test)","['Cython/Compiler/Optimize.py', 'Cython/Utility/Optimize.c', 'Cython/Utility/TypeConversion.c']"
e6f92c1753fd8b07c5beb040fb8be1c4a8b0591c,2020-12-18 22:19:26,Robert Bradshaw,"Merge pull request #3950 from da-woods/complex_annotation_utilcode

Fix missing utility code for complex annotations","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'tests/compile/complex_annotations.pyx', 'tests/compile/complex_decorators.pyx']"
88fff64595872c3bc840afced689e2da4635778e,2020-12-18 21:47:33,da-woods,"Fix missing utility code for complex annotations

Generating utility-code for complex types is special-cased, but
it wasn't when they were generated in annotations.

Fixes https://github.com/cython/cython/issues/3949","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'tests/compile/complex_annotations.pyx', 'tests/compile/complex_decorators.pyx']"
a1dd447dc1e0e85cad2484e1598b23c639a75e6d,2020-12-18 20:31:44,Robert Bradshaw,"Avoid the terms whitelist and blacklist.

Though pretty standard, I can see how the use of these terms could
reasonably be viewed as offensive.","['Cython/Compiler/AnalysedTreeTransforms.py', 'Cython/Compiler/CythonScope.py', 'Cython/Compiler/MemoryView.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/UtilityCode.py', 'pylintrc', 'runtests.py']"
3cc9cdb15469187c63248a480b6291a05671b61e,2020-12-11 08:13:06,Robert Bradshaw,"Merge pull request #3940 from WarrenWeckesser/pycapsule-const-char-ptrs

MAINT: Add const qualifiers to char* types in pycapsule.pxd.",['Cython/Includes/cpython/pycapsule.pxd']
9a15a41194702389d7d00ae90d9605add13f26bf,2020-12-10 14:05:17,Warren Weckesser,"MAINT: Add const qualifiers to char* types in pycapsule.pxd.

Eliminate C compiler warnings by making the constness of the
char* pointers in the declarations in pycapsule.pxd match
the actual types of the PyCapsule_* functions.",['Cython/Includes/cpython/pycapsule.pxd']
3dce9ee319f891404980504e5800123da2131c4e,2020-12-10 05:29:58,Robert Bradshaw,"Merge pull request #3937 from vstinner/py_set_type_master

Use Py_TYPE() and __Pyx_SET_SIZE() functions","['Cython/Utility/Coroutine.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/arrayarray.h']"
adce16359b4522c6f018f0d20ad4b97a3f4fba64,2020-12-09 09:29:12,Victor Stinner,"Use Py_TYPE() and __Pyx_SET_SIZE() functions

Replace direct access to PyObject members with functions like
Py_TYPE() and __Pyx_SET_SIZE().","['Cython/Utility/Coroutine.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/arrayarray.h']"
5377ae7973bbfa89aa5431fb3e5f5b133231e6ba,2020-12-09 04:46:51,Robert Bradshaw,"Merge pull request #3933 from vstinner/py_set_type

Use __Pyx_SET_SIZE() and __Pyx_SET_REFCNT()","['Cython/Utility/Coroutine.c', 'Cython/Utility/arrayarray.h']"
cedbd5840fde2c63549b64c35cd05ea5fb9fc524,2020-12-06 08:46:49,Robert Bradshaw,Merge pull request #3936 Update link to what's new in appendix,['docs/src/tutorial/appendix.rst']
4e9fb4ace5f37343583667546dcc3e5bfe15bf1a,2020-12-05 15:13:44,da-woods,"Update link to what's new in appendix

Change suggested by Stepan Kasal on Cython-devel list",['docs/src/tutorial/appendix.rst']
5300b74134a777c7590ac8bce04ece94debac2fe,2020-12-04 22:57:48,Victor Stinner,"Use __Pyx_SET_SIZE() and __Pyx_SET_REFCNT()

Don't access directly PyObject.ob_refcnt and PyVarObject.ob_size.","['Cython/Utility/Coroutine.c', 'Cython/Utility/arrayarray.h']"
21b4e533747507c4dad5e6908df1f157dff4de89,2020-12-04 20:56:51,Robert Bradshaw,Merge pull request #3906 Add fileobject.pxd,"['Cython/Includes/cpython/fileobject.pxd', 'tests/run/cython_includes.pyx']"
00001be911cba852f17512fa0056adb2eb88b1e6,2020-11-28 20:55:40,Stefan Behnel,Merge branch '0.29.x',['Cython/Utility/Coroutine.c']
782a87336d88496b022bf0f2791c818221f4743a,2020-11-28 20:54:45,neonene,"Fix usage of undefined C-API ""_PyGen_Send"" in Py3.10 with ""PyIter_Send"". (GH-3921)

The C-API function applied in previous commit (https://github.com/cython/cython/commit/b37607f46b165e81f7af2b4eec2ae7f76f7717df) is now also obsolete.
This patch works for cython 0.29 and cpython after (https://github.com/python/cpython/commit/1e996c3a3b51e9c6f1f4cea8a6dbcf3bcb865060#diff-d2c90d06d281ca8dd7ac8b90109fc26755f7319dd209b5f9416efdecfa56e289).",['Cython/Utility/Coroutine.c']
39e7f001d5ca57483418a44b652fe8b0114765a3,2020-11-27 07:51:58,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Utility/Coroutine.c', 'test-requirements-cpython.txt']"
b37607f46b165e81f7af2b4eec2ae7f76f7717df,2020-11-27 07:43:10,Stefan Behnel,"Fix usage of undefined C-API function ""_PyGen_Send"" in Py3.10.",['Cython/Utility/Coroutine.c']
65b378551ab9dfe1d1128a67286b3de0034a552c,2020-11-26 18:55:49,Stefan Behnel,Use an older transitive dependency that still works in Py2.7.,['test-requirements-cpython.txt']
e33ae21c9dfe3a94b0ee8e3d5a6d7b78709ea8d9,2020-11-26 17:06:31,Stefan Behnel,Update changelog.,['CHANGES.rst']
c253e064f07c11577ef2b79f9df83cd7c5a851fc,2020-11-26 16:32:36,Stefan Behnel,Try to fix build in Py2: pyrsistent 0.16+ is Py3-only.,['test-requirements-cpython.txt']
6ba0345d98ee9ed0fcdc662be4fc81a7754d5080,2020-11-26 11:26:46,Stefan Behnel,"Fix ""__Pyx_PyObject_CallOneArg()"" when calling PyCFunctions with the METH_METHOD flag set.",['Cython/Utility/ObjectHandling.c']
17336946539439ecc617399bbebf9e1990a3a672,2020-11-20 21:12:22,Stefan Behnel,"Fix ""__Pyx_PyObject_AsDouble()"" special-casing to prevent de-optimisation through potential PyFloat unpack-repack cycles.",['Cython/Compiler/Optimize.py']
ef95d35423c8f19f4103c777a8848d8c4ec1cf57,2020-11-20 21:07:24,Stefan Behnel,Include PyLong_AsDouble() in optimised float() implementations.,"['Cython/Compiler/Builtin.py', 'Cython/Compiler/Optimize.py', 'Cython/Utility/Optimize.c']"
95624a28408c052b51aab9ea1ba09e1cc244ffeb,2020-11-20 20:24:41,Stefan Behnel,"Make sure that the float() input string is ""ready"" before parsing it.",['Cython/Utility/Optimize.c']
c59a1dc1b41514085a4aa2b6d51c7a9ac5393c95,2020-11-20 20:21:42,Stefan Behnel,"Fix ""float(None)"" after optimising the ""float('...')"" parsing case..","['Cython/Compiler/Optimize.py', 'tests/run/builtin_float.py']"
ba195179d4282f762f4ca3ef7b57c30effb9f319,2020-11-20 20:08:18,Stefan Behnel,"Make underscore number parsing independent of ""CYTHON_USE_TYPE_SLOTS"" guard.",['Cython/Utility/Optimize.c']
b738fd8c0f19c2fdd510f1a0c1a581509f6e836f,2020-11-20 16:06:57,Stefan Behnel,Define `Py_ISSPACE()` if PyPy lacks it.,['Cython/Utility/ModuleSetupCode.c']
79954c0e32b8512266887f326e4b21f4349b4306,2020-11-20 16:06:06,Stefan Behnel,Fix reference to unused C utility functions.,['Cython/Utility/Optimize.c']
72de7afdb730f021151071f666d882b181c31fff,2020-11-20 07:46:55,Stefan Behnel,Add missing dependency for utility code.,['Cython/Utility/Optimize.c']
c93c9429d941b40c3f2745987efd1ca0e46b7083,2020-11-19 22:03:51,Stefan Behnel,Add a comment regarding a missing optimisation.,['Cython/Utility/Optimize.c']
024c0b255664630856f5c40a9a0a229c52a2e680,2020-11-19 21:46:27,Stefan Behnel,Optimise float() also for bytes/bytearray values that contain underscores (PEP-515).,"['Cython/Utility/Optimize.c', 'tests/run/builtin_float.py']"
795b93a2d4f905ec08bb0534712dd572aba9d47b,2020-11-18 18:10:19,Stefan Behnel,"Optimise calling float() also on unicode values by returning a C double directly.
(Probably not as optimal since it can lead to de-optimisation when we actually need a PyFloat result.)","['CHANGES.rst', 'Cython/Compiler/Optimize.py', 'Cython/Utility/Optimize.c', 'tests/run/builtin_float.py']"
99b874cb500321f335ad849a9492b4bc029f3dae,2020-11-18 16:59:33,Stefan Behnel,Optimise calling float() on bytes/bytearray values by returning a C double directly.,"['CHANGES.rst', 'Cython/Compiler/Optimize.py', 'Cython/Utility/Optimize.c', 'tests/run/builtin_float.py']"
2d200b1c63e1bf2207a7904114b9d6ea54d637b5,2020-11-18 16:46:06,Stefan Behnel,Merge branch '0.29.x',['Cython/Includes/cpython/conversion.pxd']
09ccf3c23b58d44f96852d971b43974a02f591fb,2020-11-18 16:44:07,Stefan Behnel,Add flags and missing exception declaration for PyOS_*() string conversion functions in cpython/conversion.pxd.,['Cython/Includes/cpython/conversion.pxd']
945b92193228da330f923fb9f183d64ec5334b6b,2020-11-18 08:20:23,Stefan Behnel,Merge branch '0.29.x',"['Cython/Includes/cpython/conversion.pxd', 'tests/run/cython_includes.pyx']"
b64eafe74baa69faf0457c981b0f0ea31b892286,2020-11-18 08:18:50,Stefan Behnel,Add the PyOS_*() string comparison/conversion functions as cpython/conversion.pxd.,"['Cython/Includes/cpython/conversion.pxd', 'tests/run/cython_includes.pyx']"
ed25f12b9e1fd9b7d5c3af56a9e61fd68d1a1d11,2020-11-14 08:43:12,Fedor Alekseev,Support namespace packages inside regular packages (GH-3905),"['Cython/Utils.py', 'tests/build/cythonize_pep420_namespace.srctree']"
362fd6a069c65868b1e8b718b38760e33ad6e28b,2020-11-09 06:32:31,scoder,"Add ""Py_PRINT_RAW"" flag value.",['Cython/Includes/cpython/fileobject.pxd']
d85e3d0c43b639861d31dbcf9ac8b7ba6e154902,2020-11-09 06:28:07,scoder,Add comment from CPython docs that these functions are considered legacy.,['Cython/Includes/cpython/fileobject.pxd']
a23f5cf9b0e99e344ee0f8e287391304e820234f,2020-11-09 00:47:47,Zackery Spytz,"Add fileobject.pxd

The comments are taken from the C API documentation
(https://docs.python.org/3.9/c-api/file.html).

PyObject_AsFileDescriptor() is already present in object.pxd.","['Cython/Includes/cpython/fileobject.pxd', 'tests/run/cython_includes.pyx']"
c3121126b041d4e7e2aaa590693689ae828f3ce8,2020-11-08 17:43:50,Stefan Behnel,Merge branch '0.29.x',[]
5db55d5b3bc79a21d3b97f8ddba9ea07c8e8d03c,2020-11-08 17:43:04,Stefan Behnel,"Fix typo in CHANGES.rst.
Closes https://github.com/cython/cython/pull/3902",['CHANGES.rst']
e18fa0bf4642e1272ea21accf9f5f496c129ad04,2020-11-08 08:46:06,Stefan Behnel,Fix file path lookup in coverage test on Windows.,['tests/run/coverage_cmd.srctree']
04a94d5d990aeddbbef59ba4c7251f4d66a04308,2020-11-08 08:39:18,Stefan Behnel,"Try to fix platform_adaptation test on Windows, again.",['docs/examples/userguide/external_C_code/platform_adaptation.pyx']
44cde334d5adaabafa6f167f8d32986337c68d7e,2020-11-08 06:12:26,Stefan Behnel,Clarify why it's a good thing that variables of builtin types reject subtypes.,['docs/src/userguide/language_basics.rst']
062cb8d11062c4204808d8be958066d9a27dc44c,2020-11-08 06:01:07,Zackery Spytz,Fix a typo in CHANGES.rst (GH-3902),['CHANGES.rst']
e24a590a2ef3a9cf6cc9fa6988b77b18bba000c1,2020-11-08 05:53:41,Stefan Behnel,Merge branch '0.29.x',[]
7754c9734ad334204c112d7c742f722cdbfa69e0,2020-10-21 17:31:16,Stefan Behnel,Disable the embedding test on MacOS-X to get the builds green again. Too many PRs depend on the travis tests to give a green light.,['runtests.py']
570ca8b0afcc663561e3667876836842c43b8d18,2020-11-07 11:41:04,da-woods,"Fix ""common_include_dir"" test on OS X on Travis (GH-3893)

Also turn off the clang warning about deprecated declarations to try to reduce the size of the OSX logs.","['.travis.yml', 'tests/build/common_include_dir.srctree']"
3f31af311cdb0df42e0fce283a3667696d2d3668,2020-11-08 05:41:16,Stefan Behnel,"Revert ""Revert ""Disable the embedding test on MacOS-X to get the builds green again. Too many PRs depend on the travis tests to give a green light.""""

This reverts commit bea8df39208de41717755b4176b89c4f37ac105f.",['runtests.py']
984a5d4585f3f9aefe10dca6cd774c2b61581a0e,2020-11-07 16:41:47,Stefan Behnel,Merge branch '0.29.x',[]
560f512c61481f94a5a3214234df43a81c2bb562,2020-11-07 16:38:34,Stefan Behnel,Fix const memoryviews of structs for 0.29.x branch. The master branch differs here.,['Cython/Compiler/Buffer.py']
a53142fd244df5da2ba3bfaef66db93a61c1e18a,2020-11-07 12:47:39,Ruben Vorderman,Add a small pointer guide in the 'Interfacing with External C Code' chapter (GH-3833),['docs/src/userguide/external_C_code.rst']
c7ea3c1b4d8371b92455c76b24b6e819d54e43e7,2020-11-07 12:32:37,da-woods,"Fix crash on memoryview self-assignments (GH-3874)

* Fixed crash on memoryview self-assignment
* Rename memoryview decref function to match what it does","['Cython/Compiler/FusedNode.py', 'Cython/Compiler/MemoryView.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Utility/MemoryView.pyx', 'Cython/Utility/MemoryView_C.c', 'tests/memoryview/memoryview.pyx']"
a8d806bedfe353cf297fc00d369ddfe22535f559,2020-11-07 12:13:59,jbrockmendel,ENH: C-properties for datetime objects (GH-3737),"['Cython/Includes/cpython/datetime.pxd', 'tests/run/datetime_pxd.pyx']"
3774a78b09311c4855f2c6d338e5f3b24db92141,2020-11-07 11:51:25,jbrockmendel,"Port numpy.pxd changes from numpy#17150 (GH-3825)

https://github.com/numpy/numpy/pull/17150/files",['Cython/Includes/numpy/__init__.pxd']
ff7731ec70d348987cbc2a0ecedaf814b803aa80,2020-11-07 11:41:04,da-woods,"Fix ""common_include_dir"" test on OS X on Travis (GH-3893)

Also turn off the clang warning about deprecated declarations to try to reduce the size of the OSX logs.","['.travis.yml', 'tests/build/common_include_dir.srctree']"
bea8df39208de41717755b4176b89c4f37ac105f,2020-11-07 11:38:06,Stefan Behnel,"Revert ""Disable the embedding test on MacOS-X to get the builds green again. Too many PRs depend on the travis tests to give a green light.""

This reverts commit 1c947de74bcc67c6bf8147506e5c6bbe08a927e0.",['runtests.py']
3919efd3a137d1d7b490d0ce1103ccb81485b865,2020-11-07 11:25:22,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
ce32e1e5e726b363538c3855367469092871493c,2020-11-07 11:25:02,Stefan Behnel,Update changelog.,['CHANGES.rst']
4a78fbbf5e96464ad484d717f79be823a7ce53d6,2020-11-07 11:23:36,Zackery Spytz,"Add cellobject.pxd (GH-3901)

The comments are taken from the C API documentation
(https://docs.python.org/3.9/c-api/cell.html).","['Cython/Includes/cpython/cellobject.pxd', 'tests/run/cython_includes.pyx']"
307da3a1544fbcf63a8b285883301c2a3cd2e20c,2020-11-07 11:23:36,Zackery Spytz,"Add cellobject.pxd (GH-3901)

The comments are taken from the C API documentation
(https://docs.python.org/3.9/c-api/cell.html).","['Cython/Includes/cpython/cellobject.pxd', 'tests/run/cython_includes.pyx']"
8e8a08c154739223af186623a44b51676b5fc683,2020-11-07 11:19:31,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
794415859d0c5cb02ac5a60f784b35eed26ac93d,2020-11-07 11:16:56,Stefan Behnel,Update changelog.,['CHANGES.rst']
fb88a35e30461b6f3c67e500ba715726de782789,2020-09-03 13:57:38,jakirkham,"Define extern `PyBUF_MAX_NDIM` (GH-3811)

Ensure that Cython exposes `PyBUF_MAX_NDIM` from Python as part of
`cpython.buffer` to allow access to developers.",['Cython/Includes/cpython/buffer.pxd']
c58f339dedc1158ef041494b54ecd7e1f0502976,2020-10-21 12:56:35,Stefan Behnel,Simplify the output stream capturing for the C compiler runs by using a temp file instead of threads.,['Cython/Utils.py']
acc1166033d1b5a2381a61f38ec63205283847b3,2020-10-26 20:11:28,da-woods,"Fix memoryview casts involving fused types (GH-3882)

I think this approach is more satisfactory than the old way it used to ""work"", where ""fused_to_specific"" was permanently added to the module scope containing the fused type (in this case the Cython scope), was applied in ""Scope.lookup_type"", but continued to have an effect on the scope forever.

Closes https://github.com/cython/cython/issues/3881","['Cython/Compiler/Nodes.py', 'tests/run/fused_types.pyx']"
a9699f7486c2bc83d23dd3680899458e41cafb96,2020-11-05 21:06:40,Ashwin Srinath,"Allow const declarations in nested template arguments (GH-3886)

Closes https://github.com/cython/cython/issues/1355","['Cython/Compiler/Parsing.py', 'tests/compile/cpp_templates_nested.pyx']"
58955604d48cf355c73a8c67d9ad5fd9efd646bc,2020-11-04 13:31:51,Zackery Spytz,"Add O_DIRECT to posix/fcntl.pxd (GH-3894)

Closes https://github.com/cython/cython/issues/3242",['Cython/Includes/posix/fcntl.pxd']
43490ef9e809f9a8861efcd8ea5d394f21773747,2020-11-05 21:18:01,Zackery Spytz,"Add cpython/codecs.pxd (GH-3899)

The comments are taken from the C API documentation: https://docs.python.org/3.9/c-api/codec.html","['Cython/Includes/cpython/codecs.pxd', 'tests/run/cython_includes.pyx']"
d195c6c399d57cdc658c2c8ceeb1fc4d96480ee8,2020-11-07 10:35:39,Stefan Behnel,"Make const memoryviews of struct dtypes work.
Closes https://github.com/cython/cython/issues/2251","['Cython/Compiler/Buffer.py', 'tests/memoryview/memslice.pyx']"
a23cffe3038b354840349d0fbb2543593ecc4042,2020-11-07 10:35:39,Stefan Behnel,"Make const memoryviews of struct dtypes work.
Closes https://github.com/cython/cython/issues/2251","['Cython/Compiler/Buffer.py', 'tests/memoryview/memslice.pyx']"
422c26a7be960cf696b8efa85eee518df5b464e1,2020-11-05 21:18:01,Zackery Spytz,"Add cpython/codecs.pxd (GH-3899)

The comments are taken from the C API documentation: https://docs.python.org/3.9/c-api/codec.html","['Cython/Includes/cpython/codecs.pxd', 'tests/run/cython_includes.pyx']"
6868faa8e033763117b4cabffdf95c0e8627563f,2020-11-05 21:06:40,Ashwin Srinath,"Allow const declarations in nested template arguments (GH-3886)

Closes https://github.com/cython/cython/issues/1355","['Cython/Compiler/Parsing.py', 'tests/compile/cpp_templates_nested.pyx']"
5581da4c4d446d745d25ad48fb990e3f05c9983e,2020-11-04 13:31:51,Zackery Spytz,"Add O_DIRECT to posix/fcntl.pxd (GH-3894)

Closes https://github.com/cython/cython/issues/3242",['Cython/Includes/posix/fcntl.pxd']
3ae56c90d887869407f30bb117ca61f735cec6db,2020-10-26 20:11:28,da-woods,"Fix memoryview casts involving fused types (GH-3882)

I think this approach is more satisfactory than the old way it used to ""work"", where ""fused_to_specific"" was permanently added to the module scope containing the fused type (in this case the Cython scope), was applied in ""Scope.lookup_type"", but continued to have an effect on the scope forever.

Closes https://github.com/cython/cython/issues/3881","['Cython/Compiler/Nodes.py', 'tests/run/fused_types.pyx']"
00e34553343606b7452a515a0ff8b4b7df311423,2020-10-26 19:18:25,da-woods,"Detect _MSC_VER for __PYX_STD_MOVE_IF_SUPPORTED to support MSVC support even when ""__cplusplus"" is not set appropriately (GH-3792)",['Cython/Utility/CppSupport.cpp']
0b74f1d14172c0465426238010189d3cea211ccf,2020-10-23 06:25:21,scoder,Help reporters see the first paragraph of the bug report template.,['.github/ISSUE_TEMPLATE/bug_report.md']
f15d015941a580f959b7246c7d8b9d9c2aec5109,2020-10-21 12:56:35,Stefan Behnel,Simplify the output stream capturing for the C compiler runs by using a temp file instead of threads.,['Cython/Utils.py']
1c947de74bcc67c6bf8147506e5c6bbe08a927e0,2020-10-21 17:31:16,Stefan Behnel,Disable the embedding test on MacOS-X to get the builds green again. Too many PRs depend on the travis tests to give a green light.,['runtests.py']
fb4fefc6d2654a2605d8430056d1f82999bf3000,2020-10-21 12:14:42,scoder,"Improve error reporting when users mistakenly write ""&&"" or ""||"" instead of Python's ""and"" and ""or"" operators. (GH-3858)","['Cython/Compiler/Lexicon.py', 'Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py', 'tests/errors/e_binop_and.pyx', 'tests/errors/e_binop_or.pyx']"
ba6cbed8193775c80402bc5112cbaf16246ee6bd,2020-10-10 10:47:56,da-woods,"Add warning for common user mistake and fix crash relating to annotated attributes. (GH-3850)

Closes https://github.com/cython/cython/issues/3830","['Cython/Compiler/ExprNodes.py', 'tests/run/annotation_typing.pyx', 'tests/run/pep526_variable_annotations.py']"
82ca1550c5dae2ca9bf4d2e0b03c795676473d8f,2020-10-08 17:43:26,Stefan Behnel,Fix test after changing the hash method used for escaping long type descriptions.,['Cython/Compiler/Tests/TestTypes.py']
7e50d9610c1f4e1805b1b6f222a0a38bde5290d0,2020-10-08 11:00:24,da-woods,"Removed `same_as` methods from Plex.Actions.Action (GH-3847)

It seems to be unused and it looked like the existing implementation was faulty.","['Cython/Plex/Actions.pxd', 'Cython/Plex/Actions.py']"
8708b74671f3583876d1e277e368f9c49f6b4a30,2020-10-08 10:39:12,Stefan Behnel,Resolve merge conflict.,['Cython/Compiler/PyrexTypes.py']
f24dca2e42f1780e7c681fb8a90f9eec797d8914,2020-10-08 05:39:45,Stefan Behnel,Merge branch '0.29.x',['appveyor.yml']
76ec3b1231e4403872f882bc0c6e62124bd20612,2020-10-08 05:39:27,Stefan Behnel,Add Python 3.9 to appveyor build.,['appveyor.yml']
06e7073c283a1ec6c2fe68a0f4dd61b846c0f13d,2020-10-08 05:35:36,Stefan Behnel,Merge branch '0.29.x',['Cython/Compiler/PyrexTypes.py']
4a78996692550f80fe4b63fb97e84dcf26ff6864,2020-10-05 04:05:49,ptype,Minor docs clarification on error return values. (GH-3859),['docs/src/userguide/language_basics.rst']
04988898cac961160ac3ba814bb425badd74853c,2020-10-04 16:50:04,Stefan Behnel,"docs: fix typos, minor clarification.",['docs/src/userguide/language_basics.rst']
737152fc2ffacc710d922e6f4f7b0a2f614261f7,2020-10-04 16:38:44,Stefan Behnel,Fix ReST typo.,['docs/src/userguide/language_basics.rst']
2852bd59e0f07d5d15f8a18f1fbb629a1960e870,2020-10-04 15:44:13,Stefan Behnel,Clarify the section on exception return values.,['docs/src/userguide/language_basics.rst']
e1ce5480bed344b176320b95213e92039cd091d4,2020-10-08 05:33:02,Stefan Behnel,Make type identifier escaping deterministic: hash() hashing lead to unpredictable random prefixes for long names across multiple Python runs.,['Cython/Compiler/PyrexTypes.py']
5cdd8e2d3498d15206418d860b60ec5ce0c3f6dd,2020-09-30 09:17:11,Stefan Behnel,Use more recent C-API functions on tear-down of the embedding code.,['Cython/Utility/Embed.c']
3ad4c9895b1c591c6e81cdfacb9d05c27d5781da,2020-09-29 04:28:51,Stefan Behnel,"Rename test file to avoid ambiguity with the C ""const"" modifier.",['tests/run/constants.pyx']
b1ae57ba18d6c82c4e332be0cf010a172ff8b4cd,2020-10-08 05:22:17,Stefan Behnel,Merge branch '0.29.x',[]
3724e14458b7d402788fff8c4b3aea378c707637,2020-10-08 05:21:28,Stefan Behnel,"Disable a test that fails in Py2 in 0.29.x since 'str' is 'unicode' in cython3, also in Python 2.",['tests/run/cython3.pyx']
270044f86a56f57a719ab4b36f5ce8a5caefdf1c,2020-10-08 05:07:08,Jeppe Dakin,Split a combined assert in two to avoid an unused C temp variable when assertions are disabled. (GH-3870),['Cython/Utility/MemoryView.pyx']
0c34edb28f38e3b3b7b94abcedf5cfab5699d38f,2020-10-08 05:07:08,Jeppe Dakin,Split a combined assert in two to avoid an unused C temp variable when assertions are disabled. (GH-3870),['Cython/Utility/MemoryView.pyx']
b11674bae5c771fee0f0a9176eb825eeb3d59c74,2020-10-06 15:56:35,Stefan Behnel,Merge branch '0.29.x',[]
b2b759ff714bd350e87faaf25c13f7dab459856f,2020-10-06 15:55:02,Nick Pope,"Prefer Element.iter() over the deprecated Element.getiterator(). (GH-3865)

`xml.etree.ElementTree.Element.getiterator()` was deprecated in Python
2.7 & 3.2 and removed in Python 3.9.",['Cython/Compiler/ModuleNode.py']
b263f1d171d3a3ec541b9b8ff7a090dcec862c77,2020-10-06 15:33:15,Nick Pope,"Replace deprecated Element.getiterator() with Element.iter(). (GH-3864)

`xml.etree.ElementTree.Element.getiterator()` was deprecated in Python
2.7 & 3.2 and removed in the freshly released Python 3.9.",['Cython/Compiler/ModuleNode.py']
0a0be4412e89a77acf4273ab2fa0d11793cc0f31,2020-10-05 04:05:49,ptype,Minor docs clarification on error return values. (GH-3859),['docs/src/userguide/language_basics.rst']
883f8f5bd6e2dc095529ad5a33c766f73a9ff413,2020-10-04 16:50:04,Stefan Behnel,"docs: fix typos, minor clarification.",['docs/src/userguide/language_basics.rst']
8e11b01d50faa209bee2fda6ecd810ef71d17b00,2020-10-04 16:38:44,Stefan Behnel,Fix ReST typo.,['docs/src/userguide/language_basics.rst']
012f0a0191e7f4049f09b1993bcc3dfcf5d8fd36,2020-10-04 16:36:51,Stefan Behnel,"Try to fix platform specific test once more.
""synchapi.h"" is not supposed to be included directly, and ""windows.h"" can break ... other stuff.
Let's see what we can do.",['docs/examples/userguide/external_C_code/platform_adaptation.pyx']
b8ad4968042ed4d72bf4cdf2f0199d29c2fdb6fe,2020-10-04 16:34:51,Stefan Behnel,"Looks like the usual macro on Windows is ""_WIN32"" and not ""WIN32"". Let's support both, to be on the safe side.","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/Embed.c', 'Cython/Utility/ModuleSetupCode.c']"
299fcc38bc9628bcaaa0fc28a5c35c12c601346b,2020-10-04 16:28:41,Stefan Behnel,Be a bit more paranoid about macro usage in the refnanny code.,['Cython/Utility/ModuleSetupCode.c']
84d7f74248cc7f11b72ac4455446844e3adc3e9a,2020-10-04 15:44:13,Stefan Behnel,Clarify the section on exception return values.,['docs/src/userguide/language_basics.rst']
12e02297df17d5680cbb8f9def6de056e10a744a,2020-10-04 10:00:12,Stefan Behnel,Fix test compile failure in MSVC.,['docs/examples/userguide/external_C_code/platform_adaptation.pyx']
f09666a740a02002a2dbad010cb3626e57b6dbd3,2020-10-03 17:32:58,Stefan Behnel,"Move a memoryview test out of the ""run"" test directory since memoryview tests tend to be slow and have their own test directory.","['tests/memoryview/cfunc_convert_with_memoryview.pyx', 'tests/run/cfunc_convert.pyx']"
196d9e35eb7d468d2bb10b97e9de39819c2e851e,2020-10-03 17:08:40,Stefan Behnel,"Clean up and test type identifier escaping.
- hash() hashing lead to unpredictable random prefixes for long names across multiple runs
- use a single regex run instead of repeated calls to replace()","['Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Tests/TestTypes.py']"
c9e107b4fe7e56959930f8dae0480bf8208fc1f8,2020-10-03 17:10:40,da-woods,"Allow creation of wrappers for cdef functions with memoryviews (GH-3856)

Fixes https://github.com/cython/cython/issues/3843","['Cython/Compiler/PyrexTypes.py', 'tests/run/cfunc_convert.pyx']"
dfff744138e02f7bbc8a45cef28eef1a5a999c0d,2020-10-03 10:38:53,Stefan Behnel,Fix test compile failure in MSVC.,['docs/examples/userguide/external_C_code/platform_adaptation.pyx']
d075c3fe87d838011cef60d157704a791e4ff265,2020-10-03 10:29:57,Stefan Behnel,"Test Py3.7 and Py3.8 in C and C++ mode under appveyor.
Run both in the same job since the machines are quite fast with parallel processes, but setting one up is slow.",['appveyor.yml']
05b6913d9fff4ef1468fbb25eef47ced650c831f,2020-10-03 10:03:13,Stefan Behnel,Avoid C compiler warning about unused variable in test.,['tests/compile/cpp_rvalue_reference_binding.pyx']
6d464dd1c03211d50a589cc5067fd59932d703cd,2020-10-03 09:56:22,Stefan Behnel,Avoid C compiler warnings about unused variables in test.,['tests/run/cpp_forwarding_ref.pyx']
90684ac416f0349761074e242be4d981de40ce0f,2020-10-03 09:13:24,Ashwin Srinath,"Add support for forwarding references (GH-3821)

See, for example, https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers

Closes #3814","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Lexicon.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/PyrexTypes.py', 'tests/compile/cpp_rvalue_reference_binding.pyx', 'tests/errors/cpp_rvalue_reference_support.pyx', 'tests/errors/e_cpp_references.pyx', 'tests/run/cpp_forwarding_ref.pyx']"
27616f3380dfdb9b1f35fc521b4e99c0ee53f868,2020-10-03 07:36:00,Stefan Behnel,Make C code C89 again.,['Cython/Utility/CythonFunction.c']
592adcc46b7f4a2cc5d5f8785d00c9838f55295a,2020-10-03 05:47:48,Stefan Behnel,Fix RST typo.,['docs/src/userguide/external_C_code.rst']
679eff3e2028e98a266f68e27b1094219e505eec,2020-10-03 05:45:04,Stefan Behnel,Add a more common and more versatile example to the Verbatim C-Code documentation.,"['docs/examples/userguide/external_C_code/platform_adaptation.pyx', 'docs/examples/userguide/external_C_code/verbatim_c_code.pyx', 'docs/src/userguide/external_C_code.rst']"
474573b324fdd4e2e113043efe326971e652769b,2020-10-02 14:19:01,da-woods,"Fixed assorted crashes with fused types (GH-3853)

Show a more detailed error for unspecializable fused return types.","['Cython/Compiler/Errors.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'tests/errors/fused_types.pyx']"
af757997c7d13c00b579fd00393350d9367dd12a,2020-10-01 09:35:11,Stefan Behnel,Replace useless comment.,['Cython/Compiler/PyrexTypes.py']
28f5f26ba7073bc589b5dfc1438c62813d17063f,2020-09-30 17:31:06,Stefan Behnel,Restore Py2 compatibility in test.,['tests/run/cython3.pyx']
a68109c077fcd06c291f8491731c538176c3b9f7,2020-09-30 15:40:24,Rajat Dash,Improve some wordings in README.rst (GH-3852),['README.rst']
ac0810cfd3774048dfa83bd6155a890fc09fa717,2020-09-30 09:17:11,Stefan Behnel,Use more recent C-API functions on tear-down of the embedding code.,['Cython/Utility/Embed.c']
b2de02c501c5f02fc64da0697ab9a578a6f89e0c,2020-09-29 06:44:57,Stefan Behnel,"Declare ""scanner.sy"" as ""unicode"" string to optimise its usage.","['Cython/Compiler/Parsing.py', 'Cython/Compiler/Scanning.pxd']"
5e425df6a7579dcd292e792cffe70cfb721d0e75,2020-09-29 06:15:04,Stefan Behnel,Set language level in Cython's speed-up .pxd files since it no longer depends on the .py files that they correspond to.,"['Cython/Compiler/Code.pxd', 'Cython/Compiler/FlowControl.pxd', 'Cython/Compiler/ParseTreeTransforms.pxd', 'Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Scanning.pxd', 'Cython/Compiler/Visitor.pxd']"
cd9b22bf2b57d626f87e4239f847775e2fb11a84,2020-09-29 05:57:14,Stefan Behnel,Join '*' and '**' parsing in declarators to avoid differences for 'const' parsing etc.,"['Cython/Compiler/Parsing.py', 'tests/compile/const_decl.pyx', 'tests/errors/const_decl_errors.pyx']"
d941d208deb172af157505913c98d5b49d95e5d5,2020-09-29 04:28:51,Stefan Behnel,"Rename test file to avoid ambiguity with the C ""const"" modifier.",['tests/run/constants.pyx']
70b064a6c8c249f2250234b45af3b593c807cd71,2020-09-28 18:18:40,da-woods,Some more glossary entries (GH-3836),"['docs/src/tutorial/cython_tutorial.rst', 'docs/src/tutorial/memory_allocation.rst', 'docs/src/tutorial/pure.rst', 'docs/src/userguide/extension_types.rst', 'docs/src/userguide/glossary.rst', 'docs/src/userguide/language_basics.rst', 'docs/src/userguide/parallelism.rst', 'docs/src/userguide/wrapping_CPlusPlus.rst']"
b2b81c9c5b87645c3f2a71322ead2ab8c9b7b567,2020-09-28 18:13:53,Sean,"Add support for PEP 526 `__annotations__` in class body. (GH-3829)

Closes https://github.com/cython/cython/issues/2552","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'tests/run/decorators_T593.pyx', 'tests/run/locals_T732.pyx', 'tests/run/metaclass.pyx', 'tests/run/pep526_variable_annotations.py', 'tests/run/pyclass_annotations_pep526.py', 'tests/run/test_grammar.py']"
768b167dffa81af46ce577046152dc4c6739c0f8,2020-09-28 18:00:31,Stefan Behnel,Fix test after removing the 'u' prefix from unicode string annotation values.,['tests/run/cython3.pyx']
af1300f7655b2ccdf6308d9c9fb839d7083782e9,2020-09-26 18:32:43,Stefan Behnel,"Keep AnnotationNode instead of the bare annotation expression in ""entry.annotation"" to get access to the string representation.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Optimize.py']"
cf89182f8181a58bd9102034566856e7280f443c,2020-09-26 08:25:35,Stefan Behnel,"Do not include ""u"" string prefix in annotations since tools that process them probably expect Py3 string semantics anyway.","['Cython/Compiler/AutoDocTransforms.py', 'tests/run/embedsignatures.pyx']"
18bff629a801acddbf3b0cd24178196bbc3f6da2,2020-09-26 08:15:08,Stefan Behnel,Remember in the AnnotationsWriter when a serialised expression contained unknown/unsupported nodes.,['Cython/Compiler/AutoDocTransforms.py']
2db53219848204a21ecc623948ae4e1f3a6eaaef,2020-09-25 18:51:22,Stefan Behnel,"Extract ""error_type"" handling from the type creation functions.",['Cython/Compiler/PyrexTypes.py']
1e2119ad36465542e16ea931ea227ee16fa73489,2020-09-22 18:33:24,Stefan Behnel,"Prevent overflowing hash values for ""Machines.Node"" due to arbitrarily large unsigned pointer values.
Closes https://github.com/cython/cython/issues/3840",['Cython/Plex/Machines.py']
246a4b97f1322415351c2b3109560add8e3820e4,2020-09-22 09:21:35,da-woods,"Support utility code in headers (GH-3779)

Specifically this allows public packed structs but may also allow other public declarations that require small amounts of utility code.","['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py', 'tests/compile/packed_structs.pyx']"
aa8b0d9b89030c0b9ace5698ae5131c623acefa4,2020-09-13 09:33:20,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
7fae6c9dcdcefdd9d24212adc04fef5713506e4b,2020-09-13 09:33:14,Stefan Behnel,Update changelog.,['CHANGES.rst']
14f91b96ecbef6928a67646e361399df8b628412,2020-09-13 09:27:33,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
685a36997edf759372f79310d721ab2d837f05dd,2020-09-13 09:24:19,Stefan Behnel,Update changelog.,['CHANGES.rst']
4631f192a938acd3bd8bf26a5b54e992ad9b9a01,2020-08-02 10:43:10,Stefan Behnel,"Add ""check_size ignore"" to all NumPy.pxd class declarations to silence the useless size warnings about them.
See https://github.com/numpy/numpy/pull/432#issuecomment-689846159
Also remove the useless ""extern"" modifiers from cdef classes declared in ""extern"" sections.",['Cython/Includes/numpy/__init__.pxd']
67b7f0170136a1b932e57c072becbcc232264663,2020-09-13 07:16:50,Stefan Behnel,Update changelog.,['CHANGES.rst']
3fed4faf492175f1478a2b7e94a5721381ec1a87,2020-09-10 07:51:53,matham,Add doc support for cpdef enum (GH-3813),"['Cython/Compiler/Nodes.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Utility/CpdefEnums.pyx', 'tests/run/cpdef_enums.pxd', 'tests/run/cpdef_enums.pyx', 'tests/run/cpdef_scoped_enums.pyx']"
adb44bd0951834f426c64f6d929ca34dae44bb39,2020-09-07 20:58:28,Mathias Laurin,"Do not cover lines that were excluded in the coveragerc config file (GH-3682)

Closes #3680.","['Cython/Coverage.py', 'tests/run/coverage_cmd.srctree']"
65bbb6f295718f09108c8649ba3ce98318e65816,2020-09-05 07:14:35,Pedro Marques da Luz,"Make asyncio.iscoroutinefunction() recognise Cython compiled coroutines. (GH-3427)

Python's asyncio.coroutines uses an object to tag objects as coroutine functions. We now read this object and use it to tag Cython compiled coroutines as well.

It also includes tests to make sure `asyncio.iscoroutinefunction()` works as expected.
This doesn't fix `inspect.iscouroutinefunction()` (which uses a flag that can trigger undesirable behaviour for cython functions).

Closes https://github.com/cython/cython/issues/2273","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Utility/CythonFunction.c', 'tests/run/py35_asyncio_async_def.srctree']"
ae67505ecdb3190873e65dbca6e84af20b757667,2020-09-05 06:27:11,da-woods,Allow cast to ctuple (GH-3812),"['Cython/Compiler/Parsing.py', 'tests/run/ctuple.pyx']"
17c165c5968d96aa1622a02f2be82d4864794ec1,2020-09-02 12:24:30,cf-natali,"Silence gcc diagnostics whenever -1 is cast to something user provided. (GH-3803)

Fixes GH-2749.",['Cython/Utility/TypeConversion.c']
ba258f754ca810bca7ec307526bce894a23ed63b,2020-09-02 09:37:00,Stefan Behnel,"Rename ""GCC_DIAGNOSTIC"" macro to make it Cython specific and make it available to other utility code sections.",['Cython/Utility/TypeConversion.c']
fd1a431b76956d144b6e1faab00b3ab5ec5c1db7,2020-09-04 07:12:01,da-woods,"Call destructors for structs in C++ (GH-3228)

In C++ mode, structs can contain C++ classes. Therefore structs
should have their destructors called to ensure any class
contained is also destructed.

Also, a bit more thorough about ensuring constructor is generated where necessary.

Closes GH-3226.","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/TypeSlots.py', 'tests/run/cpp_classes.pyx']"
74357d8a317361991a061313cf90308538289eb7,2020-09-04 07:01:22,"Tasha ""Ren"" Chin",Created a glossary and added one new entry (GH-3810),"['docs/src/userguide/glossary.rst', 'docs/src/userguide/index.rst']"
4aec02117deb1d9279a81920f21459fc015d1a77,2020-09-03 14:57:32,Stefan Behnel,"Change test to use only integer calculations to prevent platform specific rounding issues, while keeping a reasonable distribution of integers across the PyLong digit ranges.",['tests/run/int128.pyx']
0f7251dadb251b66a19034e350c143b8a928fe1f,2020-09-03 13:57:38,jakirkham,"Define extern `PyBUF_MAX_NDIM` (GH-3811)

Ensure that Cython exposes `PyBUF_MAX_NDIM` from Python as part of
`cpython.buffer` to allow access to developers.",['Cython/Includes/cpython/buffer.pxd']
ae10e97160e10aeca5c9ebe0ab6326ee1b856a56,2020-09-02 12:24:30,cf-natali,"Silence gcc diagnostics whenever -1 is cast to something user provided. (GH-3803)

Fixes GH-2749.",['Cython/Utility/TypeConversion.c']
60193b64a1af4d2b364feb4e6624e189f8fd4ec9,2020-09-02 12:10:26,Stefan Behnel,Add a test for unpacking large PyLong values.,['tests/run/int128.pyx']
a2b2efca3ef268cb29bd9bb4335384acf5dd3b4f,2020-09-02 09:37:00,Stefan Behnel,"Rename ""GCC_DIAGNOSTIC"" macro to make it Cython specific and make it available to other utility code sections.",['Cython/Utility/TypeConversion.c']
e568b4d5125ccb37aee4f4cff04fd3540d60c62d,2020-09-01 15:25:44,Tao He,Fix `return None` in CodeWriter. (GH-3795),"['Cython/CodeWriter.py', 'Cython/Tests/TestCodeWriter.py']"
3e37b7421580c44eae6e9541b33376707fba68ff,2020-08-30 09:58:29,da-woods,"Improved documentation for annotation typing (GH-3799)

Mainly by moving it to a separate section to make it easier
to find, however also added a small amount of extra information
about some of the obvious limitations.",['docs/src/tutorial/pure.rst']
be43235ba3f4fca32dceda46424b36afb3cb00c9,2020-08-29 07:27:02,Stefan Behnel,"Update CPython ""test_fstring"" copy to Py3.9.",['tests/run/test_fstring.pyx']
4d54aeff34753551cf0ac9977d50c292dbf9d5d5,2020-08-24 14:47:28,Stefan Behnel,"Add a ""gdb"" test tag that depends on being able to run gdb.",['runtests.py']
79d0de9557dc95054c18948a6f97e973c9defdd5,2020-08-24 10:02:03,Stefan Behnel,Update changelog.,['CHANGES.rst']
afcc6040cd3a68c61b8e994b1341dd1f4ef9cf73,2020-08-24 09:50:49,Volker-Weissmann,"Fix cygdb (GH-3542)

* Cython debugger documentation: Added link to an installation script.
* Got a new libpython.py from the cpython source distribution.
* Default language level in tests is now 3 instead of 2
* Migrated codefile from python 2 to python 3.
* Added testcase for the cy list command in cygdb.
* Temporarily removing test case that freezes gdb.
* Fixed a bug that broke several Cygdb tests.

The cython_debug/cython_debug_info_* files map the names of the C-functions generated by the Cython compiler to the names of the functions in the *.pyx source. If the function was defined using ""def"" (and not ""cpdef"" or ""cdef"") in the *.pyx source file, the C-function named in cython_debug/cython_debug_info_* used to be __pyx_pw_*, which is the name of the wrapper function and now it is __pyx_f_*, which is the name of the actual function. This makes some Cygdb tests pass that did not pass before.

* Better error messages: If a cygdb command raises, a traceback will be printed.
* Fixed a bug in cygdb.

The following now works:
1. Start cygdb
2. Type ""cy exec"" and hit enter
3. Type some other lines
4. Type ""end"" and hit enter.
-> These ""other lines"" will get executed

* Fixed a bug in cygdb: cy list now works outside of functions.
* Added print_hr_allmarkers function for easier debugging.
* Fixed a bug that broke cygdb:

cy break did not work if you put the breakpoint outside of a function if there was e.g. the following somewhere in your *.pyx file:
cdef class SomeClass():
    pass

* Added a Cygdb test for printing global variables.
* Fixing cygdb: Replaced cy print with a simple, working solution.
* If an exception in Cygdb occurs, a stacktrace will be printed.
* Fixed a bug that broke cy break -p
* Bugfix: The compiler now writes out correctly which cython linenumber and path corresponds to which c linenumber.
* Set language_level=2 in runtests.py","['Cython/Compiler/Annotate.py', 'Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Debugger/Tests/codefile', 'Cython/Debugger/Tests/test_libcython_in_gdb.py', 'Cython/Debugger/libcython.py', 'Cython/Debugger/libpython.py', 'Cython/StringIOTree.py', 'docs/src/userguide/debugging.rst']"
bac20ea8f147ebb0ab8ac6990c092f9a872bd7ca,2020-08-24 09:39:21,da-woods,"Avoid merged-in code picking up directives from main module (GH-3785)

Fixes https://github.com/cython/cython/issues/1071","['Cython/Compiler/ModuleNode.py', 'tests/run/inlinepxd.pyx', 'tests/run/inlinepxd_support.pxd']"
e3586ce2fd93c67f6b0bf7bd92ee1a5a4531516c,2020-08-23 12:11:52,Stefan Behnel,Add a note on PayPal fees for small payments.,['docs/src/donating.rst']
88bf0055500113b5e981526ff46c9c2f02767371,2020-08-22 09:24:11,Stefan Behnel,Split known types into separate lines to let them have their own VCS history.,['Cython/Shadow.py']
e651bec3114522b232de18447840ada8d688c411,2020-08-23 11:21:04,da-woods,"Add more cimport_from_pyx tests (GH-3786)

There's now a fairly wide range of valid syntax for declaring things in pyx files and it should all be supported when cimporting from them.",['tests/run/cimport_from_pyx.srctree']
fcfd16c7467c31f255287a73f36cf66b32bc096c,2020-08-16 09:48:09,Ashwin Srinath,Fix Python 3.4 + MSVC issue with elaborated type specifier for enum (GH-3782),"['Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Utility/CppSupport.cpp']"
fb02b15da178e58ff2ce3bccd29eaeecc287dda9,2020-08-11 20:27:40,Stefan Behnel,"Revert ""Set PYTHONHOME in embedding test to fix compilation issues in Py3.8/macOS.""

This reverts commit a333d6a8d90f2a08cac9d01f8488e34938271381.

The change did not resolve the test issue in travis.","['Demos/embed/Makefile', 'runtests.py']"
9939253fed657c3a48be2188d97c11d72a011777,2020-08-11 11:00:36,Stefan Behnel,Fix unrelated test after changing MemoryView.pyx.,['tests/compile/fused_redeclare_T3111.pyx']
a333d6a8d90f2a08cac9d01f8488e34938271381,2020-08-11 10:30:46,Stefan Behnel,Set PYTHONHOME in embedding test to fix compilation issues in Py3.8/macOS.,"['Demos/embed/Makefile', 'runtests.py']"
1b6ce69b8dcceeef79bd93dc124599f34f02f595,2020-08-11 10:13:29,Stefan Behnel,Update changelog.,['CHANGES.rst']
4ceef735d23f81c19adeb3a875e0311296c25f31,2020-08-11 10:05:09,Stefan Behnel,Remove unused cimports.,['Cython/Includes/cpython/array.pxd']
07839df40354d4faf581aa5a9b9c185f48de9d9d,2020-08-11 10:04:30,Stefan Behnel,"Support simple, non-strided views of ""cython.array"".
Closes https://github.com/cython/cython/issues/3775","['Cython/Utility/MemoryView.pyx', 'tests/memoryview/cythonarray.pyx']"
27efc54159ac15f204f78af1cee2f917ffcbb4ef,2020-08-11 06:51:37,scoder,"In bug template, ask for Python version in addition to Cython version",['.github/ISSUE_TEMPLATE/bug_report.md']
b2288b86701fc3088434b8b8b18744dc741f42b1,2020-08-10 10:54:18,Stefan Behnel,"Add ""make checks"" target to run code checks.",['Makefile']
9bcc87756f8a99518a3f28b0c1df6d8239ae2b46,2020-08-10 08:18:05,Yuan,"Support PEP-560 (""__class_getitem__"") for extension classes (GH-3765)","['Cython/Compiler/Nodes.py', 'tests/errors/pep487_exttype.pyx', 'tests/run/test_genericclass_exttype.pyx']"
0208bf2b71f478779491bf4a63a6b61de3d7269e,2020-08-03 14:29:38,Stefan Behnel,"Remove an unused function that had been added for the now-deleted ""__getbuffer__"" implementation.",['Cython/Includes/numpy/__init__.pxd']
7d54ad7e71176cc34a403d061a0f11833b6aa58d,2020-08-03 14:17:39,Stefan Behnel,Silence a C compiler warning about a constant condition.,['Cython/Utility/ExtensionTypes.c']
ef42aa4344090c3787027971af6802f12c1b277c,2020-08-03 14:20:55,serge-sans-paille,"Use a generic shape accessor for pythranized array (GH-3762)

This is a follow up to https://github.com/cython/cython/pull/3307",['Cython/Utility/CppSupport.cpp']
206adb437d78333f2876da6ffd0dca7258b5ab11,2020-08-03 14:13:59,Stefan Behnel,"Avoid unused C variable warning by moving declaration and usage under the same condition.
Closes https://github.com/cython/cython/pull/3763",['Cython/Compiler/ModuleNode.py']
c2fab361c66fb6e4e2f1775b4eddf27e081721b3,2020-08-02 13:22:37,Stefan Behnel,Merge branch '0.29.x',['Cython/Includes/cpython/array.pxd']
4c02adc906a55cd5ac663b2bb62418cf1132092f,2020-08-02 13:22:17,Stefan Behnel,"Do not depend on the default type inference in ""cpython/array.pxd"".",['Cython/Includes/cpython/array.pxd']
e477b14bf129c065fd7c31d94cd60c6a736eab2c,2020-08-02 10:43:10,Stefan Behnel,"Remove useless ""extern"" modifiers from cdef classes declared in ""extern"" sections.",['Cython/Includes/numpy/__init__.pxd']
b270cf36e486fc880e786593a9b374cfbae7e3d1,2020-08-01 18:07:24,Stefan Behnel,Use NumPy 1.18.x for testing on travis as long as 1.19.[01+] ships a numpy.pxd that is incompatible with Cython 3.0.,['test-requirements.txt']
73dd028449b326675a7af49e6fe042eeac289253,2020-08-01 11:03:20,Stefan Behnel,"Try to fix NumPy test failures by not setting the ""NPY_NO_DEPRECATED_API"" #define for NumPy 1.19.[01].",['runtests.py']
02d4195a3f8949c50d0961a9205adaeff60f41ce,2020-08-01 11:00:37,Stefan Behnel,Add a comment that numpy.pxd is maintained by the NumPy project.,['Cython/Includes/numpy/__init__.pxd']
552e356ff2776d775dbdff61c0a5d7ae217ac588,2020-08-01 10:44:47,Stefan Behnel,"Readability improvements in ""numpy.pxd"".",['Cython/Includes/numpy/__init__.pxd']
c3318bea868ff8ae3df5f19cc46d3f4b78cda77d,2020-08-01 10:28:03,Stefan Behnel,"Change ""Py_intptr_t"" declaration in numpy.pxd to what CPython uses as fallback. ""int"" seems overly lazy if it tends to be larger on many systems.",['Cython/Includes/numpy/__init__.pxd']
05a5de6c800c58111260a70e0dd12c4b05963d73,2020-08-01 10:11:29,Stefan Behnel,"Remove dead code and dead comments from ""numpy/__init__.pxd"".",['Cython/Includes/numpy/__init__.pxd']
4206c26880f378b89e27f273e04de30554edb075,2020-08-01 09:29:56,Stefan Behnel,Clarify changelog entry.,['CHANGES.rst']
251447163fb37d8521822d1ab7a52366ea11aa7d,2020-08-01 06:32:27,Stefan Behnel,Update changelog.,['CHANGES.rst']
b58a91cd410ed2ee7353fc9e887a2f073da1923f,2020-08-01 06:31:19,Stefan Behnel,"Add type ""Py_hash_t"" in pure Python mode.",['Cython/Shadow.py']
6c704712bb6b8fb800a9a2d39be0f7b4a259b186,2020-08-01 09:11:42,scoder,Update issue templates,"['.github/ISSUE_TEMPLATE/bug_report.md', '.github/ISSUE_TEMPLATE/feature_request.md']"
b6c0461e4fe08d9c5c91a209c6cd1cc1e70bc05c,2020-08-01 05:20:09,Stefan Behnel,Add CI builds for different CPU architectures on travis.,['.travis.yml']
b7fd746d692803807d3334d7f76ef55424bdd395,2020-08-01 06:19:18,Stefan Behnel,Print test dependency versions to help with test failure debugging.,['runtests.py']
9f03226cd3d63e1b0d8f9848eb916cea9b53d024,2020-08-01 05:36:12,Stefan Behnel,"Add test comments on how ""memslice.pyx"" and ""memoryview.pyx"" relate.","['tests/memoryview/memoryview.pyx', 'tests/memoryview/memslice.pyx']"
8970c94d0c6207133e8fdfac642b1b033b8b4184,2020-07-31 07:00:26,Stefan Behnel,Prepare release of 3.0a6.,"['CHANGES.rst', 'Cython/Shadow.py']"
9c5ebdc448c1c126e1fc9cf13b71b1f36b029493,2020-07-29 06:33:31,Stefan Behnel,Update changelog.,['CHANGES.rst']
ab5a9360cf8871affd2e84eb25ab950452c6911f,2020-07-28 09:11:44,Stefan Behnel,"Reorder test module to restore the ""invalid - valid"" order.",['tests/errors/fused_types.pyx']
b9cecd602878334173aa9f6ed635d48739bfa2b1,2020-07-29 05:32:17,da-woods,Fixed reference types being passed to getitemint (GH-3755),"['Cython/Compiler/ExprNodes.py', 'tests/run/lvalue_refs.pyx']"
12a2ad5a090637248200563f4659a583664b70db,2020-07-29 05:23:44,da-woods,Don't create CReference in C (only c++) (GH-3746),['Cython/Compiler/ExprNodes.py']
5d8527d196c2ffd45b345ae31cac856f0c8fdc07,2020-07-25 22:42:09,Stefan Behnel,Add handshake emoji to donations banner to make it more visible.,['docs/_templates/layout.html']
9bda004bbc43513baadf768bc2510d636ea563b7,2020-07-25 22:38:59,scoder,Delete unused custom ticket template,['.github/ISSUE_TEMPLATE/custom.md']
bccdd77fce14f18c1939be44431632dd7a031926,2020-07-25 22:37:57,scoder,Update issue templates,"['.github/ISSUE_TEMPLATE/bug_report.md', '.github/ISSUE_TEMPLATE/custom.md']"
b1e381f5ef5056a40f4dcb6c8a99412cdef7f348,2020-07-25 22:32:14,scoder,Create bug template,['.github/ISSUE_TEMPLATE/bug_report.md']
0a2f0a690a7eda40ee43e4926184ce776897d911,2020-07-22 20:58:12,Stefan Behnel,Add donation banner to documentation.,"['docs/_templates/layout.html', 'docs/src/donating.rst']"
c7046bcb6c10994b6f703521da6183aca08b8b3b,2020-07-22 19:00:19,Stefan Behnel,Remove Google Analytics script from documentation to avoid tracking our users.,['docs/_templates/layout.html']
d69092a776ec06766efcd76c23a6f6abd6298b7c,2020-07-10 09:46:47,Stefan Behnel,Clarify changelog entry on ways to deal with the incompatible binop method change.,['CHANGES.rst']
9cb557c37332ae50bfdbd675409c690cdd5fd908,2020-07-20 18:42:00,da-woods,"Handle `for x in cpp_function_call()` (GH-3667)

Fixes https://github.com/cython/cython/issues/3663

This ensures that rvalues here are saved as temps, while keeping the
existing behaviour for `for x in deref(vec)`, where the pointer for vec
is copied, meaning it doesn't crash if vec is reassigned.

The bit of this change liable to have the biggest effect is that I've
changed the result type of dereference(x) and x[0] (where x is a c++
type) to a reference rather than value type. I think this is OK because
it matches what C++ does. If that isn't a sensible change then I can
probably inspect the loop sequence more closely to try to detect this.","['Cython/Compiler/ExprNodes.py', 'tests/run/cpp_iterators.pyx']"
c42ad91755f6c17e26e4d80d79926925bfb76731,2020-07-10 09:40:29,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/Builtin.py', 'tests/run/cython3.pyx']"
343262aed8b329c9105900df5f35a1a43eba8655,2020-07-10 09:38:33,Stefan Behnel,"Prevent compile error when the result of repr() is assigned to a ""unicode"" LHS with language_level=3.
Closes https://github.com/cython/cython/issues/3736","['CHANGES.rst', 'Cython/Compiler/Builtin.py', 'tests/run/cython3.pyx']"
0b4207a2d9b416bd38bfde1254426fdf5f2b671a,2020-07-09 21:47:49,Stefan Behnel,"Use inline properties on the ""PyComplex"" builtin type declared in ""cpython.complex"" to provide C level access to the ""real"" and ""imag"" attributes (which Cython provides anyway for the 'undeclared' builtin type).",['Cython/Includes/cpython/complex.pxd']
187992df77d6a01410a1e30d2071ad3da51f484f,2020-07-09 21:41:04,Stefan Behnel,Beautify example output.,['docs/examples/userguide/extension_types/c_property.pyx']
1bd40102c4770fd0fa3f8e2fdd1ee0e9376d9633,2020-07-09 21:29:22,Stefan Behnel,Document C inline properties.,"['docs/examples/userguide/extension_types/c_property.pyx', 'docs/src/userguide/extension_types.rst']"
abbe3eefeb05a52d7e6105e892325301966fc527,2020-07-09 21:16:48,Stefan Behnel,Reformat doc paragraph.,['docs/src/userguide/extension_types.rst']
8f445d7d66961bd8740ee8fd39aa066ac00ef758,2020-07-09 15:36:57,Stefan Behnel,PyPy does not support PyType_GetSlot(). Use type slots instead.,['Cython/Utility/ExtensionTypes.c']
8830bf2b102996e3dda97e83fc3ef4efe368bdc6,2020-07-09 12:29:34,Stefan Behnel,"Add the new ""c_api_binop_methods"" directive to the documentation.","['docs/src/userguide/source_files_and_compilation.rst', 'docs/src/userguide/special_methods.rst']"
ec99487becc3a4a4f3bbd83be0bc31f027c8e11e,2020-07-09 12:14:02,Stefan Behnel,"Update the documentation on the arithmetic special methods and issue a ""backwards compatibility"" warning when the reversed method is not implemented.

See https://github.com/cython/cython/issues/2056","['Cython/Compiler/ModuleNode.py', 'docs/src/userguide/special_methods.rst']"
85d9738e05b9822d13c15740c91ac1eeaa73647e,2020-07-09 09:46:11,Stefan Behnel,Fix typo in error message.,['Cython/Compiler/ModuleNode.py']
0a64e5df8401dd4f6a4067fe612e44729d2400c4,2020-07-09 09:42:57,Stefan Behnel,Use the more appropriate CYTHON_USE_TYPE_SLOTS guard for accessing the binop number slot.,['Cython/Utility/ExtensionTypes.c']
ecac244d3b71ef073202e03391120afdb031013b,2020-07-08 21:41:26,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/ExprNodes.py', 'tests/run/unicodeliterals.pyx']"
976f5483c6df8570f34076ef25af7e7512dd9347,2020-07-08 21:36:02,Stefan Behnel,Update changelog.,['CHANGES.rst']
8f586aa97bcbb8c10d7ee34ff858d69329b0c4af,2020-07-08 10:23:55,Stefan Behnel,Disable test in Py2.6.,['tests/memoryview/relaxed_strides.pyx']
13eb4498b70c947cd1bb972dcf4ebd75f609d3e4,2020-07-08 07:27:00,Stefan Behnel,"Using Py_UNICODE to store lone surrogates makes Py3 join surrogate pairs on 16-bit Unicode platforms (Windows) when reading them back in, although we correctly processed them before.
Instead, we now use the ""unicode_escape"" codec to store byte strings, because it can return surrogate characters (which the other codecs cannot).",['Cython/Compiler/ExprNodes.py']
f17dc17f4e8c5a10e9a47f021f7be4a445e525db,2020-07-07 19:53:57,Stefan Behnel,Improve test output in case of failures.,['tests/run/unicodeliterals.pyx']
94a4c90406ed331240c4e2f71bcaba23309b4566,2020-07-07 19:38:27,Stefan Behnel,Update changelog.,['CHANGES.rst']
21c348357ef1d1eb69d48d9757f6693dd9ed4da2,2020-07-07 19:29:34,will,Add missing unordered_map template defaults (GH-3686),"['Cython/Includes/libcpp/unordered_map.pxd', 'tests/run/cpp_stl_cpp11.pyx', 'tests/run/cpp_unordered_map_helper.h']"
2e21c6946245f62fa182a81ee166920fc1185ebd,2020-07-07 19:29:34,will,Add missing unordered_map template defaults (GH-3686),"['Cython/Includes/libcpp/unordered_map.pxd', 'tests/run/cpp_stl_cpp11.pyx', 'tests/run/cpp_unordered_map_helper.h']"
6e3c9562719d514384d0347490dcb01af58ce87b,2020-07-07 19:27:46,Stefan Behnel,Update changelog.,['CHANGES.rst']
34ab658bb5ce7c5e854a19a654d9bee9970962cf,2020-07-07 19:23:47,Clemens,"Always consider 0-sized arrays as C- and F-contiguous (GH-3728)

Fixes https://github.com/cython/cython/issues/2093","['Cython/Utility/MemoryView_C.c', 'tests/memoryview/relaxed_strides.pyx']"
58dbcf8414de146f7aefefbd2c12c7c5d42e9644,2020-07-07 19:23:47,Clemens,"Always consider 0-sized arrays as C- and F-contiguous (GH-3728)

Fixes https://github.com/cython/cython/issues/2093","['Cython/Utility/MemoryView_C.c', 'tests/memoryview/relaxed_strides.pyx']"
1910ad2bf27a28e1cb976f8f6a6558f25344e629,2020-07-07 07:13:46,Stefan Behnel,Update changelog.,['CHANGES.rst']
d1e4203e291e0a0a2f2f8e2d8ffe568e0d5f935b,2020-07-07 07:01:29,Stefan Behnel,Fix test in 16-bit Unicode deployments.,['tests/run/unicodeliterals.pyx']
e25209580b0e9745c5ad17617d883a41cad58adf,2020-07-05 19:00:19,Stefan Behnel,Disable Py_UNICODE fallback for __Pyx_UnicodeContainsUCS4() in Py3.9 since Py_UNICODE is deprecated and PEP-393 unicode is practically required.,['Cython/Utility/StringTools.c']
7540f7e9cd59e041cfecc7189a5e0625c5b3cff9,2020-06-30 11:52:18,scoder,"Really only use PyUnicode_FromUnicode() when needed (GH-3697)

* Really only use PyUnicode_FromUnicode() for strings that contain lone surrogate, not for normal non-BMP strings and not for surrogate pairs on 16bit Unicode platforms.

See https://github.com/cython/cython/issues/3678

* Extend buildenv test to debug a MacOS problem.
* Add a test for surrogate pairs in Unicode strings.
* Limit PyUnicode_FromUnicode() usage to strings containing lone surrogates.
* Accept ambiguity of surrogate pairs in Unicode string literals when generated on 16bit Py2 systems.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/StringEncoding.py', 'Cython/Compiler/Tests/TestStringEncoding.py', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/StringTools.c', 'tests/compile/buildenv.pyx', 'tests/run/unicodeliterals.pyx']"
b145f4f909c810e741cd5fb8ccf7814293c9ccb4,2020-07-06 21:40:06,Stefan Behnel,Prepare release of 0.29.21.,"['CHANGES.rst', 'Cython/Shadow.py']"
adf51a894eab79828a33cf17ce9a0c92cf973af8,2020-07-06 21:05:08,Stefan Behnel,Update changelog.,['CHANGES.rst']
1d7faaabc826e25f928111b0657567bc602ee446,2020-07-06 20:42:21,Stefan Behnel,Merge branch '0.29.x',[]
80f5a18ef1dc7af3c7292dd4bafefbaea024dfe6,2020-07-06 20:41:59,Stefan Behnel,Add missing name substitution in __Pyx_PyUnicode_Substring() utility code.,['Cython/Utility/StringTools.c']
c315c201d1e1d2d0a377d6b8210ef641ed3ab65d,2020-07-05 19:08:59,Stefan Behnel,Merge branch '0.29.x',[]
7d2366cf83886540e895b89edc2c5d9997853c14,2020-07-05 19:07:41,Victor Stinner,"Avoid calling PyUnicode_FromUnicode() in Py3 (GH-3721)

See https://github.com/cython/cython/pull/3677",['Cython/Utility/StringTools.c']
336363893b6cc02f6c1d0f26102ea2501784f7d7,2020-07-05 19:00:19,Stefan Behnel,Disable Py_UNICODE fallback for __Pyx_UnicodeContainsUCS4() in Py3.9 since Py_UNICODE is deprecated and PEP-393 unicode is practically required.,['Cython/Utility/StringTools.c']
ccd17d5331876b9f9a0b7ad47ca7e6eee738cce2,2020-07-02 18:54:28,Tao He,Improve syntax feature support of Cython CodeWriter (GH-3514),"['Cython/CodeWriter.py', 'Cython/Tests/TestCodeWriter.py']"
75f4aff7242f9e851094d0120bf9400094492f66,2020-07-01 16:46:36,Stefan Behnel,Merge branch '0.29.x',['test-requirements.txt']
195aeadc284b9388fef7d855bc08b22d5526d239,2020-07-01 16:44:40,scoder,"Validate and fix temp releasing (GH-3708) (GH-3717)

* Validate and fix temp releasing (GH-3708)
Backports 92147baf11071352ffbfa475d0d21e091753e628.

    * Fix a temp leak in the type init code.
    * Fix temp leaks in fused types initialisation code.
    * Correctly release the buffer index temps allocated for index calculations.
    * Make tests fails hard if a temp variable is not released at the end of a generated function.
    * Fix temp leak in switch statement code.
    * Make end-to-end tests fail on refnanny output.
    * Fix result temp leak in PyTypeTestNode.
    * Fix result temp leak in external type/function import code and enable the refnanny check for them.
    * Fix temp leak when try-return-finally is used in generators.
    * Make it explicit when an allocated temp is not meant to be reused.
    * Fix temp leak when assigning to the real/imag attributes of complex numbers.
    * Fix temp leak when assigning to a memoryview slice.
    * Clean up ""num_threads"" result temp in parallel section, not only in prange loop.
    * Fix temp leak in Pythran buffer setitem code.
    * Simplify NumPyMethodCallNode since it does not need the Python function anymore. Previously, it generated code that needlessly looked up the Python function without actually using it.
    * Fix temp leak when deleting C++ objects.
    * Add a test that actually reusing temps when deleting C++ objects works correctly.","['Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'tests/run/cpp_classes.pyx']"
c492b0d6b975610994028b854c45e92e93576612,2020-07-01 10:45:33,Stefan Behnel,"Disable testing against NumPy 1.19.0 in the 0.29.x branch, which breaks a C-API call.",['test-requirements.txt']
92e421416ecf64325fa4482e84c6659a79be9406,2020-07-01 10:24:31,Stefan Behnel,"Disable testing against NumPy 1.19+ in the 0.29.x branch, which removed C-API features.",['test-requirements.txt']
9c26b302791515f608d4b200f692dcec9f066229,2020-06-30 11:52:18,scoder,"Really only use PyUnicode_FromUnicode() when needed (GH-3697)

* Really only use PyUnicode_FromUnicode() for strings that contain lone surrogate, not for normal non-BMP strings and not for surrogate pairs on 16bit Unicode platforms.

See https://github.com/cython/cython/issues/3678

* Extend buildenv test to debug a MacOS problem.
* Add a test for surrogate pairs in Unicode strings.
* Limit PyUnicode_FromUnicode() usage to strings containing lone surrogates.
* Accept ambiguity of surrogate pairs in Unicode string literals when generated on 16bit Py2 systems.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/StringEncoding.py', 'Cython/Compiler/Tests/TestStringEncoding.py', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/StringTools.c', 'tests/compile/buildenv.pyx', 'tests/run/unicodeliterals.pyx']"
7e9a6b75c08ae0163c20a4ec41bd23fa9888b1b8,2020-06-30 11:48:51,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
536eb8dd744d06a8309f7e2a4a4428f9a2d5bd07,2020-06-30 11:38:19,Stefan Behnel,Update change log.,['CHANGES.rst']
9813c26336b2784b1a13c2ab34e9ea88f8821b6e,2020-06-25 12:04:40,Stefan Behnel,Fix FunctionState handling for module cleanup function.,['Cython/Compiler/ModuleNode.py']
4bcb9ca83c2de9e67fa2cd09de8261ce55beb3a5,2020-06-30 11:26:10,Stefan Behnel,Make end-to-end tests fail on refnanny output.,['runtests.py']
bf8bf7545590bdbb313b6e21a3a3b211d0f660da,2020-06-30 11:17:15,Stefan Behnel,Update changelog.,['CHANGES.rst']
ab1d7284f79794d075e79c87df671a87ae8b2b4b,2020-06-30 09:23:21,da-woods,"Implement generic optimized loop iterator with indexing and type inference for memoryviews (GH-3617)

* Adds bytearray iteration since that was not previously optimised (because it allows changing length during iteration).
* Always set `entry.init` for memoryviewslice.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/TypeInference.py', 'Cython/Compiler/UtilNodes.py', 'tests/memoryview/memoryview.pyx', 'tests/memoryview/memslice.pyx', 'tests/memoryview/numpy_memoryview.pyx', 'tests/run/bytearray_iter.py']"
8b228a71038eb56e32fb5e27efae91520a9ba05f,2020-06-29 19:29:06,da-woods,Document version-tagged pxd files (GH-3587),['docs/src/userguide/sharing_declarations.rst']
e60dc8ae3419c698ea97ee33e63d8dec945b3ab3,2020-06-29 14:57:00,Stefan Behnel,Merge branch '0.29.x',[]
ee8c3ac4cd5f998a1cff0698e2f48ba648fd84ec,2020-06-29 14:54:20,da-woods,"Fix argument name usage in finally blocks (GH-3713)

Fixes #3712 (hopefully) by reverting a small part of bbef4d7","['Cython/Compiler/FlowControl.py', 'tests/compile/tryfinally.pyx']"
dccf841d9ed0d1bdfb1b3b8bbb66e65d1532b57c,2020-06-29 14:54:20,da-woods,"Fix argument name usage in finally blocks (GH-3713)

Fixes #3712 (hopefully) by reverting a small part of bbef4d7","['Cython/Compiler/FlowControl.py', 'tests/compile/tryfinally.pyx']"
83ea5a4b9908ddd2832633b60e9471863a22a8b8,2020-06-28 15:03:07,Stefan Behnel,Test runner: disable keep-alive output in --debug mode to keep a potential pdb console clean.,['runtests.py']
92147baf11071352ffbfa475d0d21e091753e628,2020-06-28 09:31:08,scoder,"Validate and fix temp releasing (GH-3708)

* Fix a temp leak in the type init code.
* Fix temp leaks in fused types initialisation code.
* Correctly release the buffer index temps allocated for index calculations.
* Make tests fails hard if a temp variable is not released at the end of a generated function.
* Fix temp leak in switch statement code.
* Make end-to-end tests fail on refnanny output.
* Fix result temp leak in PyTypeTestNode.
* Fix result temp leak in external type/function import code and enable the refnanny check for them.
* Fix temp leak when try-return-finally is used in generators.
* Make it explicit when an allocated temp is not meant to be reused.
* Fix temp leak when assigning to the real/imag attributes of complex numbers.
* Fix temp leak when assigning to a memoryview slice.
* Clean up ""num_threads"" result temp in parallel section, not only in prange loop.
* Fix temp leak in Pythran buffer setitem code.
* Simplify NumPyMethodCallNode since it does not need the Python function anymore. Previously, it generated code that needlessly looked up the Python function without actually using it.
* Fix temp leak when deleting C++ objects.
* Add a test that actually reusing temps when deleting C++ objects works correctly.","['Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'runtests.py', 'tests/run/cpp_classes.pyx']"
d831d71a44c01deeac82fa501b24fee969a25e18,2020-06-26 05:24:21,Matthias Braun,"Keep reference to module dict around also in limited mode (GH-3707)

`PyModule_GetDict` is part of the limited API so we can keep a reference
to the module dict around regardless of limited mode being enabled or not.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Utility/Builtins.c']"
30f616cdaafe7626e0903ba20e2b3592aebc28b3,2020-06-25 18:52:11,Stefan Behnel,Validate that all temps were correctly released at the end of a function.,['Cython/Compiler/Code.py']
df0047fab9648dab22861243cbf09aaa23e4a6f5,2020-06-25 12:04:40,Stefan Behnel,Fix FunctionState handling for module cleanup function.,['Cython/Compiler/ModuleNode.py']
5243ecd7ab24728b9a5833018ebcbe0ce42da27b,2020-06-25 11:57:20,Stefan Behnel,Fix indentation counter for module init function.,['Cython/Utility/ModuleSetupCode.c']
a0e10cf604e62b6a08ba26c87e76d735a58988af,2020-06-23 16:15:44,Stefan Behnel,Enable travis for all branches.,['.travis.yml']
5492c4295ecb97d5d9468cc0fa4a870c32307e53,2020-06-22 21:43:41,Stefan Behnel,"Avoid a call to PyTuple_GET_ITEM() to get the item array pointer if CYTHON_ASSUME_SAFE_MACROS is disabled.
See https://github.com/cython/cython/issues/3701",['Cython/Utility/CythonFunction.c']
8f53112a95eb3328e58a3c47b5cd1119930358cd,2020-06-22 10:46:55,Stefan Behnel,Avoid unused variable in PyPy etc.,['Cython/Utility/ObjectHandling.c']
dc768221ac5c625a7f8631f84ac12435ef4a7081,2020-06-20 21:07:04,Stefan Behnel,"Give the ""__Pyx_PyObject_GetIterNext"" helper macro a more explanatory name.","['Cython/Compiler/ExprNodes.py', 'Cython/Utility/Coroutine.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c']"
cd3ce37dfbff134baa110437a0597cd5f8663d97,2020-06-20 20:21:21,Stefan Behnel,"Avoid using the ""tp_iternext"" slot when CYTHON_USE_TYPE_SLOTS is disabled.","['Cython/Compiler/ExprNodes.py', 'Cython/Utility/Coroutine.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c']"
c8f537ff7de54f90c5e4272ab88b93eed44b9958,2020-06-20 14:57:38,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Utility/Builtins.c', 'tests/run/exectest.pyx']"
e87fb0ab2b5bc830d738ab96e2ea159ae3d28372,2020-06-20 14:57:11,Stefan Behnel,"exec() did not allow recent Python syntax features in Py3.8+ due to https://bugs.python.org/issue35975
Closes https://github.com/cython/cython/issues/3695","['CHANGES.rst', 'Cython/Utility/Builtins.c', 'tests/run/exectest.pyx']"
0bf060f9cb9e4f5db0d44e4727c0d27ce775ca8c,2020-06-20 06:28:42,Matthias Braun,"Avoid using ""tp_name"" when CYTHON_COMPILING_IN_LIMITED_API (GH-3693)","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Utility/Buffer.c', 'Cython/Utility/Builtins.c', 'Cython/Utility/CConvert.pyx', 'Cython/Utility/Coroutine.c', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/FunctionArguments.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/TypeConversion.c']"
61a4f0991efaef5f9e92016f67a720ea213ee9ef,2020-06-19 14:15:37,Stefan Behnel,"Fix definition of ""__Pyx_CyFunction_USED"", which should only be #defined and not have a value.","['Cython/Utility/CythonFunction.c', 'Cython/Utility/ObjectHandling.c']"
51e5f4335235dadd9d126842e14e7988966ee357,2020-06-19 08:07:28,Stefan Behnel,Fix prefix of internal function name.,['Cython/Utility/Coroutine.c']
d6fa2b351666f1070200fc0e887ce383ad2fe346,2020-06-19 07:22:39,Stefan Behnel,Merge branch 'master' of git+ssh://github.com/cython/cython,"['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Utility/CpdefEnums.pyx', 'docs/src/userguide/wrapping_CPlusPlus.rst', 'tests/compile/cppenum.pyx', 'tests/errors/cpp_enum_redeclare.pyx', 'tests/errors/e_cenum_with_type.pyx', 'tests/run/cpdef_scoped_enums.pyx', 'tests/run/cpdef_scoped_enums_import.srctree', 'tests/run/cpp_scoped_enums.pyx']"
4d928725ab76216bf72a02931496f28627784ace,2020-06-19 07:22:00,Stefan Behnel,Merge branch '0.29.x',['Cython/Utility/ImportExport.c']
a7a3dafc6fbc018029cf779fa5bfd163f402a3e0,2020-06-19 07:21:42,Stefan Behnel,Add safety fix to avoid reading a character from the empty string.,['Cython/Utility/ImportExport.c']
64aafe5655e4390751756c6eb1b6af06a37d016d,2020-06-19 07:15:23,Stefan Behnel,Merge branch '0.29.x',"['Cython/Includes/cpython/unicode.pxd', 'Cython/Utility/ImportExport.c']"
56262e2971c76c920c61a5e583285834346e15fe,2020-06-19 07:14:58,Stefan Behnel,Fix usage of deprecated Py_UNICODE API.,['Cython/Utility/ImportExport.c']
9faf0fd7190346bebb6d058e7bf8af7ba86476a1,2020-06-19 06:34:39,Thomas A Caswell,"Add missing ""PyUnicode_GET_LENGTH"" to unicode.pxd (GH-3692)",['Cython/Includes/cpython/unicode.pxd']
1e72c2c57efbe0aac96b961a1ba1a8dee9ada4b7,2020-06-19 06:34:39,Thomas A Caswell,"Add missing ""PyUnicode_GET_LENGTH"" to unicode.pxd (GH-3692)",['Cython/Includes/cpython/unicode.pxd']
2c7c22f51405299a4e247f78edf52957d30cf71d,2020-06-18 12:54:51,Ashwin Srinath,"Add support for C++ scoped enums with ""enum class"" and ""enum struct"" (GH-3640)

Closes #1603.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Utility/CpdefEnums.pyx', 'docs/src/userguide/wrapping_CPlusPlus.rst', 'tests/compile/cppenum.pyx', 'tests/errors/cpp_enum_redeclare.pyx', 'tests/errors/e_cenum_with_type.pyx', 'tests/run/cpdef_scoped_enums.pyx', 'tests/run/cpdef_scoped_enums_import.srctree', 'tests/run/cpp_scoped_enums.pyx']"
e87a5559b67e99e660eb360a653cd13d9380c785,2020-06-17 21:11:26,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
bba78fb83ee71ba2a465d651bb251bbae91e4b8f,2020-06-17 21:03:54,Stefan Behnel,Update changelog.,['CHANGES.rst']
c04fbe2cf0943c96c2ba06ea61fa0df091f0afb8,2020-06-17 18:54:41,Stefan Behnel,Remove dead code.,['Cython/Compiler/Parsing.py']
36468c2378fd01f434c6190d6957c15cb20d01c7,2020-06-17 12:23:54,Stefan Behnel,Avoid a C compiler warning about a constant condition.,['Cython/Utility/ExtensionTypes.c']
bc581d0310c817208dbe97a50f656033a78aabdc,2020-06-17 12:22:29,Stefan Behnel,Limit the scope of a local variable in a helper function.,['Cython/Utility/ExtensionTypes.c']
df1a99842abc8469579564f73eb09e590be7a2ac,2020-06-17 20:23:17,Michał Górny,"Always bind Cython functions in Py3 (GH-3683)

Rebased 1bb26b964060392ecb08c3b6c8ca4626e5c1eec7 for cython 0.29.x,
and made conditional to Python 3.  This does not solve the original staticmethod problem
in Python 2 but it does resolve classmethod problems in Python 3.9.  Therefore, it unbreaks
other packages on Python 3.9, improves overall state for Python 3 and does not introduce
regressions in Python 2.",['Cython/Utility/CythonFunction.c']
7ac25eea68798f46f79606cfa40a82fabd51534e,2020-06-17 20:13:28,Robert Bradshaw,"Change the default of the ""c_api_binop_methods"" directive to False. (GH-3644)

This is a backwards incompatible change that enables Python semantics for special methods by default, while the directive allows users to opt out of it and go back to the previous C-ish Cython semantics.

See https://github.com/cython/cython/issues/2056","['Cython/Compiler/Options.py', 'tests/run/unicode_formatting.pyx']"
4a6a636380f0fda9e5861666031cda43d1a73edb,2020-06-17 11:19:11,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
ad6e273167a9fc81b6c3a6e4bd1b48b41b55f5dc,2020-06-17 11:16:48,Stefan Behnel,"Re-add ""c_api_binop_methods"" directive for backwards compatibility after reverting https://github.com/cython/cython/pull/3633 and force it to ""False"".
Closes #3688.","['CHANGES.rst', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Options.py']"
6933d867cdea2460c922c45702b7e60f3d133c2d,2020-06-17 11:11:01,Stefan Behnel,"Revert ""Python-style binary operation methods.""

This reverts commit e6a812402b0368cf930a55ed465a38820f606054.","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/TypeSlots.py', 'Cython/Utility/ExtensionTypes.c']"
8e3775b8e708c593d3803276288e34e859c31b26,2020-06-17 11:10:30,Stefan Behnel,"Revert ""Add support for pow operator.""

This reverts commit d849fb2379f4f892c8374b52385991c399c31a49.","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ExtensionTypes.c']"
a442b59d9091f03740fe455f68cd3fd40a4b7c23,2020-06-17 11:09:29,Stefan Behnel,"Revert ""Invoke binop super method via direct slot access.""

This reverts commit bcb938776c5a502a4a451c7a24c4b80d110a5c86.","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ExtensionTypes.c']"
5a8a513a87eb6325728050156ded4dc9d0016763,2020-06-17 11:09:10,Stefan Behnel,"Revert ""Limited API updates and cleanup for #2056. GH-3635)""

This reverts commit 02bb311d96359c7d2a359415612a9ffa24eda0a0.","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ExtensionTypes.c']"
9d275d8ad6a15c5ab99f68f50bd697dcc32d3018,2020-06-14 10:10:55,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
e46296d0e37e9255b39eae975fff6a7b3b4e65a8,2020-06-14 10:08:24,Stefan Behnel,Update changelog.,['CHANGES.rst']
26d45ca806d72efd66a5ed8260d26f17d8c3c717,2020-06-14 10:07:02,Stefan Behnel,"Revert ""Always bind Cython functions""

This reverts commit 6677326025dcd3acfd4e1e2beabdc678c53dec19.","['Cython/Utility/CythonFunction.c', 'tests/run/cyfunction.pyx']"
ff02233add2a7be55668f75c53a7f75f3b6dcb0c,2020-06-14 09:38:33,Stefan Behnel,Minor code simplification.,['Cython/Utility/ObjectHandling.c']
8833cbfabd9f8bb0281748b9fd446ed2074d4089,2020-06-14 09:37:02,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
504779b8391fe92e24a4e25ecdd128517cb29abd,2020-06-14 09:32:03,Stefan Behnel,"Avoid an ""unused variable"" warning for code that gets compiled out in Py3.",['Cython/Utility/ModuleSetupCode.c']
c77bf881dd992d48e173ea39571da63f7a2da7aa,2020-06-14 09:25:01,Stefan Behnel,Update changelog.,['CHANGES.rst']
6677326025dcd3acfd4e1e2beabdc678c53dec19,2019-08-28 08:56:28,Jeroen Demeyer,Always bind Cython functions,"['Cython/Utility/CythonFunction.c', 'tests/run/cyfunction.pyx']"
0c7ceb3dbab787b607fec62a02a5d8f12c8689bc,2020-06-11 18:55:39,Stefan Behnel,Minor code simplification.,['Cython/Compiler/ExprNodes.py']
89a68b86ba99291bfce1c70657b869934efec204,2020-06-11 05:59:05,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Utility/StringTools.c']"
caa52f6f018caf1da1bd964640f953cb30516b3d,2020-06-11 05:57:02,Stefan Behnel,Update changelog.,['CHANGES.rst']
323d9b94d22373a3ecfb240a9f3dccf13949c966,2020-06-11 05:53:45,Stefan Behnel,"Avoid calling PyUnicode_FromUnicode() in Py3.
Closes https://github.com/cython/cython/pull/3677",['Cython/Utility/StringTools.c']
1ebff687edf573bf9031df3a4828342b4f82cf55,2020-06-10 13:37:50,Stefan Behnel,Update changelog.,['CHANGES.rst']
a809749d829421b0969073895be53b19de49e52d,2020-06-10 13:12:03,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
9bc3fc65e906c7b1f5e4e19c92cb726b0ef361bb,2020-06-10 13:10:11,Stefan Behnel,Prepare release of 0.29.20.,"['CHANGES.rst', 'Cython/Shadow.py']"
5d42ec800b608173c18be81a21d614d7f1ae0165,2020-06-09 07:07:20,Stefan Behnel,"Allow selecting specific doctests in test modules with ""-k pattern"", instead of always running all tests.",['runtests.py']
7f26ba41ced0a95e2aef6ed608302fe743d836dd,2020-06-10 12:49:38,scoder,"Fix many indentation and whitespace issues throughout the code base (GH-3673)

… and enforce them with pycodestyle.","['Cython/Build/BuildExecutable.py', 'Cython/Build/Dependencies.py', 'Cython/Build/Tests/TestCythonizeArgsParser.py', 'Cython/Build/Tests/TestStripLiterals.py', 'Cython/CodeWriter.py', 'Cython/Compiler/Annotate.py', 'Cython/Compiler/AutoDocTransforms.py', 'Cython/Compiler/Buffer.py', 'Cython/Compiler/Builtin.py', 'Cython/Compiler/Code.py', 'Cython/Compiler/Errors.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FlowControl.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/Interpreter.py', 'Cython/Compiler/Main.py', 'Cython/Compiler/MemoryView.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Naming.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.py', 'Cython/Compiler/Pipeline.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Scanning.py', 'Cython/Compiler/StringEncoding.py', 'Cython/Compiler/Symtab.py', 'Cython/Compiler/Tests/TestBuffer.py', 'Cython/Compiler/Tests/TestCmdLine.py', 'Cython/Compiler/Tests/TestMemView.py', 'Cython/Compiler/Tests/TestParseTreeTransforms.py', 'Cython/Compiler/Tests/TestSignatureMatching.py', 'Cython/Compiler/Tests/Utils.py', 'Cython/Compiler/TreeFragment.py', 'Cython/Compiler/TypeInference.py', 'Cython/Compiler/TypeSlots.py', 'Cython/Compiler/UtilNodes.py', 'Cython/Compiler/UtilityCode.py', 'Cython/Debugger/DebugWriter.py', 'Cython/Debugger/libcython.py', 'Cython/Debugger/libpython.py', 'Cython/Distutils/old_build_ext.py', 'Cython/Shadow.py', 'Cython/Tempita/_tempita.py', 'Cython/TestUtils.py', 'Cython/Tests/TestCodeWriter.py', 'Cython/Tests/xmlrunner.py', 'Demos/benchmarks/bpnn3.py', 'Demos/benchmarks/chaos.py', 'Demos/benchmarks/meteor_contest.py', 'Demos/benchmarks/richards.py', 'Demos/callback/run_cheese.py', 'docs/examples/not_in_docs/great_circle/p1.py', 'docs/sphinxext/cython_highlighting.py', 'pyximport/pyxbuild.py', 'pyximport/pyximport.py', 'pyximport/test/test_pyximport.py', 'pyximport/test/test_reload.py', 'setup.cfg', 'tests/compile/builtinbuffer.py', 'tests/errors/e_int_literals_py2.py', 'tests/errors/e_tuple_args_T692.py', 'tests/run/methodmangling_T5.py', 'tests/run/methodmangling_pure.py', 'tests/run/methodmangling_unknown_names.py', 'tests/run/pep563_annotations.py', 'tests/run/pure_py.py', 'tests/run/reraise.py', 'tests/run/test_grammar.py']"
975a43a6a724cfd7591d747fd02d2c5d662e00c2,2020-06-10 12:00:36,Stefan Behnel,Clarify backwards incompatible special method change in changelog.,['CHANGES.rst']
a4fd9f4e44970cb82318bbf18cd6d4662b05763a,2020-06-10 11:08:24,Stefan Behnel,Fix f-string error positions in nogil test.,['tests/errors/nogil.pyx']
e177657788cd814a0eb5f87ce54884a37aa5910e,2020-06-10 08:12:58,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py', 'tests/errors/e_fstring.pyx']"
743365a53878c80f2f3280a792938970ca7e7473,2020-06-10 07:15:01,Stefan Behnel,"Correct the positions reported for errors in f-strings.
Closes https://github.com/cython/cython/issues/3674","['CHANGES.rst', 'Cython/Compiler/Parsing.pxd', 'Cython/Compiler/Parsing.py', 'tests/errors/e_fstring.pyx']"
e19fa590004305a9b3170c770c8244ef7f453e75,2020-06-09 07:07:20,Stefan Behnel,"Allow selecting specific doctests in test modules with ""-k pattern"", instead of always running all tests.",['runtests.py']
c74381f262a5627db99907b0db9c61e386babf30,2020-06-06 12:17:56,Stefan Behnel,Update changelog.,['CHANGES.rst']
50f00cf8ff9ae9f2c3dc066fb9ae7623138199a6,2020-06-06 12:14:27,Stefan Behnel,"Add tests that exception propagation works with the ""@returns()"" decorator.",['tests/run/pure_py.py']
95bad95263da6652b35ac5fc0a8ce8764195741f,2020-06-06 12:04:47,scoder,"Check for exceptions also when @returns() is used, not only for ""->"" return type annotations. (GH-3664)

When you use Python type annotations, it would be weird if you lost Python exception propagation semantics along the way, just by compiling the code. So the default behaviour is ""except? -1"" here for C integer types.

Arguably, this would also be a better default for the decorator case.

See https://github.com/cython/cython/issues/3625#issuecomment-631931675",['Cython/Compiler/ParseTreeTransforms.py']
9923a5cb0a33954ab6d16b05afcd4451deba8dda,2020-06-05 19:15:06,Stefan Behnel,Merge branch '0.29.x',['tests/run/cython3.pyx']
4728b8a0f77812d5d3fdb6489084de0774260011,2020-06-05 19:14:48,Stefan Behnel,Fix test in Py2.,['tests/run/cython3.pyx']
a7e2f3c0b3c7e85028d11796556578d4f78bc59b,2020-06-05 19:12:34,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/FlowControl.py', 'tests/run/cython3.pyx']"
bbef4d74841b7e979a45d9bbb59c5a1c733a55d7,2020-06-05 12:33:50,Stefan Behnel,"Return statements inside of nested try-except statements lead to an incorrect control flow graph that did not take the outer 'finally' clauses into account.
Closes https://github.com/cython/cython/issues/3666","['CHANGES.rst', 'Cython/Compiler/FlowControl.py', 'tests/run/cython3.pyx']"
5500fbb7b8584b284c0f5f301b24092ea750c831,2020-06-05 08:03:04,Stefan Behnel,Merge branch '0.29.x',[]
09979e15c1e619f278b78d7de1ed077d346842a6,2020-06-04 13:54:14,Stefan Behnel,"Simplify classmethod() code in Py3 where ""PyMethodDescr_Type"" is directly available.",['Cython/Utility/CythonFunction.c']
924177f7b2c95245b443ba73eb67515a2933c634,2020-06-04 13:54:14,Stefan Behnel,"Simplify classmethod() code in Py3 where ""PyMethodDescr_Type"" is directly available.",['Cython/Utility/CythonFunction.c']
7ee7a39cd848d3401f5c12549d56bc77bc37d419,2020-06-04 10:33:37,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Utility/CythonFunction.c', 'tests/run/fused_types.pyx']"
8359cf76506610b1e3c552f2012f6657c57fb489,2020-06-02 05:12:41,Stefan Behnel,Avoid distracting GIL error after failed function lookups.,['Cython/Compiler/ExprNodes.py']
43b30e3b5d460eac1a6007423852b3ec4ce423d0,2020-06-04 10:29:36,Stefan Behnel,Update changelog.,['CHANGES.rst']
76048959bdb5ca053a6760b28fb33d2ec524ea24,2020-06-02 19:05:07,da-woods,classmethod() should fall back to calling PyClassMethod_New() instead of deciding for itself that the type is invalid. (GH-3660),"['Cython/Utility/CythonFunction.c', 'tests/run/classmethod.pyx']"
7a646983d5bfb1662501e389213d839fdd4917bd,2020-06-01 18:32:29,da-woods,Use variable to aboid compiler warning,['tests/run/fused_types.pyx']
2a6aa2ef824e3cf2217eb9524996f64f8954cebd,2020-05-31 11:21:57,da-woods,"Fix a bug where fused_to_specific was applied too widely

Fixes https://github.com/cython/cython/issues/3642","['Cython/Compiler/Nodes.py', 'tests/run/fused_types.pyx']"
cefaa6522d60c4daecf01083641b874235f07bb3,2020-06-04 09:16:53,Stefan Behnel,Fix typo in comment.,['Cython/Compiler/ParseTreeTransforms.py']
c02c3f36488c46d4cbdacbf339931183f3b0fa4c,2020-06-04 08:35:22,Stefan Behnel,Fix test in Py2.,['tests/build/cythonize_options.srctree']
9bc7db3dfd68230ed0182f2da5eb883a5f158af2,2020-06-04 08:30:25,Stefan Behnel,"Fix test output for Py2 (where long ints end with ""L"").",['tests/run/annotation_typing.pyx']
389ba104d11354782a0a0a6273d8230116c8b092,2020-06-04 08:45:34,scoder,"Fix a bug where ""fused_to_specific"" was applied too widely (GH-3654)

Fixes https://github.com/cython/cython/issues/3642","['Cython/Compiler/Nodes.py', 'tests/run/fused_types.pyx']"
12c7237b60a651cd40c3f847facae201aa1e36ab,2020-06-04 07:25:52,Stefan Behnel,"Add ""show_all_warnings"" option to cythonize() to provide a simpler interface for (temporarily) setting ""Errors.LEVEL"".","['Cython/Build/Dependencies.py', 'tests/build/cythonize_options.srctree']"
34e357cb9debf6edfffd8cb13a5299b98d84a2a8,2020-06-04 06:49:58,Stefan Behnel,"Document that ""@exceptval(check=False)"" disables exception propagation completely for a function.
See #3625.",['docs/src/tutorial/pure.rst']
f7ef6eb4ee62d67e80888c808c4d574f5371eebf,2020-06-04 06:42:02,Stefan Behnel,"Add a test that the default exception return value ""-1"" for integer return types also works for unsigned types.",['tests/run/annotation_typing.pyx']
70a58ea21ea240ebf7e59ac4f3fad2b2b8bf376f,2020-06-04 05:55:43,Stefan Behnel,"Avoid ""possible loss of data"" warning in MSVC by adding redundant casts to code that gets discarded later.","['Cython/Utility/Overflow.c', 'Cython/Utility/TypeConversion.c']"
dc0649f7753d6b318b11805b599ea83be59ea3b4,2020-06-04 05:47:48,Stefan Behnel,Make overflow checking code C89 again.,['Cython/Utility/Overflow.c']
8c94bfdfc7040d37814dd8bfa9dbc38cd44beacb,2020-06-04 05:43:46,Stefan Behnel,"Exclude ""long long"" overflow checking code from compilation when HAVE_LONG_LONG is not set by CPython.",['Cython/Utility/Overflow.c']
359f89a8c5250d6dea8da025edbc6e39fbd11885,2020-06-03 15:41:54,Stefan Behnel,Remove duplicate code.,['Cython/Utility/ModuleSetupCode.c']
57b4bdeb88cc18f8e2f89fe9a7cf506d4ee0f8db,2020-06-03 07:49:03,Stefan Behnel,"Remove a stray "")"" that was accidentally introduced in GH-3591 and failed in MSVC with Py2.7.",['Cython/Utility/Overflow.c']
12ab8bc0056a0e77ccc0756955eb1621fd3b35db,2020-06-02 19:05:07,da-woods,classmethod() should fall back to calling PyClassMethod_New() instead of deciding for itself that the type is invalid. (GH-3660),"['Cython/Utility/CythonFunction.c', 'tests/run/classmethod.pyx']"
ef423d1e9c9e67a24db0e61b7b334983858fa581,2020-06-02 18:47:08,Stefan Behnel,"Use a constant sentinel value in Plex instead of making it depend on the (32/64 bit) architecture.
Closes #3659.","['Cython/Plex/Machines.pxd', 'Cython/Plex/Machines.py', 'Cython/Plex/Regexps.py', 'Cython/Plex/Transitions.py']"
0f1c1cbd490b6e49e3de0e250e6be0dee60c032f,2020-06-02 05:12:41,Stefan Behnel,Avoid distracting GIL error after failed function lookups.,['Cython/Compiler/ExprNodes.py']
f808448f2a4493965703261ab5ae2c4743c118e8,2020-06-01 18:32:29,da-woods,Use variable to aboid compiler warning,['tests/run/fused_types.pyx']
91eb518096d4f63d2db5a6e5140a70aecc0bc70f,2020-05-31 11:21:57,da-woods,"Fix a bug where fused_to_specific was applied too widely

Fixes https://github.com/cython/cython/issues/3642","['Cython/Compiler/Nodes.py', 'tests/run/fused_types.pyx']"
3ee066283d503d9ed494f90793ee89e6973904f8,2020-05-30 15:07:45,Stefan Behnel,"Re-enable pickling for some Cython modules, the control flow graph needs it for deep copying.
(Although that seems a bug – deep copying should probably just keep the control flow graph intact.)","['Cython/Compiler/FlowControl.py', 'Cython/Plex/DFA.pxd', 'Cython/Plex/Machines.py', 'Cython/Plex/Transitions.py', 'setup.py']"
ae2d007625b71a1ab736bda816c34ced873bf8e7,2020-05-30 07:58:53,Stefan Behnel,"Build Cython in parallel on ""make local"".",['Makefile']
586eed318c2c1f7b52c5c660ccc08a7a8ac4e551,2020-05-30 07:58:20,Stefan Behnel,Reduce code overhead in Cython's own compiled modules by disabling some unnecessary features.,['setup.py']
7ccc80805daa5c316b76eb2542e107c12cd75c61,2020-05-30 07:50:33,Stefan Behnel,Compile DFA.py and tie it into the other lexer classes.,"['Cython/Plex/DFA.pxd', 'Cython/Plex/DFA.py', 'Cython/Plex/Machines.pxd', 'Cython/Plex/Machines.py', 'Cython/Plex/Transitions.pxd', 'Cython/Plex/Transitions.py', 'setup.py']"
78aa444dee046cc9c1ac28123ea5b2bac82d9093,2020-05-29 19:34:17,Stefan Behnel,Avoid hasattr()+getattr pattern in favour of a single lookup.,"['Cython/Compiler/AutoDocTransforms.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/UtilNodes.py']"
55309f78f74c6395458d044f065668c6fe109766,2020-05-29 18:40:27,Stefan Behnel,Merge branch '0.29.x',['Cython/Compiler/Code.py']
22f62fe1cc2702db9ca8a59199faf0de65f4e666,2020-05-29 18:39:33,Stefan Behnel,"Fix detection of reusable utility code: whenever we do string and/or unbound method replacements at all, it's not reusable.",['Cython/Compiler/Code.py']
7b0df9ddb19707eed61af5202fa94e137de82211,2020-05-29 14:21:18,Stefan Behnel,Update unicode identifiers in Lexicon.py from Py3.9/10.,['Cython/Compiler/Lexicon.py']
7190799ac75ba78f7f2b21860a884a1d2891952e,2020-05-29 12:45:38,Stefan Behnel,A bit more cythonisation in Machines.py and Transitions.py.,"['Cython/Plex/Machines.pxd', 'Cython/Plex/Machines.py', 'Cython/Plex/Transitions.py']"
b2afb1166090f19fb926f184da29f972793e1c37,2020-05-29 12:13:45,Stefan Behnel,Reduce lexicon build time some more by compiling Transitions.py.,"['Cython/Plex/Transitions.py', 'setup.py']"
0cf1419bfb1a63828c0d40d7aac23a35253e85c9,2020-05-29 11:42:26,Stefan Behnel,Add makefile target to build Cython for profiling.,['Makefile']
fd8f08b1c33fba224297493365da4e793dbff84d,2020-05-29 11:24:45,da-woods,"Small changes to get `--cython-compile-all` working again (GH-3650)

Fixes https://github.com/cython/cython/issues/3647

At least one (in ModuleNode) is a real bug. The others are just
getting the code compatible with Cython again`","['Cython/Build/Dependencies.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/ParseTreeTransforms.py']"
447445a3f4c651c2881bc5b50b8d3a1b3fc6b7a6,2020-05-29 10:42:13,Stefan Behnel,"Speed up Machines.py by compiling it.
See https://github.com/cython/cython/issues/3646
Supersedes https://github.com/cython/cython/pull/3649","['Cython/Plex/Machines.pxd', 'Cython/Plex/Machines.py', 'setup.py']"
aa4273dbf1f517f208878d206e211434fe72131d,2020-05-29 10:29:48,Stefan Behnel,"Optimise ""unichr()"" into ""PyUnicode_FromOrdinal()"".",['Cython/Compiler/Builtin.py']
0532a0919be640210eeba1144717a6273707e112,2020-05-27 06:49:55,Stefan Behnel,Fix compilation in PyPy.,['Cython/Utility/ExtensionTypes.c']
de2a3c6071abc24d2196791806257c047dffd9db,2020-05-27 06:48:50,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
f366a004ead336fbec9366bda747879bd73815da,2020-05-27 06:48:38,Stefan Behnel,Update changelog.,['CHANGES.rst']
17368cb13f2f76e17234369f5723924531a208f5,2020-05-27 06:44:18,Stefan Behnel,"Revert ""Disable ""c_api_binop_methods"" directive in 0.29.x and provide it only as an enabled forward option.""

This reverts commit 4ac64ddf3ea734ee59c77c3144ed47ed50ce62ce.","['Cython/Compiler/ModuleNode.py', 'tests/run/binop_reverse_methods_GH2056.pyx']"
54bad41c045c3cc6f0e632ca356283dc147380db,2020-05-27 06:43:49,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/ModuleNode.py', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/binop_reverse_methods_GH2056.pyx']"
4ac64ddf3ea734ee59c77c3144ed47ed50ce62ce,2020-05-27 06:41:36,Stefan Behnel,"Disable ""c_api_binop_methods"" directive in 0.29.x and provide it only as an enabled forward option.","['Cython/Compiler/ModuleNode.py', 'tests/run/binop_reverse_methods_GH2056.pyx']"
f06e051ae00b671aafc0f1f177698d7a17bac9f1,2020-05-27 06:36:42,Stefan Behnel,Update changelog.,['CHANGES.rst']
d8e93b332fe7d15459433ea74cd29178c03186bd,2020-05-27 06:30:55,Victor Stinner,"Use Py_SET_SIZE() and Py_SET_REFCNT() on Python 3.9.0a4 and newer (GH-3639)

* Add __Pyx_SET_SIZE() function: use Py_SET_SIZE() on Python 3.9.0a4
and newer, or use Py_SIZE() as an l-value on older Python versions.

Py_SIZE() must not be used as an l-value anymore in Python 3.9:
Py_SET_SIZE() must be used instead:

* https://bugs.python.org/issue39573
* https://docs.python.org/dev/c-api/structures.html#c.Py_SET_SIZE

* Add __Pyx_SET_REFCNT() function: use Py_SET_REFCNT() on Python 3.9.0a4
and newer, or use Py_REFCNT() as an l-value on older Python versions.

Py_REFCNT() must not be used as an l-value anymore in Python 3.9:
Py_SET_REFCNT() must be used instead:

* https://bugs.python.org/issue39573
* https://docs.python.org/dev/c-api/structures.html#c.Py_SET_REFCNT

Use it in ModuleNode.generate_usr_dealloc_call():

* Replace ++Py_REFCNT(o) with __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1)
* Replace --Py_REFCNT(o) with __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1)","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/Builtins.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/Optimize.c', 'tests/run/verbatiminclude.pyx']"
d720eb47520b03e3c8f1320e0283b6a4b6f7937a,2020-05-27 06:22:08,Stefan Behnel,Update changelog.,['CHANGES.rst']
63ab284df20cfe99638f3f352080648c8a3b33e0,2020-05-27 06:30:55,Victor Stinner,"Use Py_SET_SIZE() and Py_SET_REFCNT() on Python 3.9.0a4 and newer (GH-3639)

* Add __Pyx_SET_SIZE() function: use Py_SET_SIZE() on Python 3.9.0a4
and newer, or use Py_SIZE() as an l-value on older Python versions.

Py_SIZE() must not be used as an l-value anymore in Python 3.9:
Py_SET_SIZE() must be used instead:

* https://bugs.python.org/issue39573
* https://docs.python.org/dev/c-api/structures.html#c.Py_SET_SIZE

* Add __Pyx_SET_REFCNT() function: use Py_SET_REFCNT() on Python 3.9.0a4
and newer, or use Py_REFCNT() as an l-value on older Python versions.

Py_REFCNT() must not be used as an l-value anymore in Python 3.9:
Py_SET_REFCNT() must be used instead:

* https://bugs.python.org/issue39573
* https://docs.python.org/dev/c-api/structures.html#c.Py_SET_REFCNT

Use it in ModuleNode.generate_usr_dealloc_call():

* Replace ++Py_REFCNT(o) with __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1)
* Replace --Py_REFCNT(o) with __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1)","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/Builtins.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/Optimize.c', 'tests/run/verbatiminclude.pyx']"
fb6c602dcd9db90b707377eef1e5368eba9be83f,2020-05-26 19:15:20,Stefan Behnel,Merge branch '0.29.x',"['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ExtensionTypes.c']"
02bb311d96359c7d2a359415612a9ffa24eda0a0,2020-05-26 18:46:11,Robert Bradshaw,Limited API updates and cleanup for #2056. GH-3635),"['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ExtensionTypes.c']"
6644799dc807269f8d39f12ed21160f8f7ce91a7,2020-05-26 17:05:47,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
62c79073d8ef1bfb13308362386f474fe7095c97,2020-05-26 17:05:28,Stefan Behnel,Update changelog.,['CHANGES.rst']
e4e1aa37eb4dcc5f5a8eaf4df23b347f513e63b8,2020-05-26 17:03:33,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/TypeSlots.py', 'Cython/Utility/ExtensionTypes.c', 'tests/run/binop_reverse_methods_GH2056.pyx']"
7fe95b13ce11e2eb62025aed5a4b8d248cf7daca,2020-05-26 16:34:29,Stefan Behnel,Update changelog.,['CHANGES.rst']
c612467ad6092a951073a44576be15b06ba7292a,2020-05-26 10:46:45,Celelibi,Emit an error when typeid() is used outside of C++ mode (GH-3637),"['Cython/Compiler/ExprNodes.py', 'tests/errors/e_cpp_only_features.pyx']"
d77f79c25b27dc11917a5e5ed13c60c0c3b48d7a,2020-05-26 16:27:22,serge-sans-paille,"Fix overflow handling for abs() calls on signed integer types (GH-3634)

Fixes #1911","['Cython/Compiler/ExprNodes.py', 'tests/run/builtin_abs.pyx']"
6cf22df0a44a8dcdbe53c9e9b25174861d121d25,2020-05-26 10:50:40,Stefan Behnel,Update changelog.,['CHANGES.rst']
f639e6d435cb240c5c21afe91a71915c4af23b7c,2020-05-26 16:27:22,serge-sans-paille,"Fix overflow handling for abs() calls on signed integer types (GH-3634)

Fixes #1911","['Cython/Compiler/ExprNodes.py', 'tests/run/builtin_abs.pyx']"
134b5e8f5d7a036d0c81b0ddc9c7aee1b73efdc1,2020-05-26 10:43:32,Stefan Behnel,"Fix handling of ""no-cpp"" test tag for error tests, where ""cpp"" is already removed from the list of test backends.",['runtests.py']
9324142e7e760e997f18346466cd93a92c2f9061,2020-05-26 10:52:49,Stefan Behnel,Update changelog.,['CHANGES.rst']
29faa81171bdcfc442d81650525e90476815ea1d,2020-05-25 18:30:17,Celelibi,"Avoid ""uninitialised"" warnings for sizeof and typeid (GH-3631)

Closes #3575","['Cython/Compiler/FlowControl.py', 'tests/errors/w_uninitialized.pyx', 'tests/errors/w_uninitialized_cpp.pyx']"
fba0673a877290ab3374346343c2ac554ba90ade,2020-05-26 10:46:45,Celelibi,Emit an error when typeid() is used outside of C++ mode (GH-3637),"['Cython/Compiler/ExprNodes.py', 'tests/errors/e_cpp_only_features.pyx']"
6a6d4bc22b10cc3be5737a278b98b132284047fd,2020-05-26 10:43:32,Stefan Behnel,"Fix handling of ""no-cpp"" test tag for error tests, where ""cpp"" is already removed from the list of test backends.",['runtests.py']
378fe89eea6d09c73e6643a994c8ceda9297fa0d,2020-05-26 08:29:46,Stefan Behnel,"Update ""test_grammar.py"" from CPython 3.9.",['tests/run/test_grammar.py']
e41c71a66dda0d6cee8c96daa5626164ddedf386,2020-05-25 18:30:17,Celelibi,"Avoid ""uninitialised"" warnings for sizeof and typeid (GH-3631)

Closes #3575","['Cython/Compiler/FlowControl.py', 'tests/errors/w_uninitialized.pyx', 'tests/errors/w_uninitialized_cpp.pyx']"
d2d299322d74e539fc95cd92de712ec41fb83fb8,2020-05-25 04:58:39,Stefan Behnel,"Remove dead code.

Closes https://github.com/cython/cython/issues/3632",['Cython/Utility/Embed.c']
7ddcdb1e390070f39691b3e250a00136d71b9902,2020-05-25 04:49:57,Stefan Behnel,Merge branch '0.29.x' of git+ssh://github.com/cython/cython into 0.29.x,"['CHANGES.rst', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/TypeSlots.py', 'Cython/Utility/ExtensionTypes.c', 'tests/run/binop_reverse_methods_GH2056.pyx']"
5ab461d1ab89e916d79d77ec2da2bd5ecae65b7f,2020-05-24 19:10:02,Stefan Behnel,Update changelog.,['CHANGES.rst']
f293ef4baf86e396983deb4418d4d56f711cfd0f,2020-05-24 18:45:04,scoder,"Change default of ""always_allow_keywords"" directive to True (GH-3605)

This avoids the METH_O function signature by default, since it does not match normal Python semantics.

* Fix unicode name handling of no-args functions when allowing keywords.

* Fix a crash when a keyword argument is passed to a function that does not allow them. Previously, the reported key name was not set and thus NULL.

* Extend ""always_allow_keywords"" test to cover some edge cases.
Some are commented out as they currently only work with the fastcall implementation.","['CHANGES.rst', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Options.py', 'Cython/Utility/FunctionArguments.c', 'Cython/Utility/TestCythonScope.pyx', 'docs/src/userguide/source_files_and_compilation.rst', 'tests/buffers/bufaccess.pyx', 'tests/compile/fused_redeclare_T3111.pyx', 'tests/memoryview/memoryview.pyx', 'tests/memoryview/memslice.pyx', 'tests/run/always_allow_keywords_T295.pyx', 'tests/run/cyfunction_METH_O_GH1728.pyx', 'tests/run/exceptionrefcount.pyx', 'tests/run/refcount_in_meth.pyx', 'tests/run/unicode_identifiers.pyx']"
445f055ca9748e0b716aaab900a5244e980aab67,2020-05-24 10:05:24,Stefan Behnel,Exclude a test that crashes in PyPy.,['tests/run/test_coroutines_pep492.pyx']
77092108bd5f32545f067f0fd8c4ee1739051b1e,2020-05-24 08:44:07,Stefan Behnel,"Use ""!"" instead of the less clear ""== 0"" when testing for type features.",['Cython/Compiler/ModuleNode.py']
bcb938776c5a502a4a451c7a24c4b80d110a5c86,2020-05-24 06:03:32,Robert Bradshaw,Invoke binop super method via direct slot access.,"['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ExtensionTypes.c']"
d849fb2379f4f892c8374b52385991c399c31a49,2020-05-24 05:42:48,Robert Bradshaw,Add support for pow operator.,"['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ExtensionTypes.c', 'tests/run/binop_reverse_methods_GH2056.pyx']"
e6a812402b0368cf930a55ed465a38820f606054,2020-05-24 05:37:59,Robert Bradshaw,Python-style binary operation methods.,"['CHANGES.rst', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Options.py', 'Cython/Compiler/TypeSlots.py', 'Cython/Utility/ExtensionTypes.c', 'tests/run/binop_reverse_methods_GH2056.pyx']"
f9240f2ec22614ff58385d7db2751429d0301cbf,2020-05-23 22:23:12,jbrockmendel,"Follow numpy.pxd change in numpy/#16266 (GH-3630)

See https://github.com/numpy/numpy/pull/16266",['Cython/Includes/numpy/__init__.pxd']
a8abbdad09bfba144a632e36285d66e55733b60c,2020-05-23 21:54:37,Stefan Behnel,Use a more efficient way to check for PyCFunction and CyFunction at the same time since checking for PyCFunction became more costly in Py3.9.,"['Cython/Utility/CythonFunction.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c']"
b7ba1cafe25a365adba1a0c3673ab9a5d4cfdd48,2020-05-23 21:52:30,Stefan Behnel,"Use an inlined version of PyType_HasFeature() instead of directly accessing ""tp_flags"" in the generated code.","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c']"
ec95d13d845dba0e2856dcf39197dd8cb99ca3a8,2020-05-23 18:46:13,Stefan Behnel,Extend test.,['tests/run/type_inference.pyx']
e7c7730c22921494bb50eabc0d0bdb0600e2ece9,2020-05-23 18:40:24,Stefan Behnel,Implement type inference for stared unpacking targets as list.,"['Cython/Compiler/FlowControl.py', 'tests/run/type_inference.pyx']"
dbc563c43906ce7007739ba1f0b314228255de09,2020-05-23 18:15:08,Stefan Behnel,Make error message more helpful.,['Cython/Compiler/FlowControl.py']
564a3340f7e794fa64672220e7d6fe152a24ee1c,2020-05-23 18:03:24,Stefan Behnel,Enable a working test.,['tests/run/type_inference.pyx']
c52593020eac0261e9655b4e9834cdcac39197e2,2020-05-23 09:16:13,Stefan Behnel,Add parentheses to clarify a C expression.,['Cython/Utility/CythonFunction.c']
917dbeef5422b3ef49874d60bbb70c294c5c45e2,2020-05-21 07:38:29,Stefan Behnel,"Document ""@exceptval"" default for return type annotations.
See https://github.com/cython/cython/issues/3625",['docs/src/tutorial/pure.rst']
cb4c5229385ce6eb3ca6f7eedb9209995a3985a9,2020-05-20 19:08:20,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
2c3a8c12b7c51f287a2a1475fb7d06eadde83baf,2020-05-20 19:05:15,Stefan Behnel,Prepare release of 0.29.19.,['Cython/Shadow.py']
88e4dcb6ba52593140b4cc1ee66fd937f27acf09,2020-05-20 19:04:38,Stefan Behnel,Update changelog.,['CHANGES.rst']
65d083d18f15c30f417ff4c3ce947e3d1aaae3dc,2020-05-20 18:57:03,smutch,"Use platform dependent test for ""unpacked_struct_with_arrays"" (GH-3621)",['tests/buffers/buffmt.pyx']
b8d9708fef68149c5ec38b8b22e778b68d7bbe48,2020-05-20 18:57:03,smutch,"Use platform dependent test for ""unpacked_struct_with_arrays"" (GH-3621)",['tests/buffers/buffmt.pyx']
4ca10b5fc1e5295dc00337b3243023344b5f291a,2020-05-14 08:11:37,Stefan Behnel,Fix a macro name that was accidentally broken in c9dec706354b06a8689223cfb92bdbbc140a1594.,['Cython/Utility/ModuleSetupCode.c']
89d2488f7bfd6010b2a5482daede5a26759e1e6d,2020-05-20 06:57:19,Stefan Behnel,"The names of Cython's internal types (functions, generator, coroutine, etc.) are now prefixed with the shared module name, instead of making them look like homeless builtins.
See https://bugs.python.org/issue20204
See https://github.com/python/cpython/commit/490055a1673b524da2ebe2312f072aba2a826036","['Cython/Compiler/ModuleNode.py', 'Cython/Utility/CommonStructures.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ModuleSetupCode.c', 'tests/run/common_utility_types.srctree', 'tests/run/fused_def.pyx', 'tests/run/test_coroutines_pep492.pyx']"
cbe43273439f030acac13bf204b4c1bae66b37bf,2020-05-19 19:41:08,jbrockmendel,Provide timedelta.total_seconds() implementation in datetime.pxd (GH-3616),"['Cython/Includes/cpython/datetime.pxd', 'tests/run/datetime_pxd.pyx']"
74d9df82a0f6b2ab7e61990b74c45f9791cf9a4a,2020-05-19 16:28:49,Stefan Behnel,"Make PyDateTime_DELTA_*() macros in datetime.pxd available in Py2.
See https://github.com/cython/cython/pull/3616","['Cython/Includes/cpython/datetime.pxd', 'tests/run/datetime_pxd.pyx']"
6d83a741e0d083f07be87aa52970fa2fadf001b6,2020-05-19 08:12:56,da-woods,"Fixed ""test_*_path_exists"" + CompilerDirectivesNode (GH-3619)

When test_assert_path_exists or test_fail_if_path_exists
was used on a function containing a CompilerDirectivesNode
it was inherited by that CompilerDirectivesNode. Therefore
you got misleading test failures if the path was in the
function but not within that CompilerDirectivesNode.","['Cython/Compiler/ParseTreeTransforms.py', 'tests/compile/tree_assertions.pyx']"
2ffcb6a0a9b5145ad985abd23527204477f21788,2020-05-18 21:27:11,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
9c78524a726a898b6abaa33c2f6054c760f1d7b0,2020-05-18 21:26:52,Stefan Behnel,Update changelog.,['CHANGES.rst']
133a957eeb82eaed5f0edcb231a263a933e6d0f5,2020-05-18 21:18:04,Stefan Behnel,Update changelog.,['CHANGES.rst']
a68e145e3b51a6e211326633ebb45880b5196c7e,2020-05-18 21:12:37,Stefan Behnel,Prepare release of 3.0a5.,"['CHANGES.rst', 'Cython/Shadow.py']"
84fdbbde30450d2444c116b1ba749d022bc8d7a7,2020-05-18 20:40:15,Stefan Behnel,Merge branch 'master' of git+ssh://github.com/cython/cython,"['Cython/Utility/Overflow.c', 'tests/run/overflow_check.pxi']"
11d636dcf4514336197deb739594246aae48880e,2020-05-18 20:15:18,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Shadow.py', 'Cython/Utility/ExtensionTypes.c']"
92a0b75b5244589d1354ea899029dda1f73fe32f,2020-05-18 18:50:34,Sam Sneddon,"Fix several issues in overflow checks (GH-3591)

* Fix #3588: Make existing overflow code safe

Signed overflow is undefined behaviour in C and compilers can and do optimized on that basis.

* Speed up our overflow impls

Note this is primarily based on performance of compilers which do not
support __builtin_add_overflow (i.e., not Clang >= 3.4 & gcc >= 5),
mostly looking at several gcc 4 releases (used by older, supported,
RHEL releases and Debian 8 ""Jessie"") and MSVC.

* Use __builtin_XXX_overflow if available

This is much quicker in general, as these all just then read the overflow flag from the status register.","['Cython/Utility/Overflow.c', 'tests/run/overflow_check.pxi']"
a57de922bbcfaa44ca4e7580e69ec9f5b6b62ad4,2020-05-18 18:33:07,Stefan Behnel,Prepare release of 0.29.18.,"['CHANGES.rst', 'Cython/Shadow.py']"
c0031d97576c48fa0a390c6f645faf5ab563f1ed,2020-05-18 18:31:43,Stefan Behnel,Add ticket reference explaining why a work-around is needed.,['Cython/Utility/ExtensionTypes.c']
78b799d05cf4e265e1bac3d2b08474002f3d7606,2020-05-18 08:03:21,Stefan Behnel,Clean up changelog.,['CHANGES.rst']
2833c9ff404a3292617dbe48b9a5187fc040e7c4,2020-05-18 07:57:56,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
4bf6a29b8f162b56d2c75e2f47e92932eb6a6737,2020-05-18 07:57:28,Stefan Behnel,Update changelog.,['CHANGES.rst']
f7ca5efbc97d22466b8e85eb3f5aae5d96cc8837,2020-05-18 07:23:28,Stefan Behnel,"Disable GC during hacked calls to PyType_Ready() that simulate a heap type for an actual non-heap type, because it can lead to crashes if GC visits such a hacked type.
Closes https://github.com/cython/cython/issues/3603",['Cython/Utility/ExtensionTypes.c']
b2868f923a7276c3f86d2733db96424e8fb1d101,2020-05-18 07:23:28,Stefan Behnel,"Disable GC during hacked calls to PyType_Ready() that simulate a heap type for an actual non-heap type, because it can lead to crashes if GC visits such a hacked type.
Closes https://github.com/cython/cython/issues/3603",['Cython/Utility/ExtensionTypes.c']
e7ebbed12d4c9e49263f86d91e1b263b6f754e5f,2020-05-17 20:31:08,Stefan Behnel,Fix unrelated test after changing memoryview code.,['tests/compile/fused_redeclare_T3111.pyx']
3bf925e15e651787142163e8439d011a7dfbaf9b,2020-05-17 20:17:24,Stefan Behnel,Minor code cleanup.,['Cython/Compiler/Optimize.py']
0a25de5b1023fd551f5e600583de8d8c87b7796d,2020-05-17 18:40:23,Stefan Behnel,Reduce the code overhead of the memoryview implementation a little by disabling CyFunctions for its methods.,['Cython/Utility/MemoryView.pyx']
26853612d1b4fc921db993c34ecf22c4a45b8e26,2020-05-17 18:02:55,Stefan Behnel,"Reduce the code overhead of exception raising in generated Cython code and the memoryview code by avoiding explicit calls to create the exception and prepared constant argument tuples. ""raise Exc, message"" can do this implicitly.","['Cython/Compiler/ParseTreeTransforms.py', 'Cython/Utility/MemoryView.pyx']"
40e4f13193ef04dfda013f248cec241b38e45342,2020-05-17 17:32:43,Stefan Behnel,Move less common ref-counting cases for memory views out of the fast-path and only look up the atomic acquisition count value once per INC/DEC operation.,['Cython/Utility/MemoryView_C.c']
6313c86737f8f8a795e356ae6da0bc59fb68b159,2020-05-17 17:31:12,da-woods,"Ensure utility code keeps the directives that it was compiled with (GH-3615)

When it's merged into the main module, wrap it in a CompilerDirectivesNode.","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Pipeline.py', 'tests/memoryview/memoryview_no_binding_T3613.pyx']"
83ac1a27735d562baf58f3577bc933ee7cbb8c29,2020-05-16 18:16:11,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Includes/cpython/datetime.pxd']"
b177f2296686833a3903e0b8a7dcf4afbed2e56d,2020-05-16 18:14:36,Stefan Behnel,"Uncomment timedelta macros in datetime.pxd, because why not have them?","['CHANGES.rst', 'Cython/Includes/cpython/datetime.pxd']"
d6e6de9237bde72e7878f7b1fe0e58fdccd36dd2,2020-05-16 08:56:49,Stefan Behnel,Add yet another branch hint for an exception case.,['Cython/Utility/MemoryView_C.c']
cda11a72d7c30361581a507ffeb8c77d57cd2a5e,2020-05-16 08:30:37,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
98baa2fa68226add449341c96c3e997b4f16d1f5,2020-05-16 08:29:38,Stefan Behnel,Update changelog.,['CHANGES.rst']
a50be2a1e0d6b243f8d83477658643e17ecce61f,2020-05-15 19:43:18,Stefan Behnel,"Also mark the case of an uninitialised memory view slice as ""unlikely()"" when refcounting it since it's most probably not a performance critical case.",['Cython/Utility/MemoryView_C.c']
fc09a6dcad754d15289041ba2d4a4e4af7191556,2020-05-15 19:16:53,Stefan Behnel,"Mark the last deletion of a memory view slice as ""unlikely()"" to ask the C compiler to optimise for the repeated re-use case (usually in loops).",['Cython/Utility/MemoryView_C.c']
8bcd2387786f43a1fb5ff00e8e5fff6b36864a91,2020-05-15 19:16:14,Stefan Behnel,"Sprinkle ""unlikely()"" branch hints in all places where the memory view C code raises exceptions.",['Cython/Utility/MemoryView_C.c']
cc400539bd85e57fb538e89d1fb223fa88157539,2020-05-15 19:00:16,Stefan Behnel,"Mark the first creation of a memory view slice as ""unlikely()"" to ask the C compiler to optimise for the repeated re-use case (usually in loops).",['Cython/Utility/MemoryView_C.c']
e24d29043d440ec9c6a4d852b406a005dcd78591,2020-05-15 18:58:35,Stefan Behnel,"Sprinkle ""unlikely()"" branch hints in all places where the memory view C code raises exceptions.",['Cython/Utility/MemoryView_C.c']
fb17dc88f0af1fcee3fcec7685e451c85f372793,2020-05-16 06:33:14,Stefan Behnel,Merge branch '0.29.x',[]
441187e97c573fbbeb86c8319decc4a03acdbe61,2020-05-16 06:31:49,Stefan Behnel,"Fix up the NumPy warnings hack by using the actual ""import_array()"" function declaration instead of a wrong one.",['tests/run/numpy_common.pxi']
e426bbd44cb2b0ac5a1dc326178edf3695f73536,2020-05-16 06:12:51,jbrockmendel,Fix PyArray_SearchSorted signature (GH-3606),"['Cython/Includes/numpy/__init__.pxd', 'tests/run/numpy_test.pyx']"
06f6bf39fe2b9cf0ca6fed738f92bbbe12737b0c,2020-05-16 06:12:51,jbrockmendel,Fix PyArray_SearchSorted signature (GH-3606),"['Cython/Includes/numpy/__init__.pxd', 'tests/run/numpy_test.pyx']"
662cc6b2e3ad18f7b3c02b5f28980d0721aecd62,2020-05-15 19:43:18,Stefan Behnel,"Also mark the case of an uninitialised memory view slice as ""unlikely()"" when refcounting it since it's most probably not a performance critical case.",['Cython/Utility/MemoryView_C.c']
c9c467f226b1ea83aa323d18b0cbc41fb4751bb4,2020-05-15 19:27:43,Stefan Behnel,Merge branch '0.29.x',['tests/run/async_def.pyx']
5f9800abe1a3d9becbdda5a112ec9ab2d82046f6,2020-05-15 19:27:17,Stefan Behnel,Fix test output in Py2.,['tests/run/async_def.pyx']
c77aab3bff4bc9f30759e1673f2db08cfa24c65a,2020-05-15 19:16:53,Stefan Behnel,"Mark the last deletion of a memory view slice as ""unlikely()"" to ask the C compiler to optimise for the repeated re-use case (usually in loops).",['Cython/Utility/MemoryView_C.c']
963a4cd7ac481b575fec6df8d725d667397c19c3,2020-05-15 19:16:14,Stefan Behnel,"Sprinkle ""unlikely()"" branch hints in all places where the memory view C code raises exceptions.",['Cython/Utility/MemoryView_C.c']
a70b1860232047412fca41ed70f3336de822563d,2020-05-15 19:00:16,Stefan Behnel,"Mark the first creation of a memory view slice as ""unlikely()"" to ask the C compiler to optimise for the repeated re-use case (usually in loops).",['Cython/Utility/MemoryView_C.c']
8762075061a5f1aa7a41b7349ce99008337e7a84,2020-05-15 18:58:35,Stefan Behnel,"Sprinkle ""unlikely()"" branch hints in all places where the memory view C code raises exceptions.",['Cython/Utility/MemoryView_C.c']
df397682a7e266fa62321582daf5624f6ab06821,2020-05-15 17:14:06,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
6e2edcddeea84580fdc8823d2997d5747207a2a9,2020-05-15 17:13:06,Stefan Behnel,Update changelog.,['CHANGES.rst']
27ffe2c859c8952f5959c4b0fcc83597a37c03ad,2020-05-15 17:00:17,da-woods,"Run ParallelRangeTransform also recursively on function arguments (GH-3608)
Closes https://github.com/cython/cython/issues/3594","['Cython/Compiler/ParseTreeTransforms.py', 'tests/run/parallel.pyx']"
ebbc5f9030ca55e29615d0ddafb5193cbc81b0b4,2020-05-15 17:00:17,da-woods,Run ParallelRangeTransform also recursively on function arguments (GH-3608),"['Cython/Compiler/ParseTreeTransforms.py', 'tests/run/parallel.pyx']"
fb09adfb218bfc20b5255c883a5c0ce09a1db4b3,2020-05-15 13:23:49,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/Parsing.py', 'tests/run/async_def.pyx']"
3b1b45de7bc432e080e02ef39a63f8c239d65879,2020-05-15 13:22:55,Stefan Behnel,"Allow decorators on nested async-def functions.
Closes https://github.com/cython/cython/issues/1462","['CHANGES.rst', 'Cython/Compiler/Parsing.py', 'tests/run/async_def.pyx']"
553f313069ec7b4d018eecd7620747ecd87ef599,2020-05-15 09:07:57,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
7a974e4e8b2d5e312a8d3c9c4bf1ff8da7f59c8a,2020-05-15 09:07:30,Stefan Behnel,Update changelog.,['CHANGES.rst']
67a9e5725c2cbea63f20c1db5a1f689b2991ad81,2020-05-15 09:02:41,Stefan Behnel,Move the work directory of the examples tests into an 'examples/' subdirectory to get it out of the way of the other test types.,['runtests.py']
17af8d69966e3143038059cc00b35c06ad71a97d,2020-05-15 08:54:22,Stefan Behnel,Allow '# cython: …' module level directives in Cython utility code.,['Cython/Compiler/Code.py']
ab9086bffbfa88462573c14f2337ba2a7ddd38e0,2020-05-15 07:40:18,Stefan Behnel,Avoid unnecessary generation of unused error handling code in memory view slicing code.,"['Cython/Compiler/MemoryView.py', 'Cython/Utility/MemoryView_C.c']"
08928dd060852c5638a7da1eea75acb74d01af02,2020-05-15 09:02:41,Stefan Behnel,Move the work directory of the examples tests into an 'examples/' subdirectory to get it out of the way of the other test types.,['runtests.py']
6b725ba81917a09e3ba0f2eeebdb258f73d22eb5,2020-05-15 08:54:22,Stefan Behnel,Allow '# cython: …' module level directives in Cython utility code.,['Cython/Compiler/Code.py']
1fb8fed168f5a8695196ef57a399199ee20c2df8,2020-05-15 08:52:55,Stefan Behnel,Add comment that 'binding' directive default was changed from False to True in 3.0.,['Cython/Compiler/Options.py']
794d21d929a60c0ff9f1aa92fc79cc79c1d4753d,2020-05-15 07:40:18,Stefan Behnel,Avoid unnecessary generation of unused error handling code in memory view slicing code.,"['Cython/Compiler/MemoryView.py', 'Cython/Utility/MemoryView_C.c']"
399a72d75c7413f67cf9b62a5a24e4084d4e4ba7,2020-05-14 08:11:37,Stefan Behnel,Fix a macro name that was accidentally broken in c9dec706354b06a8689223cfb92bdbbc140a1594.,['Cython/Utility/ModuleSetupCode.c']
773e02115325f689f8b7238594ab7f3ba74bdfb3,2020-05-13 20:06:26,Stefan Behnel,Update changelog.,['CHANGES.rst']
460c0df1d57b914659643d1a975e0e9e133a0689,2020-05-13 20:05:37,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Utility/ModuleSetupCode.c']"
c9dec706354b06a8689223cfb92bdbbc140a1594,2020-05-13 20:05:05,Stefan Behnel,"Make sure the module init function is declared as 'extern ""C""' in C++ also when the CYTHON_NO_PYINIT_EXPORT option is used.
Closes #3414.","['CHANGES.rst', 'Cython/Utility/ModuleSetupCode.c']"
f0b6dc27632e6777a1b90e66c98a8aa86d608dea,2020-05-12 20:10:07,Stefan Behnel,Update changelog.,['CHANGES.rst']
ef6332d10a6c09ab71872708b2bd41ab879764e2,2020-05-12 20:08:31,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
a21937ab4fe6e158c83f71269cab360adafb2e70,2020-05-12 20:07:35,Stefan Behnel,Update changelog.,['CHANGES.rst']
9ec103c34176842ff27b8d390b7f4ae5338087e3,2020-05-12 20:04:00,MegaIng,"Remove illegal casting of structs when using ctuple (GH-3599)

Closes #3038.","['Cython/Compiler/PyrexTypes.py', 'tests/windows_bugs.txt']"
cf90e1ef87d5ab8b5a4b211d46015ea176f38a0d,2020-05-12 20:04:00,MegaIng,"Remove illegal casting of structs when using ctuple (GH-3599)

Closes #3038.","['Cython/Compiler/PyrexTypes.py', 'tests/windows_bugs.txt']"
ed042a13497054f1aeb10e2635644c7a32acc02b,2020-05-12 09:35:24,Stefan Behnel,"Re-add previously removed NumPy C-API functions, following the same change in NumPy.
https://github.com/numpy/numpy/pull/16170/commits/e00d94b70880b1321eff727ac7eb897be7422340",['Cython/Includes/numpy/__init__.pxd']
4a85b7e0da32932bac84c779890ed0874e538e7b,2020-05-11 19:27:05,Stefan Behnel,Fix __Pyx_RefNannyFinishContextNogil() macro in threadless Pythons.,['Cython/Utility/ModuleSetupCode.c']
fd71aabe0319ff3ecfa3aee291d13b98d3c6a76e,2020-05-11 19:22:43,Stefan Behnel,Avoid MSVC warning in refnanny about an integer assignment that reduces the value range (although it's probably safe to assume that C code line numbers > 2^30 will remain rare for another while).,"['Cython/Runtime/refnanny.pyx', 'Cython/Utility/ModuleSetupCode.c']"
25d042da09bfee6e67b8b042c867623d8cf9a69d,2020-05-11 09:58:49,Stefan Behnel,Avoid an additional utility code section for 2-exception matching by relying on existing special-cased macros.,"['Cython/Compiler/Nodes.py', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ModuleSetupCode.c']"
9e04e1ee5b1ab67391bf461e9d1f0ef8d6049902,2020-05-11 09:37:20,da-woods,"Generate a compiler warning on calls to PyInit_ModuleName() (GH-3582)

For Py3.5+, where inittab should really be used instead. For GCC, Clang, MSVC and C++14",['Cython/Compiler/ModuleNode.py']
d5eca087b9fd7a55b9315a49230df9ecc3fb59fb,2020-05-11 06:57:06,Stefan Behnel,"Use specialised code for matching two exceptions at once, which is not uncommon.","['Cython/Compiler/Nodes.py', 'Cython/Utility/Exceptions.c']"
db87e1afddd8da75b328f8bff3019b5b4f254a35,2020-05-11 04:49:05,Stefan Behnel,Add a dedicated subtype check function for testing against two possible base classes in Py3 (currently used for generator exception checks).,['Cython/Utility/ModuleSetupCode.c']
0045f57a95563a409a8ccf0d62815229d80b7e7f,2020-05-10 20:39:04,Stefan Behnel,Simplify and clean up the embedded main import code to make it work how it's officially supposed to work: use the inittab.,['Cython/Utility/Embed.c']
ee54de7957400fcf3b0040e57744dad5e52cb262,2020-05-10 09:09:46,Stefan Behnel,See if a slightly longer runtime keeps the async test from failing arbitrarily.,['tests/run/test_asyncgen.py']
48b3fcfc9e292e416033af717c39d0fd527533a4,2020-05-10 06:48:05,Stefan Behnel,Fix typo in changelog.,['CHANGES.rst']
991e0342b8067b5db5801180805c6fdd34158bae,2020-05-10 06:43:25,Stefan Behnel,"Avoid generating an ""abort()"" check for known non-0 steps in prange(). Instead, make it a compile time error if we know it's zero.",['Cython/Compiler/Nodes.py']
5b6bbdab8387666bce5e11975e1e0baa0081a534,2020-05-09 19:24:36,Stefan Behnel,Update changelog.,['CHANGES.rst']
77b74cde7120170e325d237dad1835bcdce75e35,2020-05-09 19:19:10,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/Optimize.py', 'tests/run/fstring.pyx']"
dcf6b8274a65d932e7eda49aa5d1255f06b8fd23,2020-05-09 19:04:36,Stefan Behnel,"Fix optimisation of aligned '%' formats ('%05s', '%-5s') into the correct f-string alignment format.
Closes https://github.com/cython/cython/issues/3476","['Cython/Compiler/Optimize.py', 'tests/run/fstring.pyx']"
75f544fc9c85cc1f86cf5ca380b7c675363931d5,2020-05-09 19:01:31,Stefan Behnel,Update changelog.,['CHANGES.rst']
f54b03379f99bfe8ff1719816363874cac505022,2020-05-09 18:15:13,scoder,"Fix optimised string formatting when '%d' argument is a float object. (GH-3589)

Floats do not support '{x:d}' formatting and need conversion to 'int' first.
Closes https://github.com/cython/cython/issues/3092","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'tests/run/fstring.pyx']"
2f86bc45f6b0c2233766cc0ee5d0f71ea74e838f,2020-05-09 18:15:13,scoder,"Fix optimised string formatting when '%d' argument is a float object. (GH-3589)

Floats do not support '{x:d}' formatting and need conversion to 'int' first.
Closes https://github.com/cython/cython/issues/3092","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'tests/run/fstring.pyx']"
34eafb78a485618de33954ef3e5d86a45218e7f8,2020-05-09 18:05:09,scoder,"Reimplement __Pyx_PyDict_GetItemStrWithError() for Py2 to fix a memory leak (GH-3593)

Reimplement __Pyx_PyDict_GetItemStrWithError() as a hacky version in Py2 to get the semantics right of returning a borrowed reference with non-KeyError exceptions left in place.

Closes https://github.com/cython/cython/issues/3578","['CHANGES.rst', 'Cython/Utility/ModuleSetupCode.c']"
ac694af11d5ae1b2cb13372c33bd535416818f3a,2020-05-09 07:59:47,Stefan Behnel,Update changelog.,['CHANGES.rst']
ff5b9c36475015582be710d103cbbc43308bb621,2020-05-09 07:15:44,Stefan Behnel,"Add comment to explain why ""better"" GIL handling is not needed in special methods (because it's held anyway).",['Cython/Compiler/Nodes.py']
ec703e63204486b689ff2a4ff232eaa924ecd28d,2020-05-09 07:12:02,Stefan Behnel,Fix GIL handling on function exit for re-assigned Python arguments.,"['Cython/Compiler/Nodes.py', 'tests/run/with_gil.pyx']"
c1118bf82ee62a76f147ac65f404265a3937e33a,2020-05-09 07:00:37,Stefan Behnel,Fix another GIL handling case on error function exit.,['Cython/Compiler/Nodes.py']
2d8f7f35c28c5c398143c74a9b2f34ee65e61554,2020-05-09 06:49:50,Stefan Behnel,"Guard the local variable cleanup in nogil functions with 'with gil' sections with the GIL.
Closes https://github.com/cython/cython/issues/3590","['Cython/Compiler/Nodes.py', 'tests/run/with_gil.pyx']"
c47bcecaa04fc4b90755a6f774b6ced6eb7ea1ee,2020-05-08 13:43:52,Stefan Behnel,Fix refleak in a rare error case.,['Cython/Utility/CythonFunction.c']
3bba77a2bf9ed7da4c118fd7887658c597e14cd2,2020-05-08 12:54:28,Stefan Behnel,Enhance refnanny a bit to raise less errors on shutdown and report better positions in those cases.,['Cython/Runtime/refnanny.pyx']
f4d5dec3fcf5452d29c6d8fb58e0b7d834a7e531,2020-05-08 07:34:00,Dean Scarff,"Add test for libc.math's modf

Test modf, since it's in C89 and has a non-trivial signature.",['tests/run/libc_math.pyx']
b45c8e9eaf508fdef66e53b37f36b195b7bad8b7,2020-05-08 06:57:34,Dean Scarff,"Update libc.math tests

cimport some C99 float and long double functions, and test legacy kwargs
for double functions.",['tests/run/libc_math.pyx']
4f9e2e37eb06de526938c428f35a355cdcc466f3,2020-05-08 04:36:39,Dean Scarff,"Add C99 math.h functions to libc.math

Adds many long double variants (e.g. expl) that were previously omitted.
No functions have been removed.

I've omitted the identifier for trivial parameters in new functions.
However, I've retained them for existing functions for compatibility
with legacy kwargs.

Classes of functions/macros that are still missing:
 - error-handling ones, like math_errhandling and MATH_ERRNO
 - Bessel functions like j0, y0

Fixes cython/cython#3570",['Cython/Includes/libc/math.pxd']
3ce725e7f92746eeda15455a05429d158ae3e55e,2020-05-08 07:01:20,Dean Scarff,"Sort functions in libc.math

Sorting alphabetically by function name makes it easier to audit
changes.

Also changes ""type *"" -> ""type*""",['Cython/Includes/libc/math.pxd']
6d3098246e93baef7d825ca7cf02b49bc6cb53b7,2020-05-07 12:45:30,Stefan Behnel,"Test suite no longer fails in Py3.9, so enable it as a fully supported target in travis.",['.travis.yml']
5f2a908fa7ce3257c29d9aea13e588cbc644f7dd,2020-05-07 12:39:33,Stefan Behnel,"Try to fix MSVC warning ""C4551: function call missing argument list"".
Closes #3579.",['Cython/Utility/ObjectHandling.c']
c5b25ce1c232863de97a43e15ea374b2b9eb2589,2020-05-07 12:14:36,Stefan Behnel,"Restore the previous PyThreadState_Get() calls in the refnanny, but with a comment explaining the purpose of the ""useless"" calls.",['Cython/Runtime/refnanny.pyx']
9d2ae85b2b5ae36deb68132152a56437e5cf9615,2020-05-07 11:25:45,Stefan Behnel,Add more visible warnings to C-API functions that steal references of their arguments.,"['Cython/Includes/cpython/list.pxd', 'Cython/Includes/cpython/module.pxd', 'Cython/Includes/cpython/tuple.pxd']"
84b6c4a3741e87e676702fd3327e15eb4ae0cf69,2020-05-07 09:50:16,Stefan Behnel,"Turn all legacy struct fields in the NumPy ndarray type into properties and document them (copied from NumPy docs).
Adapt the 'nogil' declarations according to the ones in NumPy and add some missing functions.
See https://github.com/numpy/numpy/pull/16170",['Cython/Includes/numpy/__init__.pxd']
ee19a3b3b5789f173ac1a8543dff5b087b3fc666,2020-05-07 07:32:07,Stefan Behnel,Update changelog.,['CHANGES.rst']
42f725f3177e6a0f915a2e0bce7090568b51b289,2020-05-07 07:18:36,scoder,"Support for versioned pxd files (GH-3577)

* Support for versioned pxd files like ""lib.cython-30.pxd"" for a Cython 3.0+ version.
See https://github.com/cython/cython/issues/3573

* Fix test in Py2 by avoiding namespace packages in favour of a normal package.","['Cython/Compiler/Main.py', 'Cython/Utils.py', 'tests/run/versioned_pxds.srctree']"
67a353cbba10756e5cd50ec16b28f390da19df73,2020-05-07 06:57:37,Stefan Behnel,"Remove ""PYTHONHOME"" setting from embed-test since it seems to break the I/O encoding setup in (at least) Py3.8+ venvs.",['Demos/embed/Makefile']
642f2059eb16e3892281b2764e84120749ef502c,2020-05-07 06:34:04,Stefan Behnel,Remove dead code.,['runtests.py']
fccaedc334cb5b411b41da2c81ae979c356e1a3c,2020-05-07 06:29:56,Stefan Behnel,Reformat code for readability.,['runtests.py']
f688b4d84934694607e1365a0a4780eda1a30e58,2020-05-06 21:13:38,Stefan Behnel,"Mark ""ndarray.shape"" and ""ndarray.strides"" as not requiring the GIL.",['Cython/Includes/numpy/__init__.pxd']
17565628979f3e2a971db181c727091edf5818a0,2020-05-06 21:10:34,Stefan Behnel,Clean up some code in the refnanny.,['Cython/Runtime/refnanny.pyx']
379c37eeb26c3c9b4504b83922bbb09185c7bde9,2020-05-06 18:40:35,Stefan Behnel,"Remove some non-public functions from the NumPy declarations.
See https://github.com/numpy/numpy/pull/16170",['Cython/Includes/numpy/__init__.pxd']
7c11a6319df2190f2c03bfb160c1fd32382ec33f,2020-05-06 18:39:10,Stefan Behnel,"Add more 'nogil' declarations to NumPy functions that do not require the GIL (according to the declarations shipped by NumPy itself).
See https://github.com/numpy/numpy/pull/16170",['Cython/Includes/numpy/__init__.pxd']
bc7bef25694198809d8ab8628e38f651684661c1,2020-05-06 18:36:54,Stefan Behnel,Fix a call signature that should have raised an exception - unused?,['Cython/Compiler/Main.py']
b7949976596d2a08e98990ac88b034410c62e39b,2020-05-06 06:07:15,Stefan Behnel,"Remove the outdated getbuffer/releasebuffer implementations for the NumPy 'ndarray' since there are probably no NumPy installations out there anymore that do not support the buffer protocol themselves and are still worth supporting.

See https://github.com/numpy/numpy/pull/12284#discussion_r420378155
See GH-3573",['Cython/Includes/numpy/__init__.pxd']
4d6939fff12b0cbd92dfe0544a452fd1b5bf991a,2020-05-05 21:08:22,Stefan Behnel,Reverse the tuple item order in the utility code caching key to move the most selective item first (just in case if we ever get dict collisions).,['Cython/Compiler/Code.py']
dccf5885e22af80bd7b7e6b7c05abab7e556bc05,2020-05-05 21:06:28,Stefan Behnel,Allow utility code for declared C properties.,['Cython/Compiler/Symtab.py']
81a8955cc944d05a3a2ae422676f9da7fb0fa244,2020-05-05 17:46:25,Stefan Behnel,"Add a marker to the generated C code if the NumPy declarations came from Cython/Includes/numpy/.
See https://github.com/cython/cython/issues/3573",['Cython/Includes/numpy/__init__.pxd']
4625219f9ffff32348122c5d52464df877ce7f17,2020-05-05 14:36:54,Stefan Behnel,Prepare release of 3.0a4.,"['CHANGES.rst', 'Cython/Shadow.py']"
6fa71c3f8d934e61252e5ec5e722e82a4f5c9148,2020-05-05 14:25:06,Stefan Behnel,Prevent test from depending on repr(long) in Py2.,['tests/run/numpy_attributes.pyx']
e1eb0a1cf972287d670e9640d735150349321253,2020-05-05 14:11:57,Stefan Behnel,"Tighten ""numpy_attributes"" test to assert that it's actually using a property call and not an attribute access.
Also add a test for the newly added ""ndarray.data"" property.",['tests/run/numpy_attributes.pyx']
9ac5d81184d35cab4543d86e1e24d12378ca99e2,2020-05-05 10:37:41,Stefan Behnel,Provide a more convenient way to declare internal C properties.,"['Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py']"
4b90db366e1cf7b360573a92931a70ff3fb6fa0d,2020-05-05 09:54:35,Stefan Behnel,"Mark the embedded C main() function in the embedding test as ""extern C"" in C++ to see if that fixes the C++ builds in MSVC.","['docs/examples/tutorial/embedding/embedded_main.c', 'tests/windows_bugs.txt']"
b278dfcadf9059c99acf2eb2389c063b291c19b3,2020-05-05 09:18:43,Stefan Behnel,Update changelog.,['CHANGES.rst']
7c90cb739efef667094d6d939a66cd1a1217ee76,2020-05-05 08:55:24,Stefan Behnel,"Disable embedding test on Windows since it fails to find ""Py_DecodeLocale()"" for some reason.",['tests/windows_bugs.txt']
606313ee45d9db34893747eea7a955d9a2fee2b9,2020-05-05 08:40:07,Stefan Behnel,Rename embedding tests in docs to make it easier to find and select in the test suite.,"['docs/examples/tutorial/embedding/embedded.pyx', 'docs/examples/tutorial/embedding/embedded_main.c', 'docs/src/tutorial/embedding.rst']"
976893432edde8dcecca2b935399104dd74c27be,2020-05-05 08:27:45,Stefan Behnel,Add tests that f-strings are rejected in nogil sections.,['tests/errors/nogil.pyx']
aed19e492491c26ef6dcb60f81de79b8361d4a57,2020-05-05 08:23:53,Stefan Behnel,Add a test that side-effects of unused f-strings still apply.,['tests/run/fstring.pyx']
7ce18eb10e8665dc88b4f5eba09759c809f8404f,2020-05-05 06:28:58,Stefan Behnel,Fix a C compiler warning about unused cleanup code in buffer using functions that always raise (found by clang in the bufaccess.pyx test).,['Cython/Compiler/Nodes.py']
b39a5785fa622628699e9eac3269515297dd34ad,2020-05-05 05:42:50,Matti Picus,add test for ndarray attributes (GH-3521),['tests/run/numpy_attributes.pyx']
22a49f403b6f00f1674664e01ee0f8212c06ef13,2020-05-04 20:54:53,scoder,"Rewrite the C property feature (GH-3571)

* Rewrite C property support (GH-2640) based on inline C methods.
Supersedes GH-2640 and GH-3095.
Closes GH-3521.

* Test fix for `numpy_parallel.pyx`: avoid depending on whether ""nd.shape"" requires the GIL or not.

* Turn NumPy's ""ndarray.data"" into a property to avoid direct struct access.

* Make ""ndarray.size"" accessible without the GIL.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Pipeline.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Includes/numpy/__init__.pxd', 'tests/run/ext_attr_getter.srctree', 'tests/run/numpy_parallel.pyx']"
3bd6ccb011e227090560286abb1990a12a51d4d5,2020-05-04 20:52:24,Stefan Behnel,"Update the venerable tree-processing-phases comment in the ""Node"" class.",['Cython/Compiler/Nodes.py']
5e846d51b0066b0d7bd3eb45c18e576c9fc18cc9,2020-05-04 08:14:25,Stefan Behnel,"Prevent VerboseCodeWriter from inserting nul-bytes into the C file by switching to a more ""standard"" way of inserting code at a later time.",['Cython/Compiler/Nodes.py']
afffee895b14c7a736e55f28db8b8a94f865782c,2020-05-04 02:35:36,Stefan Behnel,Stop calling PyEval_InitThreads() In Py3.7+ (where it has become a no-op).,"['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ModuleSetupCode.c']"
40efd5313e06b5f60320fd5b73508d8ccb9bfe39,2020-05-03 14:10:16,Stefan Behnel,Clean up some code formatting.,['runtests.py']
b705bac4cb41e04fb889165655fdfd4e65efaed2,2020-05-03 14:02:52,Stefan Behnel,Clean up some code formatting.,['Cython/Compiler/Symtab.py']
93125ce511da2d861b54f5da5d45bf93d616a885,2020-05-03 05:40:09,Stefan Behnel,Remove Py2 fallback from embedding example since the rest of the code is Py3-only anyway.,['docs/examples/tutorial/embedding/spam_main.c']
4acf45ffdb8bc0d794e576149869563951f4d43b,2020-05-03 05:29:45,Stefan Behnel,Include a complete embedding example in the docs.,"['docs/examples/tutorial/embedding/spam.pyx', 'docs/examples/tutorial/embedding/spam_main.c', 'docs/src/tutorial/embedding.rst']"
d62bc77b3106f6c551cd7258b734b8b0efde8acb,2020-05-03 05:28:16,Stefan Behnel,Fix include file reference in docs.,['docs/src/userguide/language_basics.rst']
3e6e8c01359db0b79e44c54a3dd01291bb996e4d,2020-05-03 05:27:46,Stefan Behnel,Fix rst syntax in docs.,"['docs/src/quickstart/build.rst', 'docs/src/userguide/numpy_pythran.rst']"
5fe601f780153d89f3015d765f9e4ed77ff07850,2020-05-03 03:54:51,Stefan Behnel,Update documentation on embedding to warn that calling the module init function is wrong.,['docs/src/tutorial/embedding.rst']
513d5bd3d1c42cea615edd43bf49cc3db146dbd6,2020-05-02 19:24:00,Stefan Behnel,Merge branch '0.29.x',[]
42ae0e486ffd39a6e0cb881178ff163f7f178dbc,2020-05-02 19:18:20,Stefan Behnel,"Tentatively add Py3.9 to the travis test targets in 0.29.x, but allow it to fail.",['.travis.yml']
257bf381065274a9498673708915ce034d54a38a,2020-05-02 15:58:52,Stefan Behnel,Fix unrelated test after changing MemoryView.pyx.,['tests/compile/fused_redeclare_T3111.pyx']
34ed300d0d9d1dbcc6cbd5ef2bf445da82dbdd69,2020-05-02 12:25:34,Stefan Behnel,"Finally add a test tag ""py3only"" for tests that should be excluded in Py2.",['runtests.py']
ebbab491b18b34edf770616ccb69ac2510bf672d,2020-05-02 11:47:39,Stefan Behnel,"Refactor ""cython.array"" initialisation to avoid a bit of overhead.",['Cython/Utility/MemoryView.pyx']
2fc95d323e0ccc93537daec3dcddf0dd818a4865,2020-05-02 11:32:49,Stefan Behnel,"Clean up ""__pyx_array_new()"" call to follow the normal ""call; ERR()"" pattern.",['Cython/Compiler/ExprNodes.py']
6b76158b55bec6ecf3175456585bdf36ba69636c,2020-05-02 10:43:55,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
cf2bbce53dd9601004e2cf218f7b4dbb91aee977,2020-05-02 09:55:51,Stefan Behnel,"Improve error handling in ""cython.array"" creation code to avoid calling Py_BuildValue() with an exception set if ""__pyx_format_from_typeinfo()"" failed.","['CHANGES.rst', 'Cython/Compiler/ExprNodes.py']"
c4dbc4d63b796407634a48e42ae58d63f299f66b,2020-05-02 09:59:47,Stefan Behnel,Avoid unnecessary int-object creation when formatting numbers as strings in format_from_typeinfo() utility function.,['Cython/Utility/MemoryView.pyx']
ac1d79a656863c1693b0419586b3540702bbf795,2020-05-02 09:55:51,Stefan Behnel,"Improve error handling in ""cython.array"" creation code to avoid calling Py_BuildValue() with an exception set if ""__pyx_format_from_typeinfo()"" failed.",['Cython/Compiler/ExprNodes.py']
8cf3192da3fec2a40f492b06a163dc8449a20762,2020-05-02 09:37:59,Stefan Behnel,Refactor and reformat some memoryview utility code to make it more readable.,['Cython/Utility/MemoryView.pyx']
6f3042973de9734f6fde9ef7823a5940f06f447c,2020-05-02 05:10:24,Stefan Behnel,Merge branch '0.29.x',[]
dc0769a895a6f3a81957228ff2da3f9aa7b40d7b,2020-05-02 05:07:11,Stefan Behnel,"Refactor step handling in slice_memviewslice() utility code to make it more obvious what is happening in which case.
Closes GH-3568.",['Cython/Utility/MemoryView.pyx']
f3394797b4b925e1292f7950a77ff07e9a525ea6,2020-05-02 05:05:24,Stefan Behnel,"Avoid useless resorting to char* in nogil code in MemoryView.pyx for raising exceptions, since constant Python strings are just fine there.",['Cython/Utility/MemoryView.pyx']
125cf1d16a0f295d0a0de89f2d372c109beddd77,2020-05-01 10:37:23,Stefan Behnel,Re-enable test in Py2.7.,['tests/memoryview/numpy_memoryview.pyx']
a66a57ad3e3b7c541215f009b95b80404d44f71a,2020-05-01 10:06:31,Stefan Behnel,Disable test in old Python versions < 3.5.,['tests/memoryview/numpy_memoryview.pyx']
96b7c23a033691e6d4802e817d0e105d60c40753,2020-05-01 08:32:16,Stefan Behnel,"Try to fix the buffmt test's struct alignment issue on Windows, where ""unsigned long"" is 32 bits.
See https://github.com/cython/cython/pull/3562",['tests/buffers/buffmt.pyx']
c10d651201984e3451d5d0a3e24e84aaec515297,2020-05-01 18:24:14,Stefan Behnel,Update (unrelated) test warnings after changing utility code in MemoryView.pyx.,['tests/compile/fused_redeclare_T3111.pyx']
1f5a610b7838d92daeea6f2edc0b58e80d74c76a,2020-05-01 18:23:40,Stefan Behnel,"Change an exception return value to avoid an ""umbiguous exception value"" warning by Cython itself.","['Cython/Compiler/ExprNodes.py', 'Cython/Utility/MemoryView.pyx']"
f9dbd6a26a286bb05100f8151ec6307af750f580,2020-05-01 18:08:53,Stefan Behnel,"Suppress two ""undefined argument order"" warnings issued by Cython's memoryview code.",['Cython/Utility/MemoryView.pyx']
0b9a8269ab49fdc1ae6b138dac089f387998ea44,2020-05-01 17:38:29,Stefan Behnel,Avoid a C compiler warning about a dead condition in Py3.6+.,['Cython/Utility/ObjectHandling.c']
e09db16847bb77176f13cb4cf40f0050e739e181,2020-05-01 14:59:22,Stefan Behnel,Avoid some unnecessary object operations in memory slice object creation code.,['Cython/Utility/MemoryView.pyx']
5f6369ae1d49baafce48442940ba7c42d3363222,2020-05-01 12:01:23,Stefan Behnel,Rewrite _unellipsify() helper function in memoryview code to speed it up and reduce the generated C code.,['Cython/Utility/MemoryView.pyx']
7491c23594d1f54fe06c42e3c09487956bdc6d32,2020-05-01 10:37:23,Stefan Behnel,Re-enable test in Py2.7.,['tests/memoryview/numpy_memoryview.pyx']
a884fd5384d4ecc0e93a0e58acdd7eb944a7913e,2020-05-01 10:06:31,Stefan Behnel,Disable test in old Python versions < 3.5.,['tests/memoryview/numpy_memoryview.pyx']
a487cdbdf8731f4a7eaf354d52983d6379e9f9ba,2020-05-01 08:32:16,Stefan Behnel,"Try to fix the buffmt test's struct alignment issue on Windows, where ""unsigned long"" is 32 bits.
See https://github.com/cython/cython/pull/3562",['tests/buffers/buffmt.pyx']
87f591c51725f10ca7edc3c9a5493cbda47c1cb7,2020-05-01 06:58:41,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
c731203822851af2cbbb758a8d7429a7c1ed0bc6,2020-05-01 06:58:14,Stefan Behnel,Update changelog.,['CHANGES.rst']
45d800243c0afc2848bac3ec4e3f613c92fdfd4f,2020-05-01 03:03:30,Stefan Behnel,Simplify test code.,['tests/buffers/mockbuffers.pxi']
62d061fc0ecbfebe9480c430015d0c9d5644f626,2020-05-01 06:34:35,smutch,"Fix buffer parsing for memoryviews of arrays of structs (GH-3562)

See #1407.","['Cython/Utility/Buffer.c', 'tests/buffers/buffmt.pyx', 'tests/memoryview/numpy_memoryview.pyx']"
a3d9bc717c62cd505190d7e3c005ed49143dc5d4,2020-04-30 21:03:31,Stefan Behnel,Remove duplicates from list of reserved words.,['Cython/Compiler/Scanning.py']
a9cd26a9d3e9b59b00b7e720e363603f345c5d11,2020-05-01 06:46:15,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
dcac2aa37b69db2439f90cb3d9725889c7090c10,2020-04-29 11:52:13,Stefan Behnel,Update changelog.,['CHANGES.rst']
305e6ed0b2a3ca0d88a75014dcc9282552887311,2020-04-29 11:13:35,Kamekameha,"Maintain a separate copy of distutils' build_ext options (GH-3561)

These are mutable and therefore affect the stdlib build_ext options.

Fixes #2209",['Cython/Distutils/old_build_ext.py']
db4241cfab0d2547bd2f75515f54d390531c5a44,2020-04-30 10:24:13,Stefan Behnel,Remove Py2.4- compatibility fallback.,['runtests.py']
63fa47af61616304d7446c8644d9f0611d9f55a8,2020-05-01 06:37:04,Stefan Behnel,Use f-strings in memoryview code where possible.,['Cython/Utility/MemoryView.pyx']
9db9509f187c4353cb8e3e6cf7c2e0ec17dbfaf5,2020-05-01 03:11:30,Stefan Behnel,Clean up some test code.,['tests/buffers/mockbuffers.pxi']
4736e009af02ccd21b4472f228e6b70aa5db58fa,2020-05-01 03:03:30,Stefan Behnel,Simplify test code.,['tests/buffers/mockbuffers.pxi']
7dacee6093f59bf3f0977ded04e99f044669aaaa,2020-05-01 06:34:35,smutch,"Fix buffer parsing for memoryviews of arrays of structs (GH-3562)

See #1407.","['Cython/Utility/Buffer.c', 'tests/buffers/buffmt.pyx', 'tests/memoryview/numpy_memoryview.pyx']"
186ef902c9edff0be70fe4b7da9e54ce1d9011b4,2020-04-30 21:03:31,Stefan Behnel,Remove duplicates from list of reserved words.,['Cython/Compiler/Scanning.py']
4c497eb2d60a9ace13ab47aec62884fd52c147bb,2020-04-30 13:32:41,Stefan Behnel,"Revert ""Revert ""Build Cython in parallel on appveyor if distutils support it.""""

This reverts commit 4900109cb691cfa8efe2b2f674ee3dcee68b878d.
This is trying to parallelise the appveyor build again after allowing the setup.py script to be imported on a multiprocessing ""spawn"".",['appveyor.yml']
c0cd7fa100a91d52f0b350154e4d5ff9eb94aafe,2020-04-30 10:38:09,Stefan Behnel,Move a potentially unused import out of the way in the test runner.,['runtests.py']
5c7abd5d3597cc5c29e8539062bb6b221eae705c,2020-04-30 10:35:51,Stefan Behnel,"Make the setup.py script importable to enable multiprocessing builds that need to ""spawn"" processes (usually on Windows).",['setup.py']
4478f22ff1f0261dfcc936222b609783b7e0d19e,2020-04-30 10:24:13,Stefan Behnel,Remove Py2.4- compatibility fallback.,['runtests.py']
b91fad516a7e9c554da03cf09fb20bd53145788e,2020-04-30 09:26:11,Stefan Behnel,Fix changed test name also in PyPy exclusions.,['tests/pypy_implementation_detail_bugs.txt']
bcae4d1f31135bdcbedadc83e751f13e18de9d0c,2020-04-30 07:58:52,Stefan Behnel,Fix globals for lambda functions in limited-API mode.,['Cython/Compiler/ExprNodes.py']
dc3e0711ce4245482a5ac9514a1540745e18014a,2020-04-30 07:49:50,Stefan Behnel,Fix C code spacing.,['Cython/Compiler/ModuleNode.py']
54ed972da94dd6842591fbc77f6ca0fd966e47c1,2020-04-30 07:49:17,Stefan Behnel,Silence a C compiler warning in limited-API mode.,['Cython/Utility/Exceptions.c']
76d8bf7990fd9622520b7c41408478bb03d19be7,2020-04-30 07:17:55,Stefan Behnel,"Fix duplicate code generation in assert condition, found for lambda functions that are used as conditions in ""test_grammar.py"".",['Cython/Compiler/Nodes.py']
c3d6a8d4f8abd16614fea460394e25245d91c148,2020-04-29 12:00:01,Stefan Behnel,Update changelog.,['CHANGES.rst']
b6523acc0b51fb4136f239600197ba9e634c2c8e,2020-04-29 11:57:53,Stefan Behnel,Merge branch 'master' of git+ssh://github.com/cython/cython,['Cython/Distutils/old_build_ext.py']
6fbb5fd9ff17e70652cc5688264cd0a606d21b6d,2020-04-29 11:54:40,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/ModuleNode.py']"
0e8bc15d4b2eec1b04c9250e023475a382e37539,2020-04-29 11:54:26,Stefan Behnel,Update changelog.,['CHANGES.rst']
1257fc62c718bfa2d324066b2fa3a763a78acc36,2020-04-29 11:52:13,Stefan Behnel,"Fix error handling for module init sub-functions, which failed to set the error position correctly.",['Cython/Compiler/ModuleNode.py']
13ef6fa37d638be84fbcf14ddae917d1e3aa46f1,2020-04-29 11:13:35,Kamekameha,"Maintain a separate copy of distutils' build_ext options (GH-3561)

These are mutable and therefore affect the stdlib build_ext options.

Fixes #2209",['Cython/Distutils/old_build_ext.py']
fb2ae3609bd41881357d7bb2f6865354ebafcdc7,2020-04-29 11:11:25,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
8142ffabc2e369393d0bb3089fa9375573bc7fb6,2020-04-29 11:09:50,Stefan Behnel,Update changelog.,['CHANGES.rst']
94e0e9a98444cc8946b60bce815418b3564dc15c,2020-04-29 09:52:57,Stefan Behnel,"Generate function-local error indicator variables whenever ""error_goto()"" is used.
This was previously broken by the introduction of the ""__PYX_ERR()"" macro.","['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py']"
41c8bf3719a8268041527de04652a0975cad8472,2020-04-29 11:02:01,Stefan Behnel,Update changelog.,['CHANGES.rst']
97e1b9641fabe1e8b6454cb673671cef2d4053fa,2020-04-29 10:57:52,Stefan Behnel,"Reimplement the ""assert"" statement by delegating the exception raising to a RaiseStatNode.
This allows taking advantage of the automatic ""with gil"" block handling for raising exceptions, allows proper control flow analysis, etc.","['Cython/Compiler/FlowControl.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Parsing.py', 'tests/errors/e_assert.pyx', 'tests/run/assert.pyx', 'tests/run/with_gil_automatic.pyx']"
b0aaba6092277afa94990aa8b657265cd4dedd31,2020-04-29 10:43:40,Stefan Behnel,"Always call the refnanny on function exit if we set it up on entry, not just in GIL-owning functions.
This was previously using inconsistent conditions on entry and exit of the function.",['Cython/Compiler/Nodes.py']
719c98bd71fb6ac5e54c709372a75d6fb7689f60,2020-04-29 10:08:30,Stefan Behnel,"Fix expected test warnings after fixing the pipeline that extracts entries from generated Cython utility code.
Previously, it was emitting warnings twice because it was running the analysis twice.",['tests/compile/fused_redeclare_T3111.pyx']
9083f4da053e4d5184fd230a909c4318eb7e0f01,2020-04-29 09:52:57,Stefan Behnel,"Generate function-local error indicator variables whenever ""error_goto()"" is used.
This was previously broken by the introduction of the ""__PYX_ERR()"" macro.","['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py']"
ae8b0ebf80c622327ffff02b6acc1f03ec67e87e,2020-04-29 07:44:11,Stefan Behnel,Fix test name.,['tests/memoryview/memoryview_pep484_typing.pyx']
d896ec4fcf44837487b54552e721e10923385172,2020-04-29 07:35:47,Stefan Behnel,"Fix a typo that prevented UtilityCode.get_tree(entries_only=True) from working as expected. It looks like this doesn't make a difference for the generated C code (at least for the pickling, C++ STL and memoryview tests), but it should reduce the time it takes to collect the symtab entries defined in the tree.",['Cython/Compiler/UtilityCode.py']
04034e28b58066a380d1a91a9c143053175ff9bc,2020-04-29 07:06:54,Stefan Behnel,Minor code simplification.,['Cython/Compiler/Parsing.py']
22c7351ce658db6d27d3008ddd8a6b1321c14fb4,2020-04-29 07:05:52,Stefan Behnel,Add some comments.,['runtests.py']
56f39f2446be15c0a99ba2223381e3921f8c34a5,2020-04-28 21:18:32,Stefan Behnel,Remove redundant assertion.,['Cython/Compiler/Nodes.py']
34db37c3b1eb0c2a5da4cfd3d548ec8ffa42d077,2020-04-28 21:14:27,Stefan Behnel,Update changelog.,['CHANGES.rst']
dc41690ac13a25253ac3790cb112d557a2430aae,2020-04-28 21:02:19,Stefan Behnel,"Instead of simply asserting that the error exit case and the success exit case of a nogil function are aligned, make sure they are before joining them back together.
This is necessary because the error code path is more likely to require the GIL for cleanup operations than the success path – which is a good thing, actually, so we try to streamline the success case at the expense of more work on the error path.","['Cython/Compiler/Nodes.py', 'tests/memoryview/view_return_errors.pyx']"
911cc28e3a70ce1a5f35cc48b75e1dad7b2131f3,2020-04-28 19:57:58,Stefan Behnel,"Move assertion where it actually belongs, since it does not apply to the buffer cleanup case (which semantically jumps over it with a 'goto').",['Cython/Compiler/Nodes.py']
6dbd22097e0904ec0b4d611ebc65779f15213550,2020-04-28 19:42:14,Stefan Behnel,Improve GIL-state assertion to point at the user function that triggered it.,['Cython/Compiler/Nodes.py']
4bfd93544d706f5f683232c9aea78538ec84f11b,2020-04-28 19:11:56,Stefan Behnel,Update changelog.,['CHANGES.rst']
871739ae767022a8e65fd1c221ca5073b062c785,2020-04-28 19:11:24,Stefan Behnel,Generate C compiler branch hints also for 'raise' statements in nogil and with-gil sections.,"['Cython/Compiler/Optimize.py', 'tests/compile/branch_hints.pyx']"
7e8f9a3bf9dddb7ba21929a4686eb6c6c86dac89,2020-04-28 18:27:30,Stefan Behnel,Move the branch-hint generation from Nodes.py into Optimize.py to make it available to tree assertion tests (and add such a test).,"['Cython/Compiler/Nodes.py', 'Cython/Compiler/Optimize.py', 'tests/compile/branch_hints.pyx']"
792d80bade7138993ec3b1d2fb3133dced2bc871,2020-04-28 16:54:06,Stefan Behnel,"Support the 'assert' statement in nogil sections, as long as it has a plain C condition and constant message (string) value.","['Cython/Compiler/Nodes.py', 'docs/src/userguide/external_C_code.rst', 'tests/errors/e_assert.pyx', 'tests/run/with_gil_automatic.pyx']"
87f9665155ac86c6da19e48027904f518bace5ea,2020-04-28 16:50:04,Stefan Behnel,Make nogil error messages on f-strings more understandable.,['Cython/Compiler/ExprNodes.py']
ff56e6b40289c8f3a9a4eae8d09e46416aa50e03,2020-04-28 15:52:19,Stefan Behnel,"Allow referencing all PyConstNodes in nogil expressions, e.g. in 'is' tests (because, why not?).","['Cython/Compiler/ExprNodes.py', 'tests/errors/nogil.pyx']"
1c4a835025dbe1e178c36b1bdd687384ac4eccca,2020-04-28 13:31:24,Stefan Behnel,Add missing branch hint for exception case.,['Cython/Compiler/Nodes.py']
01085d2ad588bf41e2d17cff6aa96d0507087ce3,2020-04-28 12:50:36,Stefan Behnel,"Make the GIL-avoidance in 7d99b0f0 actually work in nogil functions and not just nogil sections.
Closes #3558.","['Cython/Compiler/Nodes.py', 'tests/run/with_gil_automatic.pyx']"
7f5956f428a5db8f6ab1268022bf5beed7c1f65a,2020-04-28 12:34:19,Stefan Behnel,Remove some superfluous semicolons at the end of Python code lines.,['Cython/Compiler/ModuleNode.py']
c6cf09ee6d17f0f49b983e2068a9e96cd7f12d1f,2020-04-27 17:17:00,Stefan Behnel,"Allow print statements in nogil sections.
Would be nice to allow this also for the print() function, but that's tricky because we have to insert the ""GILStatNode"" before analysing the declarations, which is when we learn if it's really the builtin print function or something else.","['Cython/Compiler/ParseTreeTransforms.py', 'tests/errors/nogil.pyx', 'tests/run/with_gil_automatic.pyx']"
9d528b206c95ed92b443415a841b151df9ba28e7,2020-04-27 16:08:02,Stefan Behnel,Add missing test tags.,['tests/run/with_gil.pyx']
620d2b5acc8063835959525e6a9ecc8269e2d57b,2020-04-27 15:02:02,Stefan Behnel,Prepare release of 3.0 alpha 3.,"['CHANGES.rst', 'Cython/Shadow.py']"
89172b6d6d40ef0fea20e6b0c37aab2148daedd3,2020-04-27 11:08:10,Stefan Behnel,Add a test for inferred integer %-operations.,['tests/run/modop.pyx']
a1a2bd70c66c8905d4011d189ac5fd8d38134521,2020-04-27 11:06:45,Stefan Behnel,Update changelog.,['CHANGES.rst']
7d99b0f085bb254e9a9b4a9fe50aefe133837a81,2020-04-27 10:21:10,Stefan Behnel,"Avoid acquiring the GIL at the end of nogil functions (GH-3556)

Acquire the GIL in nogil functions only when strictly needed on function exit, e.g. for cleaning up temp variables from with-gil blocks or adding tracebacks.

Closes GH-3554.","['Cython/Compiler/Code.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Utility/ModuleSetupCode.c']"
25b7d7e415d179077a6d8ee150d9bc59bc5e09e0,2020-04-27 10:14:41,da-woods,"Relax class private names for c types (GH-3546)

Allow C functions/variables with names starting with ""__"" to be found
from within classes, even though their names would normally be
inaccessible due to the Python ""class private names"" mechanism.
https://github.com/cython/cython/issues/3544

Warn about unmangled Python names that are being found and used, since they do not adhere to Python lookup rules.

Removed `mangle_special_name` in favour of `mangle_class_private_name`,
which previously applied slightly different rules for creating vs looking up variables.

Closes #3548.","['Cython/Compiler/Symtab.py', 'docs/src/userguide/migrating_to_cy30.rst', 'tests/run/methodmangling_T5.py', 'tests/run/methodmangling_cdef.pyx', 'tests/run/methodmangling_unknown_names.py']"
9686056476099401a1c66fcdddfbfc5793908bbb,2020-04-27 09:47:50,Stefan Behnel,"Revert ""Revert ""Avoid some unnecessary traversal in ""ForwardDeclareTypes"".""""

This reverts commit f09e61ab721ad51526ec7a6798fc01d8346f539d.",['Cython/Compiler/ParseTreeTransforms.py']
cf5e3fe3520f51cdf001956e81bd4fdb5e86233b,2020-04-26 21:56:18,Stefan Behnel,"Fix reference to missing utility function, which is not more than an alias to CPython's ""PyObject_GenericGetAttr"" in the limited API case.",['Cython/Compiler/TypeSlots.py']
60a1e44a01d92d4f18fcc9b24d4cb05bbdd77cfb,2020-04-26 19:01:51,Stefan Behnel,Remove an unused method argument and avoid shadowing the 'type' builtin.,['Cython/Compiler/ModuleNode.py']
1f8044c364d6f33231eb65674b091521f81afc90,2020-04-26 18:35:06,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
4dbce65d359473c1dc37eb0c325ae177aa0774a2,2020-04-26 18:28:56,Stefan Behnel,"Clean up and repair the type spec generation for the limited API, leaving more of the work to the TypeSlots instead of special-casing all sorts of things.","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/TypeSlots.py']"
bc40c5f4873ad41a63de64c94331c45f0def148d,2020-04-26 17:00:58,Stefan Behnel,"Move the module state generation further down to the latest point before the module implementation.
Ideally, most of the code that is uninteresting for users should be out of the way and not reside before the translated user code.
Mark all code section name beginnings in the C code file to make them easier to follow and move around.","['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py']"
58989a4323d785a156efd32fe1341c7183b075a6,2020-04-26 16:23:40,Stefan Behnel,Fix C-code indentation of PyModuleDef struct by avoiding duplicate opening braces in conditional code.,['Cython/Compiler/ModuleNode.py']
b648b65ac39291aa546b58e44c8576869c351b66,2019-08-26 20:58:40,Jeroen Demeyer,Always enable C line in traceback for tests (GH-3098),"['runtests.py', 'tests/run/tracebacks.pyx']"
47f39d56abcff3bccbdc937c1cf718de4bd2364e,2020-02-12 19:12:05,da-woods,"Changed always_allow_keywords_T295 for Py3.9 (GH-3351)

* Changed always_allow_keywords_T295 for Py3.9

https://bugs.python.org/issue37645 appears to change some error
messages slightly (including the qualname and not just the
function name). This change just allows doctest to cope with
both the new and old messages",['tests/run/always_allow_keywords_T295.pyx']
4e8134a22312d385382bee1bb38aae44d4b06d0c,2020-04-26 11:31:21,Stefan Behnel,Prepare release of 0.29.17.,"['CHANGES.rst', 'Cython/Shadow.py']"
566e6aea850918ffb41321a7fb14c141dee2f937,2020-04-26 11:30:08,Stefan Behnel,"Add appveyor build for Py3.8 (will probably fail tests, but it should at least build).",['appveyor.yml']
3e56b6fca9b0413c341463748bf594e4c3d341c0,2020-04-26 11:27:18,Stefan Behnel,Fix type slot name in comment.,['Cython/Utility/AsyncGen.c']
2d0a4faba088f6a825cc18a8543e634bc5911d9e,2020-04-21 07:34:58,Stefan Behnel,Avoid a C compiler warning in clang for a constant strchr() call.,['Cython/Utility/ImportExport.c']
1587111f16a0e2157d6f115fd3a3c6da77985060,2020-04-23 12:45:53,Stefan Behnel,"Clarify on PyPI page that ""--no-cython-compile"" is only helpful if no wheels are used at all.",['setup.py']
f09e61ab721ad51526ec7a6798fc01d8346f539d,2020-04-26 08:29:52,Stefan Behnel,"Revert ""Avoid some unnecessary traversal in ""ForwardDeclareTypes"".""

This reverts commit 5204d86989493855fdd0acd20debd9d0a270bb23.
See https://github.com/cython/cython/issues/3548",['Cython/Compiler/ParseTreeTransforms.py']
52035b92c4e7a6a0bae86a3c5d838246cd3e6554,2020-04-26 07:39:32,Stefan Behnel,Clean up default value handling of memory view type.,"['Cython/Compiler/Code.py', 'Cython/Compiler/MemoryView.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py']"
2b03bda00635bd1c0fc6cb523cdd695bcfceca2c,2020-04-26 07:20:03,Stefan Behnel,Simplify a C guard.,['Cython/Compiler/ModuleNode.py']
597995c266dee601d094dbd9b0edba2f0b654bec,2020-04-25 07:41:21,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
8000fc57985d703e8158a6817b9ab51838370f71,2020-04-25 07:39:33,Stefan Behnel,Update changelog.,['CHANGES.rst']
fb41108bca2f5874957b29f1a2e0db6bba438255,2020-04-25 07:34:59,Stefan Behnel,"Work around error that ""__reduce_cython__ cannot be found"" when re-importing an extension module that was already initialised before.
Backport to 0.29.x.
Closes #3545.","['Cython/Utility/ExtensionTypes.c', 'Cython/Utility/ObjectHandling.c', 'runtests.py', 'tests/pypy_bugs.txt', 'tests/run/reimport_failure.srctree']"
94ea7d0931300d23d518d34129c0cd61ffca5f31,2020-04-25 07:25:30,Stefan Behnel,"Work around error ""__reduce_cython__ cannot be found"" (GH-3549)

* Work around error that ""__reduce_cython__ cannot be found"" when re-importing an extension module that was already initialised before.
* Exclude ""reimport_failure"" test in Py2 and PyPy since Py2 does not allow reimports and PyPy3 apparently does nothing for them.

Closes #3545.","['Cython/Utility/ExtensionTypes.c', 'runtests.py', 'tests/pypy_bugs.txt', 'tests/run/reimport_failure.srctree']"
8cff92eb98d662410ab90ae1312fab12bbb7d349,2020-04-25 06:03:16,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
973510e1f4cb5503d09e794f6b1c07e94b7e3165,2020-04-25 06:02:52,Stefan Behnel,Update changelog.,['CHANGES.rst']
aba1673a91d1c5e020cefe93bda122d9168e1179,2020-04-25 05:53:50,Ben McGinnes,"docs: fix link to Pyrex embedding tutorial (GH-3550)

* Updated URL for the ""embedding Python"" link in external_C_code.rst
  in the userguide.
* The freenet.org.nz domain has clearly expired at some point and now
  the original link goes spam links, but there are copies in the
  Wayback Machine.
* The updated (fixed) URL uses the most recent archive for the
  original page (author: June, 2004; web archive: Feb, 2012).",['docs/src/userguide/external_C_code.rst']
9e26b370f2bf4d9aea29a9d29bcac0955ebb632c,2020-04-25 05:58:18,isotherm,"FIX: Ignore unused ctuples (GH-3543) (GH-3551)

generate_type_definitions maintained a list of ctuples for which code
was already generated, but the logic did not match the logic used in
generate_type_header_code, which does not generate code if the entry is
marked as unused.

If the first ctuple of a certain type was marked unused, but later
instances were not, this could result in no code being generated for
the ctuple at all. Resolve by verifying whether the ctuple entry is used
before adding it to the list.

Co-authored-by: Kirk Meyer <kirk.meyer@ravenind.com>","['Cython/Compiler/ModuleNode.py', 'tests/compile/ctuple_unused_T3543.pyx']"
f29280722c6d42b53b400b9d745d158f74089e8f,2020-04-25 05:58:18,isotherm,"FIX: Ignore unused ctuples (GH-3543) (GH-3551)

generate_type_definitions maintained a list of ctuples for which code
was already generated, but the logic did not match the logic used in
generate_type_header_code, which does not generate code if the entry is
marked as unused.

If the first ctuple of a certain type was marked unused, but later
instances were not, this could result in no code being generated for
the ctuple at all. Resolve by verifying whether the ctuple entry is used
before adding it to the list.

Co-authored-by: Kirk Meyer <kirk.meyer@ravenind.com>","['Cython/Compiler/ModuleNode.py', 'tests/compile/ctuple_unused_T3543.pyx']"
0d27ae3df798e3b98b147316cac2116538d015c7,2020-04-25 05:53:50,Ben McGinnes,"docs: fix link to Pyrex embedding tutorial (GH-3550)

* Updated URL for the ""embedding Python"" link in external_C_code.rst
  in the userguide.
* The freenet.org.nz domain has clearly expired at some point and now
  the original link goes spam links, but there are copies in the
  Wayback Machine.
* The updated (fixed) URL uses the most recent archive for the
  original page (author: June, 2004; web archive: Feb, 2012).",['docs/src/userguide/external_C_code.rst']
5204d86989493855fdd0acd20debd9d0a270bb23,2020-04-24 09:40:50,Stefan Behnel,"Avoid some unnecessary traversal in ""ForwardDeclareTypes"".",['Cython/Compiler/ParseTreeTransforms.py']
203ec86c39165c4001aa9238268f1911db1e8728,2020-04-23 13:15:31,Stefan Behnel,Update and split changelog for 3.0a2.,['CHANGES.rst']
df72b5b37eb219c45affb71e419c0c0929dade73,2020-04-23 12:45:53,Stefan Behnel,"Clarify on PyPI page that ""--no-cython-compile"" is only helpful if no wheels are used at all.",['setup.py']
b2287d91414701be11280ef9de6e178bf9b8021b,2020-04-23 12:39:22,Stefan Behnel,Add another safety guard around the optimised PEP-487 implementation.,['Cython/Utility/ObjectHandling.c']
b709334b7af7cbafa017a8f27dc9bbeafda5af94,2020-04-23 12:37:44,Stefan Behnel,Remove unused import.,['Cython/Compiler/AutoDocTransforms.py']
abeb082098c13e243a2e2658f9eb45f1c151b091,2020-04-23 11:53:17,da-woods,"Mangle __arg argument names in methods (GH-3123)

Follows Python behaviour, but excludes ""__pyx_…"" names in utility code.

Closes GH-1382.","['Cython/Compiler/FlowControl.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Compiler/Symtab.py', 'tests/run/methodmangling_T5.py', 'tests/run/methodmangling_cdef.pxd', 'tests/run/methodmangling_cdef.pyx', 'tests/run/methodmangling_pure.py']"
3de7a4b8fb7ce045222e13ca02541f6a70e89c2e,2020-04-22 09:14:11,Stefan Behnel,Tune some internal calls into fastcall/vectorcall (GH-3540),"['Cython/Compiler/ExprNodes.py', 'Cython/Utility/Coroutine.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c']"
02773431f29834b32087daa6be744163cc7c2d01,2020-04-22 06:06:38,Stefan Behnel,"Avoid ""unused"" C compiler warning.",['Cython/Utility/ObjectHandling.c']
f34cddc484c45f4db304911d94a905f0ac2d7936,2020-04-22 04:35:25,Stefan Behnel,"Implement PEP-487: simpler customisation of class creation (GH-3533)

Currently excludes PyPy2.
Closes GH-2781.","['CHANGES.rst', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'tests/pypy2_bugs.txt', 'tests/run/test_subclassinit.py']"
b6fd3a2b11466acdc4b96f0d1cf46bf34cf130a7,2020-04-21 18:40:53,Stefan Behnel,Make some feature flag defaults overridable in the Limited-API case.,['Cython/Utility/ModuleSetupCode.c']
12bbe5f3d209d5c8e2d5a6a89f94d97fbb33d78f,2020-04-21 07:34:58,Stefan Behnel,Try if we can avoid a C compiler warning in clang for a constant strchr() call.,['Cython/Utility/ImportExport.c']
0917df8f32515daa0c67d0caf2104462aebd36ae,2020-04-21 06:56:44,Stefan Behnel,Guard helper function against missing usage when direct type slot access is disabled.,['Cython/Utility/Coroutine.c']
b0d8de7928019372ebd5fb81e027529e79aa922e,2020-04-21 06:48:47,Stefan Behnel,"Add ""tp_pypy_flags"" field to PyTypeObject struct when compiling in PyPy 6.0+ in order to avoid C compiler warnings about an uninitialised struct field.","['Cython/Compiler/TypeSlots.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c']"
3a3726c3ab531bcfc2560f2529753d0b98f8aae3,2020-04-21 05:39:17,Stefan Behnel,Try if we can avoid a C compiler warning in clang for a constant strchr() call.,['Cython/Utility/ImportExport.c']
ccf1769f5426b0dc66a7b32e29a5f9617ce3ddf5,2020-04-21 04:29:07,da-woods,"Added mechanism for moving rather than copying C++ temps (GH-3362)

Right now it's used in a few simple cases (function call and single assignment)
Don't attempt to remove reference types.
Be wary of the ""safety check"" for double moves when things like result() are called twice
Made sure fallback option was genuinely c++03 complient so that test should pass on clang","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Utility/CppSupport.cpp', 'tests/compile/cpp_temp_assignment.pyx']"
4900109cb691cfa8efe2b2f674ee3dcee68b878d,2020-04-20 20:42:19,Stefan Behnel,"Revert ""Build Cython in parallel on appveyor if distutils support it.""

This reverts commit 52635828ba8eaae0ddf8db43b47822997de91ae1.

multiprocessing requires some additional setup on Windows, which I don't currently want to implement in setup.py.",['appveyor.yml']
b6b54af4db68c11695519d28029123052dba7d0b,2020-04-20 18:02:05,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
049f839dfc2b41d6c431eb4e55bf0f1fc5e30683,2020-04-20 18:01:36,Stefan Behnel,Update changelog.,['CHANGES.rst']
631475acbad73ac665e5f3fe921be5e81adbfb9d,2020-04-20 17:58:32,Sam Sneddon,"Avoid integer overflow when decoding bytes/charptr (GH-3535)

Fixes GH-3534.","['Cython/Utility/StringTools.c', 'tests/run/bytesmethods.pyx', 'tests/run/charptr_decode.pyx']"
7b98f54a3b533b8178c34b0d8fec3bfb7c7aac5f,2020-04-20 17:58:32,Sam Sneddon,"Avoid integer overflow when decoding bytes/charptr (GH-3535)

Fixes GH-3534.","['Cython/Utility/StringTools.c', 'tests/run/bytesmethods.pyx', 'tests/run/charptr_decode.pyx']"
090809daa9f8332fc5f68c498508383bd2f8d5d6,2020-04-20 12:13:28,Stefan Behnel,Disable the PEP-487 test in PyPy because it fails in travis (PyPy 7.1.1).,['tests/pypy_bugs.txt']
6604937b4455b8a8130bf1ccaa906c314b14d566,2020-04-20 11:26:17,Stefan Behnel,Build Cython in parallel on travis.,['.travis.yml']
f95858d5798f1da039c1265946c84891d8715a64,2020-04-20 11:20:22,Stefan Behnel,Suppress non-error output of the C compiler in test runner unless there is a test failure or at least some error output as well.,['runtests.py']
52635828ba8eaae0ddf8db43b47822997de91ae1,2020-04-20 11:05:52,Stefan Behnel,Build Cython in parallel on appveyor if distutils support it.,['appveyor.yml']
9c121839a04e82ee9796fffd63840e1baf3bb84c,2020-04-20 07:49:53,Stefan Behnel,Do not create a new unicode string object when taking a fully slice.,['Cython/Utility/StringTools.c']
698d162b5a896134e6190532c5fed8ef56ad0fb4,2020-04-20 07:36:30,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
43517bfbd79813d2c600728c171eda62b307d751,2020-04-20 07:35:41,Stefan Behnel,Update changelog.,['CHANGES.rst']
8bbcc0cd0c6ac4f8db5e0c1928fd630a6774be2f,2020-04-20 07:25:57,Sam Sneddon,"Avoid integer overflow when computing unicode substring (GH-3532)

Fixes #3531.","['Cython/Utility/StringTools.c', 'tests/run/unicode_slicing.pyx']"
921fd3d9f2f3fadeaedfe491c48741c6e7aa2a3d,2020-04-20 07:31:48,Stefan Behnel,Avoid useless C-API call to get a constant.,['Cython/Utility/StringTools.c']
2697cdb069add4c143b2d366a86a92c1d29b8d3b,2020-04-20 07:25:57,Sam Sneddon,"Avoid integer overflow when computing unicode substring (GH-3532)

Fixes #3531.","['Cython/Utility/StringTools.c', 'tests/run/unicode_slicing.pyx']"
105491439c2fbc166e73206c49a34196a4e2ff61,2020-04-20 07:21:18,Stefan Behnel,Minor code cleanup.,['Cython/Utility/ObjectHandling.c']
fa0a316e7ecc254ba2a8d20630135639fcdd1ee2,2020-04-20 07:17:54,Stefan Behnel,Fix C99-ism to make code C89 again.,['Cython/Utility/ObjectHandling.c']
646952800ebbdcebfc4f899cce29114dff65949a,2020-04-20 07:15:28,Stefan Behnel,Minor code cleanup.,['Cython/Compiler/Nodes.py']
c0ceabe1ee0904477ed0b0b9371ae43915d7bd2f,2020-04-20 07:06:09,msg555,"Update GetItem to support __class_getitem__ for type objects (GH-3518)

Closes #2753.","['Cython/Compiler/Nodes.py', 'Cython/Utility/ObjectHandling.c', 'tests/run/test_genericclass.py']"
b692adc13c560551e3ea87e0c0d01bc983248893,2020-04-19 19:45:58,Stefan Behnel,Turn plain classes without bases into new-style classes with language_level=3 (GH-3530),"['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'docs/src/userguide/migrating_to_cy30.rst', 'tests/run/cdef_multiple_inheritance_errors.srctree', 'tests/run/cython3.pyx']"
f4d8332f657df46e015e44e04ad3e09e71213e28,2020-04-19 09:27:03,Stefan Behnel,Prepare release of 3.0a2.,['Cython/Shadow.py']
c116847b3e46383c697b7eaaeaf6fea3a01a55ed,2020-04-18 21:19:10,Stefan Behnel,Update changelog.,['CHANGES.rst']
566ecc3b91262cc5318ccf5f5f16e4cd0fd9a789,2020-04-18 20:29:53,Stefan Behnel,"Increase warning level for legacy ""dict in annotations"" typing.",['Cython/Compiler/ExprNodes.py']
f18e3c9f9ce35ebf2cf2713775f35c47351e9c15,2020-04-18 20:44:51,da-woods,"Make ""cimport numpy"" without import_array() safer by automatically calling it (GH-3524)","['CHANGES.rst', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/TypeInference.py', 'Cython/Includes/numpy/__init__.pxd', 'Cython/Utility/NumpyImportArray.c', 'tests/errors/w_numpy_arr_as_cppvec_ref.pyx', 'tests/run/numpy_cimport_1.pyx', 'tests/run/numpy_cimport_2.pyx', 'tests/run/numpy_cimport_3.pyx', 'tests/run/numpy_cimport_4.pyx', 'tests/run/numpy_cimport_5.pyx', 'tests/run/numpy_cimport_6.pyx']"
3a3419fb1f13a0ec8ba1121f0aea4e7ec4df4773,2020-04-18 20:39:33,Stefan Behnel,"Make C++ typeid accept specializations of fused types (#3205)

* Potential fix for GH issue #3203

Gets the specialized type if possible from
NameNode.analyse_as_type

This does introduce a potential new bug:
```
cimport cython

just_float = cython.fused_type(float)

cdef OK1(just_float x):
    return just_float in floating

cdef fail1(just_float x, floating y):
    return just_float in floating

cdef fail2(floating x):
    return floating in floating

def show():
    """"""
    >>> show()
    True
    True
    True
    True
    """"""
    print(OK1(1.0))
    print(fail1(1.0, 2.0))
    print(fail1[float, double](1.0, 2.0))
    print(fail2[float](1.0))
```
fail1 and fail2 work before this patch but fail with it. It isn't
clear to me if this should actually be considered a bug. It
works in both versions with `cython.floating`, which possibly
suggests analyse_as_type in AttributeNode should also be changed

* Bring attribute.fused types in line

* Removed try-catch

* Fix and test ""type in fused_type"" special-case

* Added ""analyse_as_specialized_type""

* Fixed cpp_operators (handle type is None)","['Cython/Compiler/ExprNodes.py', 'tests/run/fused_cpp.pyx', 'tests/run/fused_types.pyx']"
8abcb26f075a7985a71a37f9320252019ef4bfe7,2020-04-18 20:36:27,Stefan Behnel,Make CodeWriter inherit from ExpressionWriter in order to support all kinds of expressions without duplicating code. (GH-3528),"['Cython/CodeWriter.py', 'Cython/Compiler/AutoDocTransforms.py', 'Cython/Tests/TestCodeWriter.py']"
bfc4c3fab90d90b09ccd55b0f038a528619f15e3,2020-04-18 16:38:54,Stefan Behnel,Start writing up some help for users who want to migrate from Cython 0.29.x to Cython 3.0.,"['docs/src/userguide/index.rst', 'docs/src/userguide/migrating_to_cy30.rst']"
6e904633f13faa7dc36015a900bd8ab06abc6b8f,2020-04-18 16:00:04,da-woods,Fixed cpp_operators (handle type is None),['Cython/Compiler/ExprNodes.py']
f22704c1abc718a12e28a7eae49dda82ab945a2d,2020-04-18 12:59:06,da-woods,"Added ""analyse_as_specialized_type""","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ParseTreeTransforms.py']"
35ef5e01f9612acde39c2910914f5666d3b2d89e,2020-04-18 12:05:28,da-woods,"Fix and test ""type in fused_type"" special-case","['Cython/Compiler/ParseTreeTransforms.py', 'tests/run/fused_types.pyx']"
1c8d21e19fbf469f770423fa8664f19a67a59ab2,2020-04-18 07:39:18,Stefan Behnel,Add some missing branch hints.,['Cython/Utility/ObjectHandling.c']
04d918f684404375390657d12ecb53346d66c93d,2020-04-17 08:52:35,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
c0376241ff78db2bf92fe8c6771bcb13dcde885c,2020-04-17 08:52:23,Stefan Behnel,Update changelog.,['CHANGES.rst']
10c19faf4da842f837d3de15b5ddcc0451f436bc,2020-04-17 08:48:18,Stefan Behnel,Merge branch '0.29.x',['Cython/Compiler/ExprNodes.py']
16c0ca298eb2ac8b123d43da26d820099c44d0f4,2020-04-17 08:47:25,Stefan Behnel,"Clear ""self.index_temps"" after cleanup to avoid keeping dangling temporary state.",['Cython/Compiler/ExprNodes.py']
2d46e8c66b0b40ad05ab7ceb9c0a3c7ea6e2343f,2020-04-17 08:39:03,Stefan Behnel,"Cleanup more generator temps (GH-3522)
* Fixed indexing temps for non-python objects.
* Moved cleanup into release_temps since the temps survived into the result_code.",['Cython/Compiler/ExprNodes.py']
c8e32bb66a51144e0ae9522a1838cb5e22cc8d1d,2020-04-17 08:31:05,Stefan Behnel,Add comment and make sure the type's (empty) list of index temps cannot be changed by accident.,['Cython/Compiler/ExprNodes.py']
765dd499ed9d16697b12b8c3eaec6d753223335b,2020-04-17 07:13:37,Stefan Behnel,Simplify some redundant code by calling the obvious helper function instead.,['Cython/Utility/Optimize.c']
8db370d57c18e52de19191859e12f85605039976,2020-04-17 08:14:26,da-woods,"Cleanup more generator temps (GH-3522)

* Fixed indexing temps for non-python objects.
* Release another temp in PyMethodCallNode.
  Was causing warnings in generators_py.
* Moved cleanup into release_temps since the temps survived into the result_code.",['Cython/Compiler/ExprNodes.py']
caa0f7f445728c386c50d9b88ce5f043ab224c3b,2020-04-17 07:02:02,Stefan Behnel,Merge branch '0.29.x',[]
627ca5aed363b221c26ce0e8614a538d5e362e38,2020-04-17 07:01:32,Stefan Behnel,Update changelog.,['CHANGES.rst']
01451895b9ddb5cb01fde42c392244d50e8ff137,2020-04-17 06:48:43,Stefan Behnel,Convert Py2 str to unicode directly when building fused function signature.,['Cython/Utility/CythonFunction.c']
56c382f64bebb2a8423be37259d028fee9b0dfb6,2020-04-17 06:41:26,Stefan Behnel,Remove accidentally duplicated code line.,['Cython/Utility/CythonFunction.c']
59b200d12f0b632eee36edec6f56dc689ab0736d,2020-04-16 12:57:35,Stefan Behnel,Avoid an unnecessary conditional branch.,['Cython/Utility/TypeConversion.c']
192925d8800421a791a783307118246b9c3d922f,2020-04-15 18:34:39,da-woods,"Prevent fused dispatcher optional arguments being overwritten (GH-3519)

* Prevent fused dispatcher optional arguments being overwritten

If the 5th argument of the regular functions was optional it'd
overwrite the _fused_sigindex default of the dispatcher, causing
type errors at runtime.

closes https://github.com/cython/cython/issues/3511","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FusedNode.py', 'tests/run/fused_def.pyx']"
d6d8b3456253fe1a3d08a628058b51db3eb955a5,2020-04-15 18:15:30,da-woods,"Release temps used for buffer indexing after use (GH-3517)

Closes https://github.com/cython/cython/issues/3430",['Cython/Compiler/ExprNodes.py']
c1f3fd2831083b675acd6b0ee73dddcec5671d31,2020-04-15 18:15:30,da-woods,"Release temps used for buffer indexing after use (GH-3517)

Closes https://github.com/cython/cython/issues/3430",['Cython/Compiler/ExprNodes.py']
34cde7c658208c3782155a7b291918d982b85c77,2020-04-14 07:21:41,Stefan Behnel,"Mention ""cython_freeze"" in the embedding docs page.",['docs/src/tutorial/embedding.rst']
b03e157de151f35aaab3246c094685c192c7a278,2020-04-14 07:10:52,Stefan Behnel,Add a stub documentation page about embedding Cython modules in C/C++ applications.,"['docs/src/tutorial/embedding.rst', 'docs/src/tutorial/index.rst']"
2fcfd544f25411f14ddd3387d81be04645c4a134,2020-04-13 20:10:23,Stefan Behnel,Update changelog.,['CHANGES.rst']
66e47e8daeb38877b7d3a137fd574f3326e067b9,2020-04-13 20:05:26,da-woods,"Drop unused code-paths associated with ""if cython.compiled"" early (GH-3507)

This allows things to work like:
    # in pxd file
    from libc.math cimport sin

    # in py file
    if not cython.compiled:
        from math import sin  # previously failed with cython compile
           # error because it was assigning to a cdef name

This seems worthwhile because it makes it easier to write code
that re-assigns cdef names and so works in both modes.","['Cython/Compiler/ParseTreeTransforms.py', 'tests/compile/cython_compiled_folding.pxd', 'tests/compile/cython_compiled_folding.py']"
3ff468555338e203397c52b43a1f64627ad3443e,2020-04-13 06:32:50,Stefan Behnel,Reduce some overhead in the fused function selection code.,['Cython/Utility/CythonFunction.c']
8c7c5a471c38012303452fd2dd09485fa43aead8,2020-04-13 06:04:53,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Utility/CythonFunction.c']"
b3c2e0d6791378a7361a1cc731ff93728b6a3d16,2020-04-11 17:16:55,Stefan Behnel,"Prevent calling PyObject_GC_Track() in __Pyx_CyFunction_New() when instantiating a fused function before the object fields of the fused function subtype are fully initialised.
See https://bugs.python.org/issue38392
Closes GH-3215.
Supersedes GH-3216.","['CHANGES.rst', 'Cython/Compiler/ExprNodes.py', 'Cython/Utility/CythonFunction.c']"
acd3fdcb93261d3ce245b6359c6b1684f6ac2782,2020-04-13 05:37:52,Stefan Behnel,Fix a reference leak when PyList_Append() fails.,['Cython/Utility/CythonFunction.c']
bf61b1c5871346d38134eabd07405cafee497fa2,2020-04-13 05:24:54,Stefan Behnel,Fix error label name.,['Cython/Utility/CythonFunction.c']
7216a5b6cd153629e95a909084904478c72a1fd4,2020-04-12 21:08:48,Stefan Behnel,Update changelog.,['CHANGES.rst']
ce0806ec558b91a91a56677327ba010b99ee9d11,2020-04-12 20:37:25,Stefan Behnel,Merge branch '0.29.x',"['.travis.yml', 'CHANGES.rst']"
b7438cab32a6dcb8b634cb216b6ed556ffd56b70,2020-04-12 20:05:38,Stefan Behnel,Make travis install script fail on intermediate errors.,['.travis.yml']
694cb93bcd227684fe7e84b06f9f26cee1162353,2020-04-10 16:39:18,Stefan Behnel,Debug conda issues on travis.,['.travis.yml']
7fcf0d8435e02ab30466274856bf21cc8501cd15,2019-06-01 12:21:48,Stefan Behnel,"Add missing ""@cython.binding"" decorator for Python code.","['CHANGES.rst', 'Cython/Shadow.py']"
af3f8d4871c9493fc432bbfb2e02c34c26686903,2020-04-12 15:25:19,Stefan Behnel,Fix missing error handling in non-CPython code.,['Cython/Utility/CythonFunction.c']
059e53c1d3b07b6f30b6fbc5e0db1164163f1c0a,2020-04-12 16:51:03,Stefan Behnel,Sprinkle lots of branch prediction hints in places where exceptions are being handled or otherwise exceptional cases occur.,"['Cython/Utility/AsyncGen.c', 'Cython/Utility/Builtins.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/FunctionArguments.c']"
791605d25c6798c125ec213ac62ffd5360442912,2020-04-12 15:42:37,Stefan Behnel,Simplify some decref-set patterns using the __Pyx_Py_XDECREF_SET() macro.,"['Cython/Utility/Coroutine.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ModuleSetupCode.c']"
326a00e193b7bffe395e14a5b1eaabd3d5137879,2020-04-12 15:25:19,Stefan Behnel,Fix missing error handling in non-CPython code.,['Cython/Utility/CythonFunction.c']
92a2da00a769a267139325dfe058d8b37b0929dc,2020-04-12 14:29:18,da-woods,"Fixed all assignments being added to the module in the limited API (GH-3501)

Mainly helps for adding attributes to classes, but undoubtedly fixes other things too.",['Cython/Compiler/ExprNodes.py']
46bdd807306b30677772537f1e740eef1e6fd36a,2020-04-12 12:27:41,Stefan Behnel,Remove dead fallback code: inspect.getcallargs() was added in Py2.7.,['Cython/Build/Inline.py']
8ee6e86e1d634c2ea6b4b0d37c09a744a184bb6d,2020-04-11 21:21:28,Stefan Behnel,Update changelog.,['CHANGES.rst']
008bc53c45d1131d0eedf5c1fe276f5808911681,2020-04-11 21:16:18,Matthew Edwards,"Add partitioning and sorting operations to libcpp.algorithm (GH-3202)

* Add is_partitioned and partition to libcpp.algorithm
* Add is_sorted and is_sorted_until to libcpp.algorithm
* Add partition_copy, stable_partition, and partition_point to libcpp.algorithm
* Move tests for sort and partial_sort into cpp_stl_algo_sorting_ops, add greater to libcpp.functional
* Add partial_sort_copy to libcpp.algorithm
* Add stable_sort to libcpp.algorithm
* Add nth_element to libcpp.algorithm
* Add missing except specifiers in libcpp.algorithm","['Cython/Includes/libcpp/algorithm.pxd', 'Cython/Includes/libcpp/functional.pxd', 'tests/run/cpp_stl_algo_partitioning_ops.pyx', 'tests/run/cpp_stl_algo_sorting_ops.pyx', 'tests/run/libcpp_algo.pyx']"
1582d97d44b9dbe9b89e9ec6e7e979ae73e3b583,2020-04-11 19:43:59,Stefan Behnel,Update changelog.,['CHANGES.rst']
fcb44032968d8893ead5c63c7554d293d370ec1b,2020-04-11 19:32:13,Stefan Behnel,Fix refleak in limited-api case for cross-module shared extension types and store them correctly as PyTypeObject* instead of a generic (and unusable) PyObject*.,"['Cython/Compiler/ModuleNode.py', 'Cython/Utility/CommonStructures.c']"
017075a115314d39982dea493fc139ac1e4c5925,2020-04-11 19:09:40,Stefan Behnel,Remove incorrect error handling in limited-api case.,['Cython/Compiler/ModuleNode.py']
ae9ee53c7a1c3682cd5d8ef1cabc54203e867419,2020-04-11 18:43:17,da-woods,"Reduce user expectations for the limited API support in the changelog (GH-3500)

The current wording implies that users can expect it to work, which isn't really the current state.
It seems better not to claim too much until it's a bit more advanced.",['CHANGES.rst']
3c1fef45b0db52fdbe36a9e4ba7e41c53fa8e91f,2020-04-11 17:36:35,Stefan Behnel,Update changelog.,['CHANGES.rst']
5bd451d35ca7685c2f9137809e2f20601469ddf7,2020-04-11 17:28:26,Stefan Behnel,Require Py3.3 as the minimum stable ABI when using the limited C-API.,['Cython/Utility/ModuleSetupCode.c']
c964bfd3c64d3e0816dd6ac1d61f974e7f74aed5,2020-04-11 17:16:55,Stefan Behnel,"Prevent calling PyObject_GC_Track() in __Pyx_CyFunction_New() when instantiating a fused function before the object fields of the fused function subtype are fully initialised.
See https://bugs.python.org/issue38392
Closes GH-3215.
Supersedes GH-3216.","['Cython/Compiler/ExprNodes.py', 'Cython/Utility/CythonFunction.c']"
4095f032ef78dbe9ccefd6a19802da56e05d99f4,2020-04-11 11:02:30,Stefan Behnel,"Assume that code passed into cython.inline() is always NumPy 1.7+ clean, so that we can get rid of the C compiler warning about deprecated NumPy API usage.",['Cython/Build/Inline.py']
5b2a3af1087de97bc525ef7e5c1e1f589883aa56,2020-04-11 10:30:12,Stefan Behnel,Add cython.inline() test that repeatedly uses the same code.,['Cython/Build/Tests/TestInline.py']
cccfa3decba1b2e16a3edaeb8d65415637972bb2,2020-04-11 10:27:06,Stefan Behnel,Skip numpy inline test rather than discarding it if numpy is not installed.,['Cython/Build/Tests/TestInline.py']
10c2fa4fa5de9b10f186a864067de1ac6f621952,2020-04-11 10:08:32,Stefan Behnel,"Set macos deployment target version in travis builds.
Revert: Downgrade XCode on travis for Py2 to see if that fixes the clang build problems.",['.travis.yml']
da8edd3793f32d2c071586e6f305513f718967bf,2020-04-11 09:49:06,Stefan Behnel,Downgrade XCode on travis for Py2 to see if that fixes the clang build problems.,['.travis.yml']
702f49fc52fb797e0dea3a79f8f1d9dd8f2713a6,2020-04-11 07:56:24,Stefan Behnel,"Try to resolve clang++ compilation issues on travis/macos. Apparently, CXXFLAGS are not being looked at.",['.travis.yml']
188ca7f9b873dc8b702a704da9ea83299a4e1f29,2020-04-11 07:47:01,Stefan Behnel,"Add __Pyx_IS_TYPE() macro to mimic the new ""Py_IS_TYPE()"" macro in CPython 3.9 that replaces the ""Py_TYPE() == …"" type check pattern.","['Cython/Compiler/Nodes.py', 'Cython/Utility/AsyncGen.c', 'Cython/Utility/Coroutine.c', 'Cython/Utility/FunctionArguments.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Optimize.c']"
e7ff9bb5e1875276f6142686ce595522bbc175a8,2020-04-11 07:06:28,Stefan Behnel,"Disable ""unicode_imports"" test in Py2 because it's too fiddly to get working on Windows/appveyor, also because Py2 distutils requires module names to be byte strings.","['runtests.py', 'tests/run/unicode_imports.srctree']"
09e128bef02f9c03e020fd686af0bdaa6b741716,2020-04-11 06:49:07,Stefan Behnel,Downgrade travis macos image to 10.3 to see if that fixes the Py2 builds.,['.travis.yml']
7a8e8890b825c4b50a3dce2f897081beac4fbd79,2020-04-10 19:49:48,Stefan Behnel,"Use newer ""libc++"" for macos tests instead of deprecated ""libstdc++"".",['.travis.yml']
a9fb77681e41810052df0b41b25abb12738bb8f3,2020-04-10 19:10:46,Stefan Behnel,Fix cython.inline() in Py3.4 by making it use the legacy fallback code for extension module loading.,['Cython/Build/Inline.py']
02a6a71386f125d27709dc93287781cf97f76d9a,2020-04-10 19:03:00,Stefan Behnel,Fix unicode iteration in the limited C-API.,['Cython/Utility/ModuleSetupCode.c']
df88d3aadf82e3a60a20d3163ce2e6e7fdd992ed,2020-04-10 17:20:23,Stefan Behnel,Remove add_dll_directory() calls in cython.inline() again to see if it's really needed after fixing the import procedure.,['Cython/Build/Inline.py']
7b59e3b7ca542daa9222bf2f71f9b05e39166476,2020-04-10 17:19:02,Stefan Behnel,Clean up some code in cython.inline() implementation.,['Cython/Build/Inline.py']
4e785d425f27f079bf2f6bba1381217fac4f5da3,2020-04-10 17:11:38,Stefan Behnel,Try to make cython.inline() tests pass in Py3.8 on Windows by adhering to the recommended module loading pattern.,['Cython/Build/Inline.py']
8ae11f5c9b6ec07f1d66edd7ee541724407baf77,2020-04-10 16:39:18,Stefan Behnel,Debug conda issues on travis.,['.travis.yml']
157f30e595b1d29c7160ff992ab8bf96f0032bad,2020-04-10 16:31:52,Stefan Behnel,Repair the PEP-393 defines under the limited C-API.,['Cython/Utility/ModuleSetupCode.c']
0c01ea5d8eb1d8852d4aff47a73bf8005f4a26f1,2020-04-10 15:08:09,Stefan Behnel,Prepare automatically setting Py_LIMITED_API (once it's ready).,"['Cython/Compiler/ModuleNode.py', 'Cython/Utility/ModuleSetupCode.c']"
0f03e47d6ca8d90d279597c6c7eccd3c4f579371,2020-04-10 14:02:13,Stefan Behnel,Minor travis script cleanups.,['.travis.yml']
2f269faf9ff0b77ebea7b381c74606ea263383f5,2020-04-10 10:27:57,Stefan Behnel,Update changelog.,['CHANGES.rst']
f19db07c43f745ba6af83c6b61ce7f85d149827c,2020-04-10 10:04:44,Stefan Behnel,"For srctree tests, include the test directory in the PYTHONPATH of subprocesses, but not in the own sys.path of the test runner.",['runtests.py']
93b6cd3dfd0876b8a5bf9137e2d964f0b2051553,2020-04-10 09:53:52,Stefan Behnel,"Register the absolute module path in cython.inline() under Windows, not the (potentially) relative path.",['Cython/Build/Inline.py']
f5ab2f42b61ef2703f5a20293a98947be47ff176,2020-04-10 09:49:44,Stefan Behnel,Prepare 3.0a1 release.,['Cython/Shadow.py']
db0793907104b689fce457b03a1418712edf926b,2020-04-10 09:33:29,Stefan Behnel,Try to fix stackless setup in travis config.,['.travis.yml']
5717ad0c8c9625db292d26fe987d8e88da87db68,2020-04-10 08:49:18,Stefan Behnel,Upgrade XCode version on travis to see if it fixes the build.,['.travis.yml']
b33d49416f03998226b08a04f297e81ec6089d84,2020-04-10 08:14:30,Stefan Behnel,Update documentation on deprecated NumPy C-API warnings.,['docs/src/userguide/source_files_and_compilation.rst']
e2dcfb588a8bc0530287255e61a5f33d670ea23e,2020-04-10 08:22:15,Stefan Behnel,"Fix fix unicode normalisation test in Windows. (GH-3194)

* Rewrite the test code generation for the unicode normalisation test, making sure that we always write UTF-8 source files.

* Fix failures to print the compilation status for modules with non-ascii names (on Windows).

* Help with remote debugging environment encoding problems in test runs, by extending the output of the ""buildenv"" pseudo-test.

* Explicitly set I/O encoding for subprocesses in parallel cythonize() runs to make the test runner workers inherit it (instead of defaulting to ASCII in Py2).

* Use a Latin-1 Unicode character in the test for Unicode module names to make it more compatible with Windows file system character sets (such as CP-1252).

* Properly decode source and module file name from the FS encoding in Py2. Previously, with ASCII module names, UTF-8 decoding always worked, but wasn't correct.

* Hack around a distutils 3.[5678] bug on Windows for unicode module names.
https://bugs.python.org/issue39432

* Try to fix cython.inline() on Windows with Py3.8+ where the DLL loading requires an explicit registration of the extension output directory.
Closes GH-3450.","['Cython/Build/Dependencies.py', 'Cython/Build/Inline.py', 'Cython/Compiler/Main.py', 'Cython/TestUtils.py', 'appveyor.yml', 'runtests.py', 'tests/compile/buildenv.pyx', 'tests/run/unicode_identifiers_normalization.srctree', 'tests/run/unicode_imports.srctree']"
66a8a8e84b63e44e0c50c60779953d03097700b6,2020-04-09 19:02:17,Volker-Weissmann,"Better diagnostics for non-working cygdb installations. (GH-3489)

If your installation is faulty, cygdb will now print the filepath of the code that caused an exception, and the path of the python interpreter will be printed for better debugging.",['Cython/Debugger/Cygdb.py']
35ecaccb626f7f3ebf54cf6ec93bda36f05a72b1,2020-04-09 06:58:18,will-ca,Mention __init__.pxd in tutorial documentation. (GH-3439),['docs/src/tutorial/pxd_files.rst']
b5b314cf69294b51c7708e5841815c4a983b3367,2020-04-09 06:40:02,Alexey Stepanov,"Build manylinux2010 wheels instead of older manylinux1 (GH-3355)

See https://github.com/cython/cython/issues/3354",['Makefile']
8d817fc0881712764f7e2dd9e16d5d45b7f24815,2020-04-09 06:34:40,will-ca,Prevent generating code hash twice for `cython.inline()`. (GH-3495),['Cython/Build/Inline.py']
34714637936756abb42a5732b08167b767945087,2020-04-08 15:41:12,Stefan Behnel,Avoid calling PySequence_List() in some cases if the argument is a new list already. (GH-3494),"['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Optimize.py', 'Cython/Utility/ModuleSetupCode.c']"
983192298f91352b6159dcd839c607d962bd0a4e,2020-04-08 07:16:40,da-woods,"Make the fused dispatch function safe w.r.t. user defined wraparound/boundscheck (GH-3493)

The directives are currently inherited from user code, which is not correct, but it seemed difficult to reliably change the directives applied to the `__pyx_fused_cpdef` dispatch function, so instead the code was changed to be independent.

Fixes https://github.com/cython/cython/issues/3492","['Cython/Compiler/FusedNode.py', 'tests/compile/fused_wraparound.pyx']"
c43bd7771fe6fe0064cdfa276f49fd693c277226,2020-04-07 19:15:18,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
33cfd760a9d5370ef96e3b61a452d7f885a6f420,2020-04-07 19:15:16,Stefan Behnel,Update changelog.,['CHANGES.rst']
30b6573ab5ea528099eb7d389f0f9da775c51c50,2020-04-07 19:12:12,Stefan Behnel,Update changelog.,['CHANGES.rst']
e997bb99ddc0d26e9a95ad53c2fa52f4932b93ef,2020-02-15 22:56:58,Omer Ozarslan,Add tests for std::move wrapper,['tests/run/cpp_move.pyx']
097e2be1dfc208f29f1954db706b8fb396dd0b4d,2020-02-15 22:56:30,Omer Ozarslan,Add std::move wrapper to utility library,['Cython/Includes/libcpp/utility.pxd']
30c891e0dc36a553455df9064ecb1f13414a12d2,2020-04-07 09:37:16,Stefan Behnel,Fix test compilation in MSVC (which rejects literal division by zero).,['tests/run/test_asyncgen.py']
3d9459c01f9d634818ae72ddd44ea2d9b8bf5b70,2020-04-07 09:17:44,Stefan Behnel,Merge some runtime compilation runs into a single one in the CPython fstring test to reduce the overall runtime of the test.,['tests/run/test_fstring.pyx']
59b0443133341b9fdb23909fecf9ed2d96904041,2020-04-07 07:27:03,Stefan Behnel,"Avoid creating unused ""__defaults__"" getter functions for fused dispatch function. (GH-3491)

Closes GH-3481.","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FusedNode.py']"
f364d6dd54eb879171fdb98dd744cb571edd4d6a,2020-04-06 19:06:24,Stefan Behnel,Fix buildenv test in Py2.,['tests/compile/buildenv.pyx']
c91f6ee58b83f66f04f5085734104ceef4571b3a,2020-04-06 18:58:02,Stefan Behnel,Make sure that the test runner passes the I/O encoding down into end-to-end srctree tests.,['runtests.py']
8444288c5a53924ad7454f4461bbb3413aebf302,2020-04-06 18:50:35,Stefan Behnel,Make embed test more debuggable by printing the path setup and the build output on failure.,"['Demos/embed/Makefile', 'runtests.py']"
1338dda1c63dfd605ef41620e8a7b99f7a864d08,2020-04-06 18:07:11,Stefan Behnel,Try if a random hash seed leads to a better sharding distribution in the test runner.,['runtests.py']
e71f8ee4537e02de1663eac097fb66035ddff2c8,2020-04-06 18:04:27,Stefan Behnel,"Include Python/system paths in ""buildenv"" test output to help with debugging search path problems.",['tests/compile/buildenv.pyx']
5c5d70e7a7f657d94ba1c81767cf313ca58a1fec,2020-04-06 17:46:19,Stefan Behnel,Use CPython provided Py_DecodeLocale() function for embedded CLI argument decoding in Py3.5+.,['Cython/Utility/Embed.c']
23a609380260afa19999d045fbdbee7a7ca39f3d,2020-04-06 14:28:26,Stefan Behnel,"Bring async generator implementation en par with current CPython 3.9 alpha.

* allow closing async generators that are already closed
https://bugs.python.org/issue39606

* Prevent double awaiting of async iterator
https://bugs.python.org/issue39386

* Fix ag_running; prohibit running athrow/asend/aclose in parallel
https://bugs.python.org/issue30773

* Fix asynchronous generators to handle GeneratorExit in athrow()
https://bugs.python.org/issue33786

* Ignore GeneratorExit in async_gen_athrow_throw
https://bugs.python.org/issue35409

* make async_generator_athrow object tolerant to throwing exceptions
https://bugs.python.org/issue38013","['Cython/Utility/AsyncGen.c', 'tests/run/test_asyncgen.py']"
a3b1cf6f6785da42ddcfecf4778ac0dd3206bad6,2020-04-03 16:45:57,Stefan Behnel,Explicitly test simple (and optimised) string concatenation in f-strings.,['tests/run/fstring.pyx']
7e004e0a36a8c362a568a5b47a26bfde6f98d621,2020-04-03 16:08:33,Stefan Behnel,Avoid C compiler warning when refnanny is not used.,['Cython/Utility/ObjectHandling.c']
a6986a9ee7c4e51d55df70d95b19c86501580b21,2020-04-03 17:10:44,Volker-Weissmann,"Fixed gdb C call to free() that broke ""cy exec"". (GH-3487)",['Cython/Debugger/libpython.py']
3469f0c7fe69e47e80fc2c685b649b70cb2c1f8b,2020-04-03 06:22:20,sairam4123,Modernise the variable increment in the pyprimes demo script (GH-3486),['Demos/pyprimes.py']
2ca3f569254ddee7d1561d102ccca0c9d3250c91,2020-04-02 19:17:52,da-woods,"Relaxed some of the checks on calling fused functions (GH-3381)

Relaxed some of the checks of fused functions to be consistent with general CyFunctions.

```
 # cython: binding=True
def f(arg):
  pass

class C:  # or cdef class...
  f = f
  def g(self, ...):
    pass

C.f(something) or C().f() # doesn't enforce any checks on the type of arg -
 # with a fused function it does.

C.g(something) # assumes that self is ""C"" (at least for a cdef class)
 # but doesn't check it. A fused function enforces that it is C.

C.f() # fails with a fused function claiming too few arguments, even though
 # default arguments may make it a valid call
```

Obviously removing checks does make things a little less safe, but it
is consistent with the more general function behaviour. (I'm doing
this as part of a broad plan to abuse fused functions to be a bit
cleverer about decorators, but I don't think the motivation hugely
matters for this change)","['Cython/Utility/CythonFunction.c', 'tests/run/fused_bound_functions.py']"
830bdfac310935ff0a4b68a640bd9fcc7624e73c,2020-04-02 08:12:48,Stefan Behnel,Update changelog.,['CHANGES.rst']
f5f64f5b0ae63db230c61f99460b9639965c8e46,2020-04-02 08:09:40,Stefan Behnel,Fix return type assumption about optimised str() call in Py2.,['Cython/Compiler/Optimize.py']
5ab92ce56e3826bb0743b32b2f8a2270bf199222,2020-04-02 06:30:27,Stefan Behnel,Update changelog.,['CHANGES.rst']
76043d6eaaaa38c70edc9b5ef827f3a21efac970,2020-04-02 06:27:03,da-woods,"Concatenate strings in place if possible (GH-3451)

Optimized inplace operations for str/unicode so that they're
genuinely done in place if no-one else needs the object. This
is what CPython tries to do (and string concatenation was
a point where it significantly beat Cython at times).

This only works if the types are known at compile time, so with
unknown types CPython will still be faster in some cases.

Note: Uses slightly odd-macro trickery - does modify the input argument too
(although only in places where it shouldn't matter).","['Cython/Compiler/ExprNodes.py', 'Cython/Utility/ObjectHandling.c']"
2c8e7b2204622380c20ee4b1f2a9aa59938fe33a,2020-04-02 05:53:00,William Ayd,Optimize builtin str() calls (GH-3478),"['Cython/Compiler/Optimize.py', 'Cython/Utility/StringTools.c', 'tests/run/strfunction.pyx']"
e9d7fd45a2e829ee93980b1c0612f8476a46431d,2020-04-01 10:59:02,Stefan Behnel,Update changelog.,['CHANGES.rst']
e2d1090fe6f0f67ecf860e218a42dfd257dc88a9,2020-04-01 10:38:09,Stefan Behnel,"Fix branch prediction hints for plain (unlikely/exceptional) ""raise"" statements in if/else clauses that are not preceded by other statements.",['Cython/Compiler/Nodes.py']
6e8c26e2bac199e45afa8e0559a5878e86ed4154,2020-04-01 10:00:58,Stefan Behnel,Update changelog.,['CHANGES.rst']
f42169b85683f7b9b112a61a6ddd9e700b95d74b,2020-04-01 09:53:10,Stefan Behnel,Add test that cascaded assignments support overwriting a variable that is still in use later.,['tests/run/cascadedassignment.pyx']
27b5adbb461675ef775aee46d17b0a6d3b2c047e,2020-04-01 10:08:37,will-ca,"Make fused function dispatch O(n) for `cpdef` functions. (GH-3366)

* Rewrote signature matching for fused cpdef function dispatch to use a pre-built tree index in a mutable default argument and be O(n).

* Added test to ensure proper differentiation between ambiguously compatible and definitely compatible arguments.

* Added test to ensure fused cpdef's can be called by the module itself during import.

* Added test to ensure consistent handling of ambiguous fused cpdef signatures.

* Test for explicitly defined fused cpdef method.

* Add .komodoproject to .gitignore.

* Add /cython_debug/ to .gitignore.

Closes #1385.","['.gitignore', 'Cython/Compiler/FusedNode.py', 'tests/run/fused_cpdef.pyx']"
4fd901849ff30399289ebf6613c81d8075a79cc4,2020-03-31 21:47:55,Stefan Behnel,Avoid relying on signed integer overflow in f-string joining helper function.,['Cython/Utility/StringTools.c']
65f69510e95e5e1205e188c2ebb418d8ba336076,2020-03-31 20:05:21,Stefan Behnel,Disable a saved compiler option in the test runner that cannot currently be changed in the tests directly (only in external compiler runs).,['runtests.py']
ed94b465c5ceabd42e74052e3d164ec9b5d4a946,2020-03-31 20:07:08,da-woods,Cython header file for C++ `std::atomic` type (GH-3469),"['Cython/Includes/libcpp/atomic.pxd', 'tests/run/cpp_stl_atomic.pyx', 'tests/run/libcpp_all.pyx']"
9b4a68fc7a7f7df77bd229ca38e5454fd9d828d4,2020-03-31 09:36:21,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
afb6256a35fa4471f815e69e509a594fc44c6291,2020-03-31 09:33:59,Stefan Behnel,Update changelog.,['CHANGES.rst']
75aeda62c1a2bcdb7a3edc91766f0d3666e4ffd0,2020-03-26 11:06:12,will-ca,"Make `Shadow.inline()` caching account for language version and compilation environment. (GH-3440)

Closes https://github.com/cython/cython/issues/3419","['Cython/Build/Inline.py', 'Cython/Build/Tests/TestInline.py']"
b2833f2ebe7c9567883a0140d68deb2e40d4e09d,2020-03-24 17:36:56,Stefan Behnel,Update somewhat incorrect comment.,['Cython/Utility/FunctionArguments.c']
6c92857ee6efab6e6ade68b142b6bd147ed84ceb,2020-03-24 17:31:27,Stefan Behnel,Remove redundant type check.,['Cython/Utility/FunctionArguments.c']
3b46028af9ed488171fa0881b87f4478791989db,2020-03-24 16:48:11,Stefan Behnel,Avoid using PyUnicode_GET_SIZE() in PEP393 code.,['Cython/Utility/FunctionArguments.c']
ee6d98f42cdcac54a224e7bd1498c13ba2d4adaa,2020-03-31 09:08:37,Stefan Behnel,Update changelog.,['CHANGES.rst']
49257123602bea7327aad532e6c21276deed3ed6,2020-03-31 08:52:42,Stefan Behnel,Add a dedicated test for and/or operators in a boolean context.,['tests/run/if_and_or.pyx']
e1aab098e87b53cf36947189f272959e46060bd6,2020-03-30 18:37:03,Stefan Behnel,"Save ""cache_builtins"" option in test runner to make it changeable in tests.",['runtests.py']
eb036319e44c28fdd73cfc97433b7132f9cb2d74,2020-03-30 18:35:20,Stefan Behnel,Update changelog.,['CHANGES.rst']
86fe881153ca9f784497a445ba03d373f57a3e7b,2020-03-31 08:49:01,da-woods,"Specialize fused function local variables specified with pure-python (GH-3463)

These were previously getting missed. Added code to specialize them and tests to prove it.

Fixes https://github.com/cython/cython/issues/3142

Also fixes https://github.com/cython/cython/issues/3460 - (seems related enough to go in the same PR)","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'tests/run/pure_fused.pxd', 'tests/run/pure_fused.py']"
6a30fecff5decdf20029763afea6183de3177dc3,2020-03-26 11:06:12,will-ca,"Make `Shadow.inline()` caching account for language version and compilation environment. (GH-3440)

Closes https://github.com/cython/cython/issues/3419","['Cython/Build/Inline.py', 'Cython/Build/Tests/TestInline.py']"
7cc572f5ed1380aecb7edaf091f12962aae711ed,2020-03-26 10:46:58,Zackery Spytz,"Add cpython.marshal declarations (GH-3468)

The comments are taken from the C API documentation
(https://docs.python.org/3.8/c-api/marshal.html).","['Cython/Includes/cpython/marshal.pxd', 'tests/run/cython_includes.pyx']"
6d906ae9a63a1588794f86b651f79eb39c08ec3f,2020-03-26 10:29:45,Diego Elio Pettenò,"Use PEP 518 indication for Cython build-time dependency. (GH-3461)

This removes the `setup_requires` reference that AIUI is deprecated, in
favour of the `pyproject.toml` file which is what is supposedly needed nowadays.",['docs/src/userguide/source_files_and_compilation.rst']
4050613c01e1baec929b86b266d2cdb56447dbf5,2020-03-26 08:40:33,Dmitry Shesterkin,Fixed initialization of the array with the list which was broken in GH-3244 (GH-3465),"['Cython/Shadow.py', 'tests/run/pure_py.py']"
48dc1f0169f81ed20c6b374941c2498ec94e57d0,2020-03-25 07:29:59,Dmitry Shesterkin,"Avoid incorrect type calls from cython.declare and cython.cast in Shadow.py (GH-3244)

The following code:
```
# cython: infer_types=True
import cython

@cython.cclass
class Foo:
    a: cython.double
    b: cython.double
    c: cython.double

    def __init__(self, a: cython.double, b: cython.double ,c: cython.double):
        self.a = a
        self.b = b
        self.c = c

def bar():
    l = []
    l.append(Foo(10, 20, 30))

    v = cython.declare(Foo, l[0])
    r = v.a + v.b
    print( r )

    v2 = cython.cast(Foo, l[0]) #Faster - No __Pyx_TypeTest() call
    r = v2.b + v2.c
    print( r )

bar()
```
works fine when compiled and throws an exception when interpreted: `TypeError: __init__() missing 2 required positional arguments: 'b' and 'c'`

It could be fixed if we change implementations as shown in the patch.
Also, added more tests for the cases I'm trying to fix
NB: Removed execution of `test_declare(None)` to make sure that the new `none_declare()` test works instead. `test_declare(None)` doesn't throw exception in pure mode but does it in the native mode

Replacing `hasattr(t, '__call__')` to `callable(t)` in the master branch broke the implementation and the tests because the construction was used to detect typedefs. To fix that I got rid of this check completely and replaced it to exact checks which also simplified the code

Changed `declare` implementation when initializing arguments are not provided. Now it correctly works with typedefs of the user classes and also directly support arrays:
    ```
    >>> EmptyClassSyn = cython.typedef(EmptyClass)
    >>> cython.declare(EmptyClassSyn) is None
    True
    >>> cython.declare(cython.int[2]) is not None
    True
    ```
Added missed return statement to `index_type` which made the following assigment possible:
    ```
        a = cython.declare(cython.int[2])
        a[0] = 1
    ```","['Cython/Shadow.py', 'tests/run/pure_py.py']"
fbf400b58104390064bc01b5f841388fa2c3e014,2020-03-24 18:55:09,Alex Henrie,Mark missing argument errors in argument parsing code as unlikely (GH-3428),['Cython/Compiler/Nodes.py']
606b4f447d098d3f8f169f68696a96418d089e80,2020-03-24 18:45:05,da-woods,Mark view.* extension types as non-imported so that they can be inherited from. (GH-3413),"['Cython/Compiler/CythonScope.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/PyrexTypes.py', 'tests/memoryview/cythonarray.pyx']"
05f7a479f6417716b3de2a9559f2724013af6eba,2020-03-24 18:10:21,da-woods,"Make memoryviews work with cache_builtins=False (GH-3415)

Now they make their own tiny cache of the relevant exceptions at module initialization so they can still access these without the GIL.

closes https://github.com/cython/cython/issues/3406","['Cython/Utility/MemoryView.pyx', 'tests/compile/fused_redeclare_T3111.pyx', 'tests/memoryview/memoryview_cache_builtins.srctree']"
e6723d4d478ea58f620f8600f22b13ec9f4ec497,2020-03-24 18:02:29,Yuan,Add MinGW doc for Python 3.8+ (GH-3454),['docs/src/tutorial/appendix.rst']
8b92bcba349e3ef7d0d8a834c13eedcd02bcb031,2020-03-24 18:00:35,Diego Elio Pettenò,"In the documentation, update references to point at `setuptools`. (GH-3456)

While the directives in the source files are still called `distutils`, the [Python upstream documentation](https://docs.python.org/3/library/distutils.html) does not
recommend using distutils anymore, and rather points at setuptools, so avoid confusing new users by providing confusing legacy usage examples.

Also, this corrects one example in which Extension is imported too late, and would cause annoying errors when running `setup.py`.","['docs/examples/quickstart/build/setup.py', 'docs/examples/tutorial/cython_tutorial/setup.py', 'docs/examples/tutorial/external/setup.py', 'docs/examples/userguide/parallelism/setup.py', 'docs/examples/userguide/sharing_declarations/setup.py', 'docs/examples/userguide/wrapping_CPlusPlus/setup.py', 'docs/src/quickstart/build.rst', 'docs/src/tutorial/clibraries.rst', 'docs/src/tutorial/cython_tutorial.rst', 'docs/src/tutorial/external.rst', 'docs/src/userguide/debugging.rst', 'docs/src/userguide/numpy_pythran.rst', 'docs/src/userguide/numpy_tutorial.rst', 'docs/src/userguide/source_files_and_compilation.rst', 'docs/src/userguide/wrapping_CPlusPlus.rst']"
315fd42669c7c8b7bd051897854f0e53d44b7494,2020-03-24 17:51:11,da-woods,"Make reference counting more type specific by moving it into PyrexTypes (GH-3377)

The idea being that struct-types like memoryviews
can generate their own reference counting code
using a common interface with Python objects.","['Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/FusedNode.py', 'Cython/Compiler/MemoryView.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py']"
ffbecc752470006dafdcb1590c546a870151f880,2020-03-24 17:40:36,Stefan Behnel,Remove redundant pointer comparison (already done as a shortcut before this loop).,['Cython/Utility/FunctionArguments.c']
3a4fe5ec8e76fca3ed6b0fb7d1d243a3a1c7c269,2020-03-24 17:36:56,Stefan Behnel,Update somewhat incorrect comment.,['Cython/Utility/FunctionArguments.c']
64440bdc31019f05795a0d2a9ebe1f7cf4173b5f,2020-03-24 17:31:27,Stefan Behnel,Remove redundant type check.,['Cython/Utility/FunctionArguments.c']
3c0b9b6bf042590461ab8d8b367f83320b062b0d,2020-03-24 16:48:11,Stefan Behnel,Avoid using PyUnicode_GET_SIZE() in PEP393 code.,['Cython/Utility/FunctionArguments.c']
3d343a1cb7c57c8db90a7bfa178899b53e929092,2020-03-24 15:35:42,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
c8425604fc3e4ea846016689942fa98e886b5f4f,2020-03-23 14:04:02,Stefan Behnel,Prepare release of 0.29.16.,['Cython/Shadow.py']
81dcf8ea6177285e5a01bb8210928652a9b34b09,2020-03-23 14:02:14,Stefan Behnel,Update changelog.,['CHANGES.rst']
6e9492ca41dccf1adaf0683da01ae69be95add74,2020-03-23 13:45:21,Zackery Spytz,"Add iterobject.pxd (GH-3452)

The comments are taken from the C API documentation
(https://docs.python.org/3.8/c-api/iterator.html).","['Cython/Includes/cpython/iterobject.pxd', 'tests/run/cython_includes.pyx']"
e5fb7d013f00a3efa7ddc9ace476b10a0ba8092b,2020-03-23 13:45:21,Zackery Spytz,"Add iterobject.pxd (GH-3452)

The comments are taken from the C API documentation
(https://docs.python.org/3.8/c-api/iterator.html).","['Cython/Includes/cpython/iterobject.pxd', 'tests/run/cython_includes.pyx']"
e6067f09150900ffd6a3d315188f6b7e9af7c23b,2020-03-23 09:56:17,Stefan Behnel,"Merge pull request #2864 from cython/gh2564_enable_binding: Enable ""binding"" directive by default","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Options.py', 'docs/src/userguide/source_files_and_compilation.rst', 'tests/buffers/bufaccess.pyx', 'tests/memoryview/memoryview.pyx', 'tests/memoryview/memslice.pyx', 'tests/run/cdef_multiple_inheritance.pyx', 'tests/run/cpdef_nogil.pyx', 'tests/run/extstarargs.pyx', 'tests/run/function_as_method_T494.pyx', 'tests/run/function_as_method_py_T494.py', 'tests/run/isnot.pyx', 'tests/run/knuth_man_or_boy_test.pyx', 'tests/run/pstats_profile_test.pyx', 'tests/run/pstats_profile_test_pycfunc.pyx', 'tests/run/staticmethod.pyx']"
f055a66ca99f0eee874995312ca0392698238ebb,2020-03-22 19:40:16,Stefan Behnel,"Try to work around some test issues in PyPy3:
- CyFunction seems to lead to deeper stacks on recursion.
- Passing integers through call layers can end up creating new int objects instead of keeping the identical objects ('is' test fails)'.","['tests/run/isnot.pyx', 'tests/run/knuth_man_or_boy_test.pyx']"
ff2dfa0b5a5f2cb1a2e6636f5c54f69bd16ed492,2020-03-22 16:54:49,Stefan Behnel,Merge branch 'master' into gh2564_enable_binding,"['.travis.yml', 'CHANGES.rst', 'Cython/Build/Dependencies.py', 'Cython/Build/Inline.py', 'Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Main.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Naming.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/Pythran.py', 'Cython/Compiler/Visitor.py', 'Cython/Includes/cpython/descr.pxd', 'Cython/Includes/cpython/genobject.pxd', 'Cython/Includes/cpython/number.pxd', 'Cython/Includes/cpython/object.pxd', 'Cython/Includes/cpython/pylifecycle.pxd', 'Cython/Includes/cpython/slice.pxd', 'Cython/Includes/libc/math.pxd', 'Cython/Includes/libcpp/numeric.pxd', 'Cython/Includes/libcpp/utility.pxd', 'Cython/Includes/numpy/__init__.pxd', 'Cython/Shadow.py', 'Cython/TestUtils.py', 'Cython/Utility/Builtins.c', 'Cython/Utility/CommonStructures.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/Overflow.c', 'Cython/Utility/Profile.c', 'Makefile', 'README.rst', 'appveyor.yml', 'docs/examples/tutorial/numpy/convolve2.pyx', 'docs/src/tutorial/strings.rst', 'docs/src/userguide/extension_types.rst', 'docs/src/userguide/memoryviews.rst', 'docs/src/userguide/source_files_and_compilation.rst', 'runtests.py', 'setup.cfg', 'setup.py', 'tests/build/dotted.filename.modules.pxd', 'tests/build/dotted.filename.modules.pyx', 'tests/limited_api_bugs.txt', 'tests/pypy2_bugs.txt', 'tests/pypy_bugs.txt', 'tests/pypy_crash_bugs.txt', 'tests/pypy_implementation_detail_bugs.txt', 'tests/run/always_allow_keywords_T295.pyx', 'tests/run/async_def.pyx', 'tests/run/callargs.pyx', 'tests/run/cdivision_CEP_516.pyx', 'tests/run/cpp_move.pyx', 'tests/run/cpp_operator_exc_handling.pyx', 'tests/run/cpp_operator_exc_handling_helper.hpp', 'tests/run/cpp_stl_conversion.pyx', 'tests/run/cpp_stl_numeric_ops.pyx', 'tests/run/cython_includes.pyx', 'tests/run/fused_def.pyx', 'tests/run/if_else_expr.pyx', 'tests/run/importfrom.pyx', 'tests/run/kwargproblems.pyx', 'tests/run/list_pop.pyx', 'tests/run/modop.pyx', 'tests/run/numpy_bufacc_T155.pyx', 'tests/run/numpy_cimport.pyx', 'tests/run/numpy_common.pxi', 'tests/run/numpy_parallel.pyx', 'tests/run/numpy_subarray.pyx', 'tests/run/numpy_test.pyx', 'tests/run/pep448_test_extcall.pyx', 'tests/run/powop.pyx', 'tests/run/pure.pyx', 'tests/run/pure_fused.pxd', 'tests/run/pure_fused.py', 'tests/run/py_hash_t.pyx', 'tests/run/pyclass_dynamic_bases.pyx', 'tests/run/sequential_parallel.pyx', 'tests/run/test_coroutines_pep492.pyx', 'tests/run/test_unicode_string_tests.pxi', 'tests/run/trashcan.pyx', 'tests/windows_bugs.txt']"
4dd7c18de76cb5c90a5168fba35990600307e642,2020-03-21 15:48:11,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
e9c0ae4b5ea173fca8f65d79ee990d892bff04da,2020-03-21 15:47:54,Stefan Behnel,Update changelog.,['CHANGES.rst']
6642d167837ebf03f31cd4298f3850b851441902,2020-03-21 15:39:27,da-woods,Only use PyUnicode_Concat on unicode object operations (GH-3433),"['Cython/Compiler/ExprNodes.py', 'tests/run/test_unicode_string_tests.pxi']"
033e68643732fc550b82f03f58a2c84204cd2ea3,2020-03-21 14:55:59,will-ca,"Slight adjustment to documentation of ""quiet"" parameter for cythonize(). (GH-3441)",['Cython/Build/Dependencies.py']
226727b76942f6ee47a813cc89fcd41a8fa4692a,2020-03-01 10:56:30,Zackery Spytz,"Add fpclassify() and FP_* constants to math.pxd

Closes #2514.",['Cython/Includes/libc/math.pxd']
f80d0ae76af23b83bf3b637d79f5c9d2e382628d,2020-03-09 16:53:41,Zackery Spytz,"Add genobject.pxd

The comments are taken from the C API documentation
(https://docs.python.org/3.8/c-api/gen.html).","['Cython/Includes/cpython/genobject.pxd', 'tests/run/cython_includes.pyx']"
2d71e7f059fdf10692ca545e95c9db8683df3b67,2020-03-11 00:10:55,Thomas A Caswell,BLD: update the trove classifier to include python 3.8,['setup.py']
d0d367369ec91450724ada8c90f1f41605d674ba,2020-03-21 15:39:27,da-woods,Only use PyUnicode_Concat on unicode object operations (GH-3433),"['Cython/Compiler/ExprNodes.py', 'tests/run/test_unicode_string_tests.pxi']"
eab4e09a7034ea93f437e6de34bf411143d91c77,2020-03-21 14:55:59,will-ca,"Slight adjustment to documentation of ""quiet"" parameter for cythonize(). (GH-3441)",['Cython/Build/Dependencies.py']
8af3d52d6b9c8a1751b6d02b158fea9eb46366a9,2020-03-01 10:56:30,Zackery Spytz,"Add fpclassify() and FP_* constants to math.pxd

Closes #2514.",['Cython/Includes/libc/math.pxd']
588847bebce4bc3d925bd353423c047151b446d7,2020-03-09 16:53:41,Zackery Spytz,"Add genobject.pxd

The comments are taken from the C API documentation
(https://docs.python.org/3.8/c-api/gen.html).","['Cython/Includes/cpython/genobject.pxd', 'tests/run/cython_includes.pyx']"
0545a9fb56e14c3fb072793fca9c4acdbe9a9028,2020-03-11 00:10:55,Thomas A Caswell,BLD: update the trove classifier to include python 3.8,['setup.py']
ec715b6a26f8280f3ecdabb2e602f5207cdd1eee,2020-03-21 14:32:01,Zackery Spytz,"Add missing declarations to slice.pxd (GH-3411)

PySlice_Unpack() and PySlice_AdjustIndices() were missing from
slice.pxd.

The comments are taken from the C API documentation
(https://docs.python.org/3.8/c-api/slice.html).",['Cython/Includes/cpython/slice.pxd']
e66d9b5a7ed6dfe309be2fe95a98da89cd5905f2,2020-03-21 14:32:01,Zackery Spytz,"Add missing declarations to slice.pxd (GH-3411)

PySlice_Unpack() and PySlice_AdjustIndices() were missing from
slice.pxd.

The comments are taken from the C API documentation
(https://docs.python.org/3.8/c-api/slice.html).",['Cython/Includes/cpython/slice.pxd']
ba53f9398bb1cb20e201bfe080d295406d2300fa,2020-03-21 13:52:15,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/Code.py', 'tests/run/if_else_expr.pyx']"
8bc46f37e55a3e36648ce522afa1f5e0d5f7934d,2020-03-21 13:51:48,Stefan Behnel,"Enable temps for C functions by using function pointers instead.
Closes GH-3418.","['CHANGES.rst', 'Cython/Compiler/Code.py', 'tests/run/if_else_expr.pyx']"
cdbd7923d60edce6cf280ebbec25dbfd01e826c0,2020-03-21 13:33:10,da-woods,"Updated documentation of multiple inheritence rules (GH-3422)

Original change https://github.com/cython/cython/pull/1927",['docs/src/userguide/extension_types.rst']
bffa63bdf9e2f5048592e4a9665c88296f774d40,2020-03-21 12:15:52,Stefan Behnel,"Exclude failing ""complex.h"" test on Windows, where old MSVC versions lack ""<complex.h>"" entirely and more recent versions fail to compile the test.",['tests/windows_bugs.txt']
b0e53e291f36a36f556bfb0195bd0e329c9049db,2020-03-21 08:12:29,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
6c9996c605d59ad2cc33c952b836f4c7387e3071,2020-03-21 08:12:14,Stefan Behnel,Update changelog.,['CHANGES.rst']
d05e8bb3be87d54dbe888ccd6c495c9656c3fa02,2020-03-21 08:01:47,serge-sans-paille,Adapt to Pythran update: __builtin__ -> builtins (GH-3308),['Cython/Compiler/Pythran.py']
2b3546fe9958b0935bc5189b9687403f8235b22d,2020-03-21 08:09:15,Stefan Behnel,Update changelog.,['CHANGES.rst']
2b124b5a8940e3c02e374d5bfabb2198c2da7f9b,2020-03-21 08:02:56,Stefan Behnel,Merge branch '0.29.x' of git+ssh://github.com/cython/cython into 0.29.x,"['Cython/Utility/Exceptions.c', 'Cython/Utility/ModuleSetupCode.c']"
97d631020a9bc985b8e6f013a39094712e85e1ec,2020-03-21 08:01:47,serge-sans-paille,Adapt to Pythran update: __builtin__ -> builtins (GH-3308),['Cython/Compiler/Pythran.py']
92625467ee510c54438a6b79824077ce6ae7864a,2020-03-20 17:24:10,da-woods,"Enable pypy as a required Travis test (GH-3392)

Reasoning being that this make it easier to catch pypy3
regressions as they happen.

* Fixed some very simple pypy3 failures (largely to do with
  different exception strings)
* Splits pypy3_bugs.txt into three files
  - one for bugs that cause hard crashes (which we don't want to
    run in Travis at all);
  - one for bugs that are probably unfixable because they're just
    due to implementation details (e.g. when destructors are
    called).
  - all other bugs remain in pypy3_bugs.txt
  (The categorization has been done fairly quickly, so some bugs
  may be in the wrong place)
* Made sure (hopefully) all bugs are now categorized, so a basic
  runtests.py with pypy3 should hopefully pass
* Changed pypy3 to be required in Travis
* Added an extra (optional) test that runs through pypy3_bugs.txt.
  The majority of this is expected to fail. This requires an
  extra option to runtest.py ""--listfile"", which just runs through
  the tests listed in the file.

I haven't made pypy2 a required test in this commit - since Python2 support is deprecated soon, there seemed limited value in putting much effort into pypy2.

Added faulthandler to runtests in the hope of being able to pin-down segmentation faults better on Travis

FileListExcluder matches regexes, not just name. Uses the same mechanism as is used for processing string passed on commandline","['.travis.yml', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/Optimize.c', 'runtests.py', 'tests/pypy2_bugs.txt', 'tests/pypy_bugs.txt', 'tests/pypy_crash_bugs.txt', 'tests/pypy_implementation_detail_bugs.txt', 'tests/run/callargs.pyx', 'tests/run/cpp_stl_conversion.pyx', 'tests/run/importfrom.pyx', 'tests/run/kwargproblems.pyx', 'tests/run/list_pop.pyx', 'tests/run/modop.pyx', 'tests/run/pep448_test_extcall.pyx', 'tests/run/powop.pyx', 'tests/run/pure.pyx', 'tests/run/py_hash_t.pyx']"
4c7bd3c8e72acd6560cd9b42acaac0c4dac63c4e,2020-03-19 07:47:58,Zackery Spytz,Add some missing Py3.3+ declarations to object.pxd (GH-3445),['Cython/Includes/cpython/object.pxd']
d4d8eef30edf6377f547bc8de41cc44d35f94e21,2020-03-19 07:34:27,Matti Picus,"Backport some fixes for C compiler warnings (GH-3437)

* Work around a C compiler warning (in PyPy's cpyext).
* Avoid a C compiler warning in PyPy3.
* Fix a C compiler warning about an unused variable when compiling in PyPy.","['Cython/Utility/Exceptions.c', 'Cython/Utility/ModuleSetupCode.c']"
c5f2231ec462f23f53d5ec8d0963f8da6b7145cf,2020-03-16 10:20:53,Zackery Spytz,"Fix the cdiv() and cmod() definitions in Shadow.py (GH-3429)

Closes #2643.","['Cython/Shadow.py', 'tests/run/cdivision_CEP_516.pyx']"
70b4cc65e2e4f430607dbccbf56c265b438203a1,2020-03-12 08:58:41,Zackery Spytz,"Add missing declarations to number.pxd (GH-3421)

PyNumber_MatrixMultiply() and PyNumber_InPlaceMatrixMultiply() were
missing from number.pxd.

The comments are taken from the C API documentation
(https://docs.python.org/3.8/c-api/number.html).",['Cython/Includes/cpython/number.pxd']
bd990e4a3a3f821b395b58e6d68b0bbd8f406241,2020-03-12 08:58:41,Zackery Spytz,"Add missing declarations to number.pxd (GH-3421)

PyNumber_MatrixMultiply() and PyNumber_InPlaceMatrixMultiply() were
missing from number.pxd.

The comments are taken from the C API documentation
(https://docs.python.org/3.8/c-api/number.html).",['Cython/Includes/cpython/number.pxd']
22213aa38cfb3460bbcd746910cea00eedea8a2c,2020-03-10 20:34:26,Samuel Colvin,fix indentation on annotation_typing docs (GH-3257),['docs/src/userguide/source_files_and_compilation.rst']
011acaaf9f8f0e19cd3299d988c49590a941d9a1,2020-03-09 13:57:25,Stefan Behnel,"Only isinstance-test the type for actual types.
Fixes ""Make it a bit less likely that the Python version of cython.cast() does something unexpected/wrong.""",['Cython/Shadow.py']
3149eb8367e69f1558c73b0ebc266bdfba8abc0d,2020-03-09 10:56:04,Stefan Behnel,Make it a bit less likely that the Python version of cython.cast() does something unexpected/wrong.,['Cython/Shadow.py']
bf6cd7a03e85aded0c3c254fda398cf31b7426e5,2020-03-07 20:32:58,da-woods,"Fixed initialization of __Pyx_CachedCFunction in the LIMITED_API (GH-3379)

Strings werren't static for the limited API so had to be set at module init rather than compile time.",['Cython/Compiler/Code.py']
6515c0e4475916c7c6b48e1a15f60d9c8822c467,2020-03-07 20:21:36,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
cd34c9165adc208961649d7b5b534e0b1deea5e5,2020-03-07 20:20:34,Stefan Behnel,Update changelog.,['CHANGES.rst']
ed79741ce61313c3b90eec613c5ee0f926ddd999,2020-03-07 20:13:52,da-woods,"Fixed issue where fused functions didn't register as cyfunctions (GH-3386)

* Fixed issue where fused functions didn't register as cyfunctions

Issue https://github.com/cython/cython/issues/3384

This happened where Cython was using a shared API because the
CyFunction type imported from the shared api wasn't the same as
used to initialize the fused function tp_base.","['Cython/Utility/CythonFunction.c', 'tests/run/fused_def.pyx']"
15d779686b3b5cf8f7f5edf7ab74e93e9a4d8324,2020-03-07 20:13:52,da-woods,"Fixed issue where fused functions didn't register as cyfunctions (GH-3386)

* Fixed issue where fused functions didn't register as cyfunctions

Issue https://github.com/cython/cython/issues/3384

This happened where Cython was using a shared API because the
CyFunction type imported from the shared api wasn't the same as
used to initialize the fused function tp_base.","['Cython/Utility/CythonFunction.c', 'tests/run/fused_def.pyx']"
e8540c18c165550f691b4c283667286fda8ea3cc,2020-03-07 20:04:28,Stefan Behnel,Update changelog.,['CHANGES.rst']
8795ba7041725842e3ea340041fbe49d603f2212,2020-03-07 19:40:41,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
477c1d1338efb6c160dee865d694def6f298d6a3,2020-03-07 19:40:26,Stefan Behnel,Update changelog.,['CHANGES.rst']
3bdba45be6855d0586aadefc535c2fe2021dd188,2020-03-07 19:37:18,da-woods,"Fixed crash with default arguments and bound fused functions (GH-3398)

Default arguments are now copied when the bound fused function is created.","['Cython/Utility/CythonFunction.c', 'tests/run/fused_def.pyx']"
4b604aa633ce021bfa6c3f70370338ca03e02a83,2020-03-07 19:37:18,da-woods,"Fixed crash with default arguments and bound fused functions (GH-3398)

Default arguments are now copied when the bound fused function is created.","['Cython/Utility/CythonFunction.c', 'tests/run/fused_def.pyx']"
a8cb127df0cb970b00a8f58797740ef571dc8817,2020-03-03 13:01:18,da-woods,"Support fused arguments specified by annotation or locals (GH-3391)

1. DefNode.has_fused_arguments was set too early (before
locals/annotations) were evalutated, so function was not treated
as fused.
2. When re-evaluating the specializations of the fused function
it was treated as a redefinition because the locals/annotation was
reapplied over the specialized type.
3. Including annotation as string (required changes to
StringNode.analyse_as_type), and extra tests for fused type defined
as cython.fused_type in the Py file","['Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'tests/run/pure_fused.pxd', 'tests/run/pure_fused.py']"
f6bf6aa9c7d2414b54e7289639ae5f43b15ede05,2020-02-29 09:06:53,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
9cda69e9190992a8dd4508fc085d227692831dd6,2020-02-29 09:06:35,Stefan Behnel,Update changelog.,['CHANGES.rst']
30e27f1998a9091b062aa2b50a39b0f64c9f6047,2020-02-29 08:53:36,Zackery Spytz,"Fix the signature of _Py_PyAtExit() (GH-3382)

Closes #3331.",['Cython/Includes/cpython/pylifecycle.pxd']
cf03fa62ba8725aca8c85de071eeb681a1ee5c1d,2020-01-22 20:04:06,isotherm,"FIX: Declare cimported ctuples (GH-1427) (GH-3271)

Closes #1427","['Cython/Compiler/ModuleNode.py', 'tests/compile/ctuple_cimport.pxd', 'tests/compile/ctuple_cimport_T1427.pyx']"
5f821f500315a0b24df24d254e8efdc17f821bd8,2020-02-29 08:53:36,Zackery Spytz,"Fix the signature of _Py_PyAtExit() (GH-3382)

Closes #3331.",['Cython/Includes/cpython/pylifecycle.pxd']
cbedb54156bcabc064278e0905b20d46d2f6f909,2020-02-28 07:22:40,Stefan Behnel,Remove superfluous empty line.,['runtests.py']
53772108863ee4e702ce8ce3b2a0c3d514e347c7,2020-02-27 20:21:13,da-woods,"Cleanup and fix string initialization code for LIMITED_API (GH-3378)

* Cleanup of string initialization code for limited API

Now appears in a few large blocks rather than

```
 # if CYTHON_LIMITED_API
   individual string line
 # endif
```

* Fixed issue with some unicode strings, e.g.

```
# cython: language_level=3str, binding=True

def non_ascii_str():
    s = 'ø\x20\u0020'
    assert isinstance(s, str)
    return s
```",['Cython/Compiler/Code.py']
0d272a51338467a5918911bed068d96bd28ad425,2020-02-26 18:20:08,da-woods,"Allow tempita utility code to be @required (GH-3375)

""@subsitute: tempita"" tag ensures that they are loaded in tempita utility code class","['Cython/Compiler/Code.py', 'Cython/Utility/ObjectHandling.c']"
61d606ace1bfad42a55586de57f96ab4f1ede5b2,2020-02-22 00:22:30,Robert Bradshaw,Merge pull request #3358 Add std::move wrapper to utility library,"['Cython/Includes/libcpp/utility.pxd', 'tests/run/cpp_move.pyx']"
8e35f7e282f0ec7e5dab48d7c0d31595f2b2c237,2020-02-20 15:32:05,Stefan Behnel,"Use correct ""Py_mp_subscript"" type slot for getitem() method instead of ""Py_mp_ass_subscript"" (which is for assignments).",['Cython/Utility/CythonFunction.c']
0ec3c8c0b8b9669d1bedad501e378c1363446021,2020-02-20 15:29:59,Stefan Behnel,"Fix ""unused"" C compiler warning for ""__pyx_FusedFunction_mapping_methods"" when using the limited C-API.",['Cython/Utility/CythonFunction.c']
4eafb11a4b939c8f18baa19e45554b6411eb5120,2020-02-20 15:15:05,Nguyễn Gia Phong,Prevent test failures when Python executable path contains whitespace (GH-3372),"['Cython/TestUtils.py', 'runtests.py']"
3a7fafdb07831e61752963a6d46b2be41513d637,2020-02-19 10:46:35,Matti Picus,Use properties in numpy.pxd to avoid a dependency on internal details (GH-3365),"['Cython/Includes/numpy/__init__.pxd', 'docs/examples/tutorial/numpy/convolve2.pyx', 'runtests.py', 'tests/run/numpy_bufacc_T155.pyx', 'tests/run/numpy_cimport.pyx', 'tests/run/numpy_common.pxi', 'tests/run/numpy_parallel.pyx', 'tests/run/numpy_subarray.pyx', 'tests/run/numpy_test.pyx']"
6a4a0ada5c8986269477e579aca8ac9503737633,2020-02-19 10:03:56,Stefan Behnel,Add Python 3.8 to appveyor build matrix.,['appveyor.yml']
060f5cf6fdaa012d8525c940b3e7fff82d185581,2020-02-18 14:24:15,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
e3f413bfe0476106bf33dc7fce0431c7703c6c25,2020-02-18 14:23:51,Stefan Behnel,Update changelog.,['CHANGES.rst']
2694c1eb1ec88a2207fd314d6558cf0ae285e541,2020-02-13 15:06:02,Frank Schlimbach,"Fixing declaration of inner OpenMP privates (GH-3348)

* omp declare privates on outer loop, since inner loops are not 'omp parallel for'ified","['Cython/Compiler/Nodes.py', 'tests/run/sequential_parallel.pyx']"
d72e4acee86e7ec52293be94614e131c0f5c125e,2020-02-18 14:14:44,da-woods,"Fixed a bug with C++ comparison operators (GH-3361)

They'd generate two calls - one exception checked and one not","['Cython/Compiler/ExprNodes.py', 'tests/run/cpp_operator_exc_handling.pyx', 'tests/run/cpp_operator_exc_handling_helper.hpp']"
66acbe44072e3af15369fea509635ad63055d0f9,2020-02-18 14:14:44,da-woods,"Fixed a bug with C++ comparison operators (GH-3361)

They'd generate two calls - one exception checked and one not","['Cython/Compiler/ExprNodes.py', 'tests/run/cpp_operator_exc_handling.pyx', 'tests/run/cpp_operator_exc_handling_helper.hpp']"
65d5bc4aa42e836a5768cc50c804bb6ccbb5dd32,2020-02-18 10:59:06,Stefan Behnel,Reduce a tiny bit of overhead in a very long running test.,['tests/run/trashcan.pyx']
0b81c765bf9b23138b83311e07aacec74517e778,2020-02-18 10:51:04,Stefan Behnel,"Avoid deprecation warning in Cython-Inline by setting the default language level to ""3str"" if none is provided.",['Cython/Build/Inline.py']
a87f498d964f4b63a93aba79ed8c5f082fedaa4f,2020-02-18 10:23:19,Eddie Elizondo,"Expand LIMITED_API support (GH-3311)

* Add more limited api support
* Fix Fused Functions
* Fixed profile
* Use PyModule_GetDict
* Simplify __Pyx_Globals
* Address issues in CommonStructures
* ifdef guard CyFunction and FusedFunction","['Cython/Compiler/Code.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Naming.py', 'Cython/Compiler/Nodes.py', 'Cython/Utility/Builtins.c', 'Cython/Utility/CommonStructures.c', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Profile.c', 'runtests.py', 'tests/limited_api_bugs.txt']"
1431cc4e492f06abd191e639903966733201baba,2020-02-17 08:23:02,Stefan Behnel,"Prevent false positives when issuing new ""dotted filenames"" warning.
See #2686.",['Cython/Compiler/Main.py']
730641e3a3d7fb9f7ff8611968ce7fa195efe1b5,2020-02-16 09:50:23,Stefan Behnel,"Deprecate dotted filenames for package qualified module names.
Close #2686.","['CHANGES.rst', 'Cython/Compiler/Main.py', 'tests/build/dotted.filename.modules.pxd', 'tests/build/dotted.filename.modules.pyx']"
953c4ad31b5ca675d1e0aaa7de73d907db77417c,2020-02-15 22:56:58,Omer Ozarslan,Add tests for std::move wrapper,['tests/run/cpp_move.pyx']
c56ff344c93f67df82c82c1a0ea6e956d9a933f0,2020-02-15 22:56:30,Omer Ozarslan,Add std::move wrapper to utility library,['Cython/Includes/libcpp/utility.pxd']
531b9aa6f9ffba73752eac0f9e33a7efaf1458df,2020-02-14 15:47:40,Stefan Behnel,Merge branch '0.29.x',['Makefile']
5fe81f40363002f29978e7cdfd28a0c923c0b162,2020-02-13 17:04:43,Stefan Behnel,Add Makefile target to generate a universal Py2/3 wheel when not compiling Cython.  See GH-3354.,['Makefile']
57cf559f5848ea69948d1bd328e306e54300a599,2020-02-13 17:04:43,Stefan Behnel,Add Makefile target to generate a universal Py2/3 wheel when not compiling Cython.  See GH-3354.,"['Makefile', 'setup.cfg']"
9995c70cada106c9a2025cd10c05774b1b2a6176,2020-02-13 15:06:02,Frank Schlimbach,"Fixing declaration of inner OpenMP privates (GH-3348)

* omp declare privates on outer loop, since inner loops are not 'omp parallel for'ified","['Cython/Compiler/Nodes.py', 'tests/run/sequential_parallel.pyx']"
738bccf74b5e00b1d66141eb83e3a6ba53627811,2020-02-12 19:12:05,da-woods,"Changed always_allow_keywords_T295 for Py3.9 (GH-3351)

* Changed always_allow_keywords_T295 for Py3.9

https://bugs.python.org/issue37645 appears to change some error
messages slightly (including the qualname and not just the
function name). This change just allows doctest to cope with
both the new and old messages",['tests/run/always_allow_keywords_T295.pyx']
4c57aa8842cae4e795d868cf87ff551bf959a932,2020-02-12 14:41:13,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
10ac32006ce1290fa2e337fa016dd243a80c7182,2020-01-29 12:57:48,Stefan Behnel,Update changelog.,['CHANGES.rst']
a4f401550fad3789a070d4137a700d3ec5f081d1,2020-01-27 08:03:37,Stefan Behnel,"Make it clearer what ""make repo"" is meant for.
Closes #3330.","['Makefile', 'README.rst']"
7dc1360b7d6843825dda1c5ef6a90a3c81abb3a3,2019-11-22 03:59:24,mitch,updated documentation to mention 'const' for read-only buffers,"['docs/src/tutorial/strings.rst', 'docs/src/userguide/memoryviews.rst']"
c2e6c6936a5281b7e1f396dabe0765d5ceb0d90f,2020-01-30 13:25:23,Stefan Behnel,Avoid clang compiler warning for potentially dead code.,['Cython/Compiler/Nodes.py']
120a841e7afa1958e803517f007bb9fd37c921f7,2020-02-10 12:27:07,Matti Picus,Remove deprecated import of imp module (#3350),['Cython/Build/Inline.py']
066f73b925f1e432f0bbb7f0d4869aecc65e0ebe,2020-02-12 14:25:45,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Utility/Overflow.c']"
6496c017a07a763e389692fbb680cbc51ab61fbb,2020-02-12 14:22:04,da-woods,"fix ""undeclared"" warning about generated pickle methods (GH-3353)

The pickle functions __reduce__ and __setstate_cython__ were being
visited in the module scope (where they were undeclared) rather
than the class scope where they were declared",['Cython/Compiler/ParseTreeTransforms.py']
11f4d6aef0f9cf8ee60ef839e01914d3b25dfdac,2020-02-12 14:22:04,da-woods,"fix ""undeclared"" warning about generated pickle methods (GH-3353)

The pickle functions __reduce__ and __setstate_cython__ were being
visited in the module scope (where they were undeclared) rather
than the class scope where they were declared",['Cython/Compiler/ParseTreeTransforms.py']
851f47c33008aada2fc2739d3021b09ee1b8b5c8,2020-02-12 08:28:02,da-woods,"More tweaks for reference counting in tests with binding=True (GH-3352)

It looks like different Python versions will now
generate different reference counts during function
calls to CyFunction (due to vectorcall).

Disabled binding for the `get_refcount` function
(since it really doesn't need this complication)
and made one test relative instead of absolute.

Hopefully this fixes the remaining reference
counting mismatches on the enable_binding branch.","['tests/memoryview/memoryview.pyx', 'tests/memoryview/memslice.pyx']"
12e3fec5ab8d3a1481728a8dbfd1d6fb0c5ea4b4,2020-02-11 15:37:47,da-woods,"bufaccess ref-counting tests and extstarargs test (GH-3341)

Disabled binding on the get_refcount function. It looks like
binding generates slightly different refcounts to function arguments
on Python 3.8 (possibly to do with vectorcall?). It isn't relevant
to what's being tested so it's easier to turn it off.

Passing a star-arg tuple and getting the same tuple out doesn't
work with binding, so only tested that without","['tests/buffers/bufaccess.pyx', 'tests/run/extstarargs.pyx']"
0b383fa45650a3acda5ad952e481b7db480d0d08,2020-02-11 15:02:07,Stefan Behnel,Use newer XCode image (as in current wheel builds).,['.travis.yml']
c093d5ac6fa14067ef7f38449fdc15bd4050f31d,2020-02-11 15:01:10,Stefan Behnel,Move slow MacOS builds higher up in the travis build matrix to make them start earlier and reduce the overall turn-over time.,['.travis.yml']
f70d96528757d8ec6ad3ebd610cb1c6d77d4881d,2020-02-11 14:57:46,Stefan Behnel,Include Py3.9 in travis build matrix.,['.travis.yml']
1d29394156bbcdf1a9d084f5c301fe11918662a5,2020-01-30 13:25:23,Stefan Behnel,Avoid clang compiler warning for potentially dead code.,['Cython/Compiler/Nodes.py']
de6c2c527f09b5c2e140e00d9f1b6424fa353f70,2020-02-11 04:47:04,Chris Gyurgyik,"Add skeleton, functions of <numeric> library (#3332)","['Cython/Includes/libcpp/numeric.pxd', 'tests/run/cpp_stl_numeric_ops.pyx']"
9355dc5e9cdb420ae85a6f4fdf6c61afdcf8a4df,2020-02-10 12:27:07,Matti Picus,Remove deprecated import of imp module (#3350),['Cython/Build/Inline.py']
26cb654dcf4ed1b1858daf16b39fd13406b1ac64,2020-02-06 10:24:48,Stefan Behnel,Prepare release of 0.29.15.,"['CHANGES.rst', 'Cython/Shadow.py']"
761b929dac197159540210bc09307f0f773c4a35,2020-01-30 13:43:15,Stefan Behnel,Suppress clang compiler warnings abou compile-time constant conditions and dead code.,['Cython/Utility/Overflow.c']
5936a2f932e8099692ec88af66e2fc590a55dfca,2020-01-30 13:31:41,Stefan Behnel,"Fix tests in ""libcpp_algo"" test as already done in master.",['tests/run/libcpp_algo.pyx']
105cf92dfc4d3dc8d9c10495f1bef8a9ad1a9201,2020-01-30 10:55:59,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'tests/run/pyclass_dynamic_bases.pyx']"
016762d1ebb893e63b9b10122d229bf44b75d035,2019-11-22 03:59:24,mitch,updated documentation to mention 'const' for read-only buffers,"['docs/src/tutorial/strings.rst', 'docs/src/userguide/memoryviews.rst']"
888bc4a4eaa95c0447019afdb58177ff3fcb9b11,2020-01-30 10:04:40,Stefan Behnel,"Make sure we always use the correct post-analysed bases, mkw and metaclass in Python class creation by making the PyClassDefNode own it and other nodes only refer to it, rather than risking stale references in subnodes.
(Alternatively, ownership could be distributed across the subnodes, but it's a bit unclear how, and how to refer to the other subnodes then.)
Closes #3338.","['CHANGES.rst', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/Nodes.py', 'tests/run/pyclass_dynamic_bases.pyx']"
f875f4c2a1b8e84fc3577a8dbe607d72cbd70131,2020-01-29 13:11:57,Stefan Behnel,Merge branch '0.29.x',"['CHANGES.rst', 'Cython/Compiler/Nodes.py', 'tests/run/async_def.pyx', 'tests/run/test_coroutines_pep492.pyx']"
e83ff762f52505280c06c6bb166cd3f7517ebdfe,2020-01-29 13:11:18,Stefan Behnel,"Fix temp cleanup in async functions when the return value is in a temp variable.
Closes #3337.","['CHANGES.rst', 'Cython/Compiler/Nodes.py', 'tests/run/async_def.pyx']"
373e59c40f6682427691a80e122edacdb26fef31,2020-01-29 12:57:48,Stefan Behnel,Add warning that no Cython-specific tests should be added to the PEP-492 coroutine test file copied from CPython.,['tests/run/test_coroutines_pep492.pyx']
7d08a53cdb6cdc69737beeff4b3ba94818d311c8,2020-01-28 09:46:41,Stefan Behnel,"Add explicit 'object' return type to declared C-API function.
Closes #3335.",['Cython/Includes/cpython/descr.pxd']
811dbde96d8c6570aab8053e3393c312d82c88ab,2020-01-28 07:41:15,da-woods,"Improve node coverage in PrintTree (GH-3333)

Includes extra information for some additional types",['Cython/Compiler/Visitor.py']
59cfc984a238ec1fd4221da48e4faa4bfeff244a,2020-01-27 09:23:20,da-woods,"Fixed default buffer arguments with binding [Fixes `bufaccess`] (GH-3164)

* Fixed default buffer arguments with binding

They were assigned to global scope, but buffers aren't allowed in
global scope. To fix, dropped the buffer type from the default value

* Updated reference counting tests in bufaccess

So they now have the new values for binding=True","['Cython/Compiler/ExprNodes.py', 'tests/buffers/bufaccess.pyx']"
70bbd79f1518e2a5184ec0757c1e3ab5b86f704e,2020-01-27 08:03:37,Stefan Behnel,"Make it clearer what ""make repo"" is meant for.
Closes #3330.","['Makefile', 'README.rst']"
8d8795c6e0c87bf93a5a506b9e0af4f7a6e04d43,2019-11-28 07:21:30,Matti Picus,"Emit init code before body code (GH-3166)

The test crash in cdef_multiple_inheritance has to do with a change in the method assignment. In the old version, the code

cdef class Both(CBase, PyBase):
    cdef dict __dict__
    cdef c_method(self):
        return ""Both""
    cpdef cp_method(self):
        return ""Both""
    def call_c_method(self):
        return self.c_method()

would assign cp_method and call_c_method to a PyMethodDef struct. In the new code only call_c_method is assigned in the PyMethodDef struct, but both are assigned to the __pyx_ptype...Both->tp_dict inside __Pyx_Init_Globals which happens while __pyx_ptype...Both is still NULL. The assignment __pyx_ptype...Both = &__pyx_type...Both happens in the next fragment, a few lines down.

This PR reorders the fragments so that __pyx_type...Both is set up before the method assignments and does not seem to cause any new test failures.","['Cython/Compiler/Nodes.py', 'tests/run/cdef_multiple_inheritance.pyx']"
08cdad191331288107957c4fdcafde7941ae4ee0,2019-10-12 09:14:18,Matti Picus,DOC: document default change (GH-3173),['docs/src/userguide/source_files_and_compilation.rst']
f95c9c5c98ddacbdbde47d84bc5e349c82e0ee8c,2019-10-01 19:32:28,da-woods,Fix and move tests for functions used as methods (GH-3159),"['tests/run/function_as_method_T494.pyx', 'tests/run/function_as_method_py_T494.py', 'tests/run/staticmethod.pyx']"
9c2eeb0ea038f937ea6f007b450d232a58faf777,2019-09-02 17:28:16,Matti Picus,TEST: fix some failing tests (GH-3120),"['tests/memoryview/memslice.pyx', 'tests/run/pstats_profile_test.pyx']"
925339c5f9777cf55ff0e81b7cb1d861c922c13e,2019-09-02 17:24:23,Stefan Behnel,"Create copy of test with ""binding"" directive disabled.",['tests/run/pstats_profile_test_pycfunc.pyx']
9e6b2df5e9a7a5a49333680a1184f6887d5dc25f,2019-05-06 16:12:19,Stefan Behnel,Make `cpdef func() nogil` work with CyFunctions by excluding the Python function creation from the 'nogil' check.,"['Cython/Compiler/Nodes.py', 'tests/run/cpdef_nogil.pyx']"
b1704d61482cbfdb6a552c60e07d182877e710be,2019-02-23 17:08:46,Stefan Behnel,"GH-2564: Enable ""binding"" directive by default.",['Cython/Compiler/Options.py']
e376d9890fb993c3d661db8ce4d4c4c6fd4acddc,2020-01-24 10:36:56,Stefan Behnel,Update changelog.,['CHANGES.rst']
1bc86b57500d215af1af7fb4b9aae144d7ae6012,2020-01-23 06:22:57,Stefan Behnel,"The ""memoryview"" Python builtin is now cacheable since we no longer support Py2.6.",['Cython/Compiler/Code.py']
67f3aebb56744bc96ead6e5b35d2f45f2ca534fe,2020-01-23 06:14:47,aws-taylor,"Remove stray "";"" from limited API code to work with -Wpedantic (GH-3326)",['Cython/Compiler/ModuleNode.py']
ca5d90efe925b2bd988fce8af042d82218ae5a7d,2020-01-23 06:12:21,Alex Henrie,Mark failures in Py_EnterRecursiveCall as unlikely (GH-3322),['Cython/Utility/ObjectHandling.c']
67b77198c6cae35844fbdeec98922f0560d0e246,2020-01-23 06:06:48,Jerome Kieffer,Provide support for the complex library (#2891),"['Cython/Includes/libc/complex.pxd', 'tests/run/complex_numbers_cmath_T2891.pyx']"
632ec1a01f8a2c3410e28e4d5e0b0cedb4463de3,2020-01-22 20:04:06,isotherm,"FIX: Declare cimported ctuples (GH-1427) (GH-3271)

Closes #1427","['Cython/Compiler/ModuleNode.py', 'tests/compile/ctuple_cimport.pxd', 'tests/compile/ctuple_cimport_T1427.pyx']"
52c326626f88b2df7e86b10c63634603b4cbe38f,2020-01-03 08:00:52,Stefan Behnel,Disable extended test dependencies also in Py3.8/9 since not all of them are compatible yet.,['.travis.yml']
0445486a2b3fc9f089a19198a852280d74b9e681,2020-01-01 14:47:11,Stefan Behnel,Move back to a matrix setup in travis.yml to avoid the long list of redundant and boring Python build setups.,['.travis.yml']
a73815042ea40373b098a5efba264f72dfe60ec6,2020-01-16 13:19:51,Stefan Behnel,Minor code cleanup.,['Cython/Compiler/PyrexTypes.py']
6d2c3b9372547ce0aefac2babfe48dc1568875b9,2020-01-14 19:02:22,serge-sans-paille,"Support Pythran shape (GH-3307)

* Support Pythran shape

Through a conversion to array. I've tested that and it's ok performance wise,
the C++ compiler can deal with the abstraction (with a small overhead though).","['Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/Symtab.py', 'Cython/Utility/CppSupport.cpp', 'tests/run/numpy_pythran.pyx']"
d86aebefd33ecd232317e4becc15bb1d2f9f4bb7,2020-01-14 18:37:27,Robert Bradshaw,"Avoid undefined behavior caused incorrect __pyx_coroutine_body_t definition.

This manifests as function-type-mismatch sanitization error on Clang.",['Cython/Utility/Coroutine.c']
9b5b8c92d61e9f1287b3dc924d49931a30ebb861,2020-01-14 17:41:50,Josh Tobin,"Fix bitwise ""&"" operator with negative operand (GH-3312)","['Cython/Utility/Optimize.c', 'tests/run/pyintop.pyx']"
90ca446a4be3de59592feef57c53557df3cf32e2,2020-01-13 10:29:51,Yuri Escalianti,"#2740 emit_code_comments - removed from options, updated documentation (GH-3236)","['Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Options.py', 'docs/src/userguide/source_files_and_compilation.rst']"
7c20e319a979657558d809ffd179064679ce46e2,2020-01-13 10:25:30,Stefan Behnel,Merge branch '0.29.x',[]
8c620c388e361c5944be4b6d143d8af3efd1a731,2020-01-13 10:23:44,ThePrez,"Change goto label to avoid compile conflict (GH-3241)

Closes GH-3238",['Cython/Utility/ExtensionTypes.c']
f5364ec67e3451937581a12471bb27287a622b98,2020-01-13 10:23:44,ThePrez,"Change goto label to avoid compile conflict (GH-3241)

Closes GH-3238",['Cython/Utility/ExtensionTypes.c']
84473513e5f709089cf201ac950350b359dc2453,2020-01-12 08:51:41,Eddie Elizondo,"Add LIMITED_API support and remove static state (GH-3223)

Blacklists failing test for now","['.travis.yml', 'Cython/Compiler/Code.py', 'Cython/Compiler/ExprNodes.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Naming.py', 'Cython/Compiler/Nodes.py', 'Cython/Compiler/PyrexTypes.py', 'Cython/Compiler/TypeSlots.py', 'Cython/Utility/Exceptions.c', 'Cython/Utility/ExtensionTypes.c', 'Cython/Utility/ImportExport.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'Cython/Utility/Optimize.c', 'Cython/Utility/StringTools.c', 'Cython/Utility/TypeConversion.c', 'runtests.py', 'tests/limited_api_bugs.txt']"
640aab7408d6fa1cf139b0b175b60fddae56a487,2020-01-11 07:24:52,Yu Feng,"Add a hook to change how `utilities` files are read. (GH-3273)

* Allow overriding the reading of utilities files.

Add set_read_utitlities_hook() to override how utilities
files are accessed.

This change simplifies how Cython can be packaged into a single
file binary executable, where utility files are stored inside the
binary executable as package resource.",['Cython/Compiler/Code.py']
6e72d84f43fc8f8da4ddc7695ac9f5b434788ef5,2020-01-08 11:14:16,Stefan Behnel,Merge branch '0.29.x',['.travis.yml']
070ef54efaa29cc67300c2e2e0edbb53c1daa3e3,2020-01-08 11:12:48,Stefan Behnel,Clean up travis config in 0.29.x branch.,['.travis.yml']
9a53c8ac9a9438822dd1659fee4ae478953ce38a,2020-01-08 10:54:52,Stefan Behnel,Merge branch '0.29.x',['tests/run/generators.pyx']
c4a5b6ace3b50f14abd067127fe76d65ba961091,2020-01-08 10:53:02,Stefan Behnel,Test cleanups.,['tests/run/generators.pyx']
83e4a348992a1a90231639a4d31d0e827cb13732,2020-01-08 10:44:20,da-woods,Fixed handling of kwds in generator closures (GH-3268),"['Cython/Compiler/Nodes.py', 'tests/run/generators.pyx']"
c2d76d3201603385d4d9d4780e1f0257056e8363,2020-01-08 10:44:20,da-woods,Fixed handling of kwds in generator closures (GH-3268),"['Cython/Compiler/Nodes.py', 'tests/run/generators.pyx']"
dd64445f7b74338e911ead8c566e939a2d62cf52,2020-01-08 10:41:02,da-woods,"Remove unnecessary sentence from documentation (GH-3302)

0.11.2 is over a decade old at this point so people aiming to install
  earlier versions should probably just read the documentation for those
version. There aren't any footnotes in the documentation.",['docs/src/quickstart/install.rst']
08e66edbcc937f7baacd576724cf215f6c533297,2019-03-14 23:06:51,Stefan Behnel,Fix deprecated threading API usage in test runner.,['runtests.py']
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            1b5b0a514d5e51e85a90dd891190f81d646ff47c,2019-10-24 09:25:13,da-woods,"Potential fix for GH issue #3203

Gets the specialized type if possible from
NameNode.analyse_as_type

This does introduce a potential new bug:
```
cimport cython

just_float = cython.fused_type(float)

cdef OK1(just_float x):
    return just_float in floating

cdef fail1(just_float x, floating y):
    return just_float in floating

cdef fail2(floating x):
    return floating in floating

def show():
    """"""
    >>> show()
    True
    True
    True
    True
    """"""
    print(OK1(1.0))
    print(fail1(1.0, 2.0))
    print(fail1[float, double](1.0, 2.0))
    print(fail2[float](1.0))
```
fail1 and fail2 work before this patch but fail with it. It isn't
clear to me if this should actually be considered a bug. It
works in both versions with `cython.floating`, which possibly
suggests analyse_as_type in AttributeNode should also be changed","['Cython/Compiler/ExprNodes.py', 'tests/run/fused_cpp.pyx']"
a32a29e8aaa688e0507d374ab47e641eb1a427c4,2019-10-21 18:01:46,Matthew Edwards,"Improve error presentation in IPython magic (GH-3196)

* IPython magic: hide internal traceback when compilation fails
* IPython magic: hide internal traceback when build fails",['Cython/Build/IpythonMagic.py']
05059e2a9b89bf6738a7750b905057e5b1e3fe2e,2019-10-21 17:58:23,Matthew Edwards,"Add most modifying sequence operations to libcpp.algorithm (GH-3188)

Also fix tests in libcpp_algo (how did this ever work?)","['Cython/Includes/libcpp/algorithm.pxd', 'Cython/Includes/libcpp/string.pxd', 'tests/run/cpp_stl_algo_modifying_sequence_ops.pyx', 'tests/run/cpp_stl_algo_nonmodifying_sequence_ops.pyx', 'tests/run/libcpp_algo.pyx']"
5a8c984403ce73ac29f9e8b7c78ee5f0f4c608a3,2019-10-18 08:32:30,samaingw,Allow docstrings in c++ classes (GH-3183),['Cython/Compiler/Parsing.py']
740ba90ea8d7f420be803c0c3541d94b399f37cc,2019-10-18 08:10:22,Stefan Behnel,Try to fix a C++ test failure.,['tests/run/libcpp_algo.pyx']
01e00f6cb9ac77d26f92da777d25cebef748eaa7,2019-10-18 07:57:46,Alphadelta14,Leverage distutil's build_extensions so that --parallel works on Python 3 (GH-3187),['Cython/Distutils/old_build_ext.py']
be53f1234bec0bca4c35f020905e24d0637b91e3,2019-10-18 07:40:50,Stefan Behnel,"Add an explicit test for async-def functions with decorators.
Closes GH-1462.",['tests/run/coroutines.py']
758aaad041dddef318f7eb476612d66eb8f7d082,2019-10-16 18:56:07,Stefan Behnel,Merge branch '0.29.x',[]
ca585be25e2df6291ac6fd747c1152187d2669d6,2019-10-16 18:48:51,alex-xnor,Make sure not to emit duplicate typedefs for fused nodes (GH-3112),"['Cython/Compiler/FusedNode.py', 'tests/compile/fused_redeclare_T3111.pyx']"
059c2b0d802c8c5513ec77e2f9a2374ba65c0c09,2019-10-16 18:52:29,Matthew Edwards,"Add most non-modifying sequence operations to libcpp.algorithm (GH-3179)

* Rearrange libcpp.algorithm to match cppreference and reformat
* Add all_of, any_of and none_of to libcpp.algorithm
* Add count and count_if to libcpp.algorithm
* Add string(first, last) constructor to libcpp.string
* Add the simplest overload of mismatch to libcpp.algorithm
* Add find, find_if, and find_if_not to libcpp.algorithm
* Add find_end to libcpp.algorithm and distance to libcpp.iterator
* Add find_first_of to libcpp.algorithm
* Add adjacent_find to libcpp.algorithm
* Add search to libcpp.algorithm
* Add search_n to libcpp.algorithm
* Add exception specifiers in libcpp.algorithm
* Add predicated overload of find_end, search and search_n to libcpp.algorithm","['Cython/Includes/libcpp/algorithm.pxd', 'Cython/Includes/libcpp/iterator.pxd', 'Cython/Includes/libcpp/string.pxd', 'tests/run/cpp_stl_algo_nonmodifying_sequence_ops.pyx']"
7773dd51e4826ba01e0349f11144697dd5645edf,2019-10-16 18:48:51,alex-xnor,Make sure not to emit duplicate typedefs for fused nodes (GH-3112),"['Cython/Compiler/FusedNode.py', 'tests/compile/fused_redeclare_T3111.pyx']"
70dd7561d431f248e20c2a1365111418ea494cbd,2019-10-14 18:51:27,Stefan Behnel,Merge branch '0.29.x',[]
aa56a6b108de18138dfcf8722610327024b11dd9,2019-10-14 18:48:59,Thomas A Caswell,"FIX: do not include tp_print for py39 (GH-3186)

This is more follow up to https://bugs.python.org/issue37250

The action taken is:
 - restore tp_print to not break all of the sdists on pypi for py38
 - remove tp_print for real in py39

In https://github.com/cython/cython/pull/3171 tp_print was initialized
for PY_VERSION_HEX >= 0x030800b4 however, when trying to use cython
with cpython master (aka py39) there are compile time exceptions due
to too many initializers:

   error: too many initializers for ‘PyTypeObject’ {aka ‘_typeobject’}

This fixes that by putting an upper bound on the ifdef of including
pt_print at the end of the object.",['Cython/Compiler/TypeSlots.py']
b63dcbf08b01e3e01f31c81d90ab95f8c8a66dd7,2019-10-12 09:51:21,Stefan Behnel,Minor test code refactoring to use f-string.,['Cython/Utility/TestCythonScope.pyx']
2d62a208e533cadc98b789d5988ecc86763eb890,2019-10-14 18:48:59,Thomas A Caswell,"FIX: do not include tp_print for py39 (GH-3186)

This is more follow up to https://bugs.python.org/issue37250

The action taken is:
 - restore tp_print to not break all of the sdists on pypi for py38
 - remove tp_print for real in py39

In https://github.com/cython/cython/pull/3171 tp_print was initialized
for PY_VERSION_HEX >= 0x030800b4 however, when trying to use cython
with cpython master (aka py39) there are compile time exceptions due
to too many initializers:

   error: too many initializers for ‘PyTypeObject’ {aka ‘_typeobject’}

This fixes that by putting an upper bound on the ifdef of including
pt_print at the end of the object.",['Cython/Compiler/TypeSlots.py']
4d437f24a469fef2424f3fb5bfae58f68eafac1f,2019-10-08 20:41:00,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
cb1e6e410864d1a8474f2ebd1482f63e59d7b346,2019-09-03 18:45:27,Alex Henrie,Remove duplicated line from __Pyx_c_pow,['Cython/Utility/Complex.c']
5b396db0a7c9b10c7418223357e87b95b009b70b,2019-09-06 10:37:32,Stefan Behnel,"Make sure to include ""Python.h"" also from the ""public"" header file, which depends on its declarations.
Closes #3133.",['Cython/Compiler/ModuleNode.py']
3c059640231558d62c3ef92a93e73c923ccf6fea,2019-09-06 18:08:02,Stefan Behnel,Fix MemoryView.get_slice_from_memview() to propagate exceptions.,['Cython/Utility/MemoryView.pyx']
baa08c56d2782f563c2053a2d7a7d3910f8201c5,2019-10-08 20:27:06,Pablo Galindo,"Explicitly initialize tp_print in Python 3.8 (GH-3171)

Explicitly initialize tp_print in Python 3.8

When compiling cython-generated extension modules in Python3.8rc1
this error is emitted by the compiler:

  _ext.cpp:8104:1: error: missing initializer for member ‘_typeobject::tp_print’ [-Werror=missing-field-initializers]

The reason is that Python3.8 moved the tp_print slot (d917cfe4051) to
the end of the _typeobject struct and reused the original position for
tp_vectorcall_offset. The current generated code does not initialize the
deprecated tp_print slot that was moved to the end of the struct.",['Cython/Compiler/TypeSlots.py']
00a1d4cb3b4ed84e50a4902518a05d02f93e95bb,2019-10-08 20:27:06,Pablo Galindo,"Explicitly initialize tp_print in Python 3.8 (GH-3171)

Explicitly initialize tp_print in Python 3.8

When compiling cython-generated extension modules in Python3.8rc1
this error is emitted by the compiler:

  _ext.cpp:8104:1: error: missing initializer for member ‘_typeobject::tp_print’ [-Werror=missing-field-initializers]

The reason is that Python3.8 moved the tp_print slot (d917cfe4051) to
the end of the _typeobject struct and reused the original position for
tp_vectorcall_offset. The current generated code does not initialize the
deprecated tp_print slot that was moved to the end of the struct.",['Cython/Compiler/TypeSlots.py']
074362b47093febfe5273ea7a00f4ba5ded6e73f,2019-09-30 18:50:57,da-woods,"unicode imports (#3119)

* Handle normalization of unicode identifiers
* Support unicode characters in module names
  (Only valid under Python 3)","['Cython/Build/Dependencies.py', 'Cython/Compiler/Main.py', 'Cython/Compiler/ModuleNode.py', 'Cython/Compiler/Naming.py', 'Cython/Compiler/StringEncoding.py', 'Cython/StringIOTree.py', 'Cython/Utility/CConvert.pyx', 'tests/run/struct_conversion.pyx', 'tests/run/unicode_identifiers.pyx', 'tests/run/unicode_imports.srctree']"
7e233ab00e117b2e7165c246941ac85a989be262,2019-09-18 19:21:59,realead,Fix the handling of --annotate-fullc in cythonize.py (GH-3103),"['Cython/Build/Cythonize.py', 'Cython/Build/Tests/TestCythonizeArgsParser.py', 'Cython/Compiler/Tests/TestCmdLine.py', 'Cython/Compiler/Tests/Utils.py', 'runtests.py', 'tests/build/cythonize_with_annotate_via_cli.srctree']"
edbd6468d97e85254b97eaca9267105aff0f7282,2019-09-10 17:59:07,Stefan Behnel,Update changelog.,['CHANGES.rst']
cd031618700bf8293818729ee07bfc855fb424a2,2019-09-10 17:54:43,Stefan Behnel,Update changelog.,['CHANGES.rst']
226adb2c2933b15ec1067773c7474ff7b2715d40,2019-09-10 17:17:49,Stefan Behnel,Merge branch '0.29.x',['CHANGES.rst']
48ef2853cf0b77ce4a7cef3739fd25e02825dcf2,2019-09-10 17:17:44,Stefan Behnel,Update changelog.,['CHANGES.rst']
d1ecc898b43dfc56593e51afbd366db75cd58ca9,2019-09-10 17:12:39,Stefan Behnel,Update changelog.,['CHANGES.rst']
cea380edcd63121b136266b4e3265ba464276671,2019-08-28 19:01:07,Gerion Entrup,"Utility/CppConvert: fix Cython warning (GH-3108)

When compiling to C++ code and using automatic conversion from Python
str to C++ string, Cython inserts this function template but generates the warning:
warning: string.from_py:15:63: local variable 'length' might be referenced before assignment",['Cython/Utility/CppConvert.pyx']
7ffb41a4ef5d44128e3f187a877d51fc75a43f07,2019-09-10 17:03:06,Stefan Behnel,Discard a C comment from the generated files.,['Cython/Utility/ModuleSetupCode.c']
71ef656e5087c7f6da6eb96aacfb718a0e657931,2019-09-10 17:00:53,Stefan Behnel,Add comment.,['Cython/Utility/ObjectHandling.c']
e281445ef60ab88d0699b47daacb8cb2f3833259,2019-09-10 16:59:44,Stefan Behnel,Discard a C comment from the generated files.,['Cython/Utility/CythonFunction.c']
54211e322a55b419ba5bf237d2d3ebba32c70d0d,2019-09-10 16:55:48,Jeroen Demeyer,Support METH_FASTCALL for Cython functions (GH-3101),"['Cython/Compiler/Nodes.py', 'Cython/Compiler/ParseTreeTransforms.py', 'Cython/Utility/CythonFunction.c', 'Cython/Utility/ModuleSetupCode.c', 'Cython/Utility/ObjectHandling.c', 'tests/run/fastcall.pyx']"
